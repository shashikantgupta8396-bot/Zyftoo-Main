{
    "sourceFile": "Ninico/app/corporate/sign-in/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1753614088378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753615611389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,11 +74,18 @@\n                 setToast('This login is for corporate users only. Please use the regular sign-in.')\r\n                 return\r\n             }\r\n \r\n-            // Login with email and password (backend will handle email-to-phone mapping)\r\n+            // Get phone number from user data for backend authentication\r\n+            const userPhone = userCheckResponse.data.phone\r\n+            if (!userPhone) {\r\n+                setToast('Unable to retrieve account information')\r\n+                return\r\n+            }\r\n+\r\n+            // Login with phone and password (backend expects phone-based auth)\r\n             const loginData = { \r\n-                email, \r\n+                phone: userPhone, // Use phone from email lookup\r\n                 password,\r\n                 userType: 'Corporate' // Specify we're doing corporate login\r\n             }\r\n             \r\n@@ -110,8 +117,9 @@\n \r\n     const handleSignUp = async (e) => {\r\n         e.preventDefault()\r\n         \r\n+\r\n         if (!name || !email || !phone || !password || !confirmPassword || \r\n             !companyName || !gstNumber || !companyAddress) {\r\n             setToast('Please fill all required fields')\r\n             return\r\n@@ -127,22 +135,22 @@\n             return\r\n         }\r\n \r\n         try {\r\n-            // Check if user exists by phone\r\n+            // Check if user exists by email (primary check for corporate users)\r\n+            const emailCheckResponse = await authService.checkUserByEmail(email)\r\n+            if (emailCheckResponse.success && emailCheckResponse.data.exists) {\r\n+                setToast('User already exists with this email')\r\n+                return\r\n+            }\r\n+\r\n+            // Also check if user exists by phone (secondary check)\r\n             const phoneCheckResponse = await authService.checkUserByPhone(phone)\r\n             if (phoneCheckResponse.success && phoneCheckResponse.data.exists) {\r\n                 setToast('User already exists with this phone number')\r\n                 return\r\n             }\r\n \r\n-            // Check if user exists by email\r\n-            const emailCheckResponse = await authService.checkUserByEmail(email)\r\n-            if (emailCheckResponse.success && emailCheckResponse.data.exists) {\r\n-                setToast('User already exists with this email')\r\n-                return\r\n-            }\r\n-\r\n             // Send OTP for verification\r\n             const otpData = { phone, purpose: 'signup' }\r\n             const otpResponse = await authService.sendOTP(otpData, true)\r\n \r\n"
                },
                {
                    "date": 1753616125595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n                     gstNumber,\r\n                     address: companyAddress\r\n                 },\r\n                 role: 'user',\r\n-                gender: 'other', // Default for corporate\r\n+                gender: 'others', // Default for corporate (changed from 'other' to 'others')\r\n                 dob: new Date().toISOString().split('T')[0], // Default current date\r\n                 pincode: '000000' // Default pincode\r\n             }\r\n \r\n"
                },
                {
                    "date": 1753630866486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     const { login, user } = useContext(AuthContext)\r\n     \r\n     // Redirect if already logged in as corporate user\r\n     useEffect(() => {\r\n-        if (user && user.userType === 'Corporate') {\r\n+        if (user && user.userType === 'corporate') {\r\n             router.push('/CorporateHome')\r\n         }\r\n     }, [user, router])\r\n \r\n@@ -29,8 +29,9 @@\n     const [confirmPassword, setConfirmPassword] = useState('')\r\n     const [companyName, setCompanyName] = useState('')\r\n     const [gstNumber, setGstNumber] = useState('')\r\n     const [companyAddress, setCompanyAddress] = useState('')\r\n+    const [pincode, setPincode] = useState('')\r\n     const [otp, setOtp] = useState(new Array(6).fill(''))\r\n     const [newPassword, setNewPassword] = useState('')\r\n \r\n     // Toast handler\r\n@@ -69,9 +70,9 @@\n                 return\r\n             }\r\n \r\n             // Verify this is a corporate user\r\n-            if (userCheckResponse.data.userType !== 'Corporate') {\r\n+            if (userCheckResponse.data.userType !== 'corporate') {\r\n                 setToast('This login is for corporate users only. Please use the regular sign-in.')\r\n                 return\r\n             }\r\n \r\n@@ -85,9 +86,9 @@\n             // Login with phone and password (backend expects phone-based auth)\r\n             const loginData = { \r\n                 phone: userPhone, // Use phone from email lookup\r\n                 password,\r\n-                userType: 'Corporate' // Specify we're doing corporate login\r\n+                userType: 'corporate' // Specify we're doing corporate login\r\n             }\r\n             \r\n             const response = await authService.login(loginData, true)\r\n \r\n@@ -97,9 +98,9 @@\n             }\r\n \r\n             // Verify response contains corporate user\r\n             const userData = response.data?.data?.user || response.data?.user\r\n-            if (userData?.userType !== 'Corporate') {\r\n+            if (userData?.userType !== 'corporate') {\r\n                 setToast('This login is for corporate users only')\r\n                 return\r\n             }\r\n \r\n@@ -119,9 +120,9 @@\n         e.preventDefault()\r\n         \r\n \r\n         if (!name || !email || !phone || !password || !confirmPassword || \r\n-            !companyName || !gstNumber || !companyAddress) {\r\n+            !companyName || !gstNumber || !companyAddress || !pincode) {\r\n             setToast('Please fill all required fields')\r\n             return\r\n         }\r\n \r\n@@ -134,8 +135,13 @@\n             setToast('Please enter a valid 10-digit phone number')\r\n             return\r\n         }\r\n \r\n+        if (pincode.length !== 6) {\r\n+            setToast('Please enter a valid 6-digit pincode')\r\n+            return\r\n+        }\r\n+\r\n         try {\r\n             // Check if user exists by email (primary check for corporate users)\r\n             const emailCheckResponse = await authService.checkUserByEmail(email)\r\n             if (emailCheckResponse.success && emailCheckResponse.data.exists) {\r\n@@ -195,18 +201,18 @@\n                 phone,\r\n                 password,\r\n                 confirmPassword,\r\n                 otp: enteredOtp,\r\n-                userType: 'Corporate', // Set as Corporate by default\r\n+                userType: 'corporate', // Set as corporate by default\r\n                 companyDetails: {\r\n                     companyName,\r\n                     gstNumber,\r\n                     address: companyAddress\r\n                 },\r\n                 role: 'user',\r\n                 gender: 'others', // Default for corporate (changed from 'other' to 'others')\r\n                 dob: new Date().toISOString().split('T')[0], // Default current date\r\n-                pincode: '000000' // Default pincode\r\n+                pincode: pincode // Use actual pincode\r\n             }\r\n \r\n             const signupResponse = await authService.signup(registrationData, true)\r\n \r\n@@ -240,9 +246,9 @@\n                 return\r\n             }\r\n \r\n             // Verify this is a corporate user\r\n-            if (userCheckResponse.data.userType !== 'Corporate') {\r\n+            if (userCheckResponse.data.userType !== 'corporate') {\r\n                 setToast('This reset is for corporate users only')\r\n                 return\r\n             }\r\n \r\n@@ -469,8 +475,22 @@\n                                                     </div>\r\n                                                 </div>\r\n                                                 <div className=\"col-md-6\">\r\n                                                     <div className=\"corporate-form-group\">\r\n+                                                        <label>Pincode *</label>\r\n+                                                        <input\r\n+                                                            type=\"text\"\r\n+                                                            className=\"corporate-input\"\r\n+                                                            placeholder=\"123456\"\r\n+                                                            value={pincode}\r\n+                                                            onChange={(e) => setPincode(e.target.value)}\r\n+                                                            maxLength=\"6\"\r\n+                                                            required\r\n+                                                        />\r\n+                                                    </div>\r\n+                                                </div>\r\n+                                                <div className=\"col-md-6\">\r\n+                                                    <div className=\"corporate-form-group\">\r\n                                                         <label>Password *</label>\r\n                                                         <input\r\n                                                             type=\"password\"\r\n                                                             className=\"corporate-input\"\r\n"
                },
                {
                    "date": 1753630980221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,9 +382,21 @@\n                                             <span>New to Corporate Portal?</span>\r\n                                         </div>\r\n                                         <button \r\n                                             className=\"corporate-btn-secondary\"\r\n-                                            onClick={() => setIsSignUp(true)}\r\n+                                            onClick={() => {\r\n+                                                setIsSignUp(true)\r\n+                                                // Clear all form fields when switching to signup\r\n+                                                setName('')\r\n+                                                setEmail('')\r\n+                                                setPhone('')\r\n+                                                setPassword('')\r\n+                                                setConfirmPassword('')\r\n+                                                setCompanyName('')\r\n+                                                setGstNumber('')\r\n+                                                setCompanyAddress('')\r\n+                                                setPincode('')\r\n+                                            }}\r\n                                         >\r\n                                             Create Corporate Account\r\n                                         </button>\r\n                                     </div>\r\n@@ -525,9 +537,21 @@\n                                             <span>Already have an account?</span>\r\n                                         </div>\r\n                                         <button \r\n                                             className=\"corporate-btn-secondary\"\r\n-                                            onClick={() => setIsSignUp(false)}\r\n+                                            onClick={() => {\r\n+                                                setIsSignUp(false)\r\n+                                                // Clear all form fields when switching back to login\r\n+                                                setName('')\r\n+                                                setEmail('')\r\n+                                                setPhone('')\r\n+                                                setPassword('')\r\n+                                                setConfirmPassword('')\r\n+                                                setCompanyName('')\r\n+                                                setGstNumber('')\r\n+                                                setCompanyAddress('')\r\n+                                                setPincode('')\r\n+                                            }}\r\n                                         >\r\n                                             Back to Sign In\r\n                                         </button>\r\n                                     </div>\r\n"
                },
                {
                    "date": 1753631550989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,16 +201,16 @@\n                 phone,\r\n                 password,\r\n                 confirmPassword,\r\n                 otp: enteredOtp,\r\n-                userType: 'corporate', // Set as corporate by default\r\n+                userType: 'corporate', // Set as corporate by default (matches database)\r\n                 companyDetails: {\r\n                     companyName,\r\n                     gstNumber,\r\n                     address: companyAddress\r\n                 },\r\n                 role: 'user',\r\n-                gender: 'others', // Default for corporate (changed from 'other' to 'others')\r\n+                gender: 'others', // Default for corporate\r\n                 dob: new Date().toISOString().split('T')[0], // Default current date\r\n                 pincode: pincode // Use actual pincode\r\n             }\r\n \r\n"
                },
                {
                    "date": 1753632430658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     const { login, user } = useContext(AuthContext)\r\n     \r\n     // Redirect if already logged in as corporate user\r\n     useEffect(() => {\r\n-        if (user && user.userType === 'corporate') {\r\n+        if (user && user.userType === 'Corporate') {\r\n             router.push('/CorporateHome')\r\n         }\r\n     }, [user, router])\r\n \r\n@@ -70,9 +70,9 @@\n                 return\r\n             }\r\n \r\n             // Verify this is a corporate user\r\n-            if (userCheckResponse.data.userType !== 'corporate') {\r\n+            if (userCheckResponse.data.userType !== 'Corporate') {\r\n                 setToast('This login is for corporate users only. Please use the regular sign-in.')\r\n                 return\r\n             }\r\n \r\n@@ -86,9 +86,9 @@\n             // Login with phone and password (backend expects phone-based auth)\r\n             const loginData = { \r\n                 phone: userPhone, // Use phone from email lookup\r\n                 password,\r\n-                userType: 'corporate' // Specify we're doing corporate login\r\n+                userType: 'Corporate' // Specify we're doing corporate login\r\n             }\r\n             \r\n             const response = await authService.login(loginData, true)\r\n \r\n@@ -98,9 +98,9 @@\n             }\r\n \r\n             // Verify response contains corporate user\r\n             const userData = response.data?.data?.user || response.data?.user\r\n-            if (userData?.userType !== 'corporate') {\r\n+            if (userData?.userType !== 'Corporate') {\r\n                 setToast('This login is for corporate users only')\r\n                 return\r\n             }\r\n \r\n@@ -201,9 +201,9 @@\n                 phone,\r\n                 password,\r\n                 confirmPassword,\r\n                 otp: enteredOtp,\r\n-                userType: 'corporate', // Set as corporate by default (matches database)\r\n+                userType: 'Corporate', // Set as Corporate by default (matches database)\r\n                 companyDetails: {\r\n                     companyName,\r\n                     gstNumber,\r\n                     address: companyAddress\r\n@@ -246,9 +246,9 @@\n                 return\r\n             }\r\n \r\n             // Verify this is a corporate user\r\n-            if (userCheckResponse.data.userType !== 'corporate') {\r\n+            if (userCheckResponse.data.userType !== 'Corporate') {\r\n                 setToast('This reset is for corporate users only')\r\n                 return\r\n             }\r\n \r\n"
                },
                {
                    "date": 1753633460370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,34 +61,13 @@\n             return\r\n         }\r\n \r\n         try {\r\n-            // Check if user exists with this email and get user info\r\n-            const userCheckResponse = await authService.checkUserByEmail(email)\r\n-            \r\n-            if (!userCheckResponse.success || !userCheckResponse.data.exists) {\r\n-                setToast('No corporate account found with this email')\r\n-                return\r\n-            }\r\n-\r\n-            // Verify this is a corporate user\r\n-            if (userCheckResponse.data.userType !== 'Corporate') {\r\n-                setToast('This login is for corporate users only. Please use the regular sign-in.')\r\n-                return\r\n-            }\r\n-\r\n-            // Get phone number from user data for backend authentication\r\n-            const userPhone = userCheckResponse.data.phone\r\n-            if (!userPhone) {\r\n-                setToast('Unable to retrieve account information')\r\n-                return\r\n-            }\r\n-\r\n-            // Login with phone and password (backend expects phone-based auth)\r\n+            // Login directly with email and password for corporate users\r\n             const loginData = { \r\n-                phone: userPhone, // Use phone from email lookup\r\n+                email, // Use email as the primary identifier for corporate users\r\n                 password,\r\n-                userType: 'Corporate' // Specify we're doing corporate login\r\n+                userType: 'Corporate'\r\n             }\r\n             \r\n             const response = await authService.login(loginData, true)\r\n \r\n@@ -155,18 +134,23 @@\n                 setToast('User already exists with this phone number')\r\n                 return\r\n             }\r\n \r\n-            // Send OTP for verification\r\n-            const otpData = { phone, purpose: 'signup' }\r\n+            // Send OTP to email for corporate users\r\n+            const otpData = { \r\n+                email, // Use email instead of phone for corporate\r\n+                purpose: 'signup',\r\n+                userType: 'Corporate'\r\n+            }\r\n             const otpResponse = await authService.sendOTP(otpData, true)\r\n \r\n             if (!otpResponse.success) {\r\n                 setToast(otpResponse.message || 'Failed to send OTP')\r\n                 return\r\n             }\r\n \r\n             setStep('otp')\r\n+            setToast('OTP sent to your email address')\r\n         } catch (error) {\r\n             console.error('Signup error:', error)\r\n             setToast('Something went wrong. Please try again.')\r\n         }\r\n@@ -179,13 +163,14 @@\n             return\r\n         }\r\n \r\n         try {\r\n-            // Verify OTP\r\n+            // Verify OTP using email for corporate users\r\n             const otpData = {\r\n-                phone,\r\n+                email, // Use email instead of phone\r\n                 otp: enteredOtp,\r\n-                purpose: 'signup'\r\n+                purpose: 'signup',\r\n+                userType: 'Corporate'\r\n             }\r\n             \r\n             const response = await authService.verifyOTP(otpData, true)\r\n \r\n@@ -258,10 +243,14 @@\n                 setToast('Unable to retrieve account information')\r\n                 return\r\n             }\r\n             \r\n-            // Send OTP for password reset\r\n-            const otpData = { phone: userPhone, purpose: 'reset' }\r\n+            // Send OTP to email for password reset\r\n+            const otpData = { \r\n+                email,\r\n+                purpose: 'reset',\r\n+                userType: 'Corporate'\r\n+            }\r\n             const otpResponse = await authService.sendOTP(otpData, true)\r\n \r\n             if (!otpResponse.success) {\r\n                 setToast(otpResponse.message || 'Failed to send OTP')\r\n@@ -269,8 +258,9 @@\n             }\r\n \r\n             setStep('resetOtp')\r\n             setPhone(userPhone)\r\n+            setToast('OTP sent to your email address')\r\n         } catch (error) {\r\n             console.error('Forgot password error:', error)\r\n             setToast('Something went wrong. Please try again.')\r\n         }\r\n@@ -288,13 +278,14 @@\n             return\r\n         }\r\n \r\n         try {\r\n-            // Verify OTP first\r\n+            // Verify OTP using email for corporate users\r\n             const otpData = {\r\n-                phone,\r\n+                email, // Use email for corporate password reset\r\n                 otp: enteredOtp,\r\n-                purpose: 'reset'\r\n+                purpose: 'reset',\r\n+                userType: 'Corporate'\r\n             }\r\n             \r\n             const otpResponse = await authService.verifyOTP(otpData, true)\r\n \r\n@@ -304,10 +295,11 @@\n             }\r\n \r\n             // Reset password\r\n             const resetData = {\r\n-                phone,\r\n-                newPassword\r\n+                email, // Use email for corporate users\r\n+                newPassword,\r\n+                userType: 'Corporate'\r\n             }\r\n             \r\n             const resetResponse = await authService.resetPassword(resetData, true)\r\n \r\n@@ -558,10 +550,10 @@\n                                 )}\r\n \r\n                                 {step === 'otp' && (\r\n                                     <div className=\"corporate-auth-box\">\r\n-                                        <h3 className=\"auth-box-title\">Verify Your Phone</h3>\r\n-                                        <p className=\"otp-info\">We've sent a 6-digit OTP to {phone}</p>\r\n+                                        <h3 className=\"auth-box-title\">Verify Your Email</h3>\r\n+                                        <p className=\"otp-info\">We've sent a 6-digit OTP to {email}</p>\r\n                                         <div className=\"otp-inputs\">\r\n                                             {otp.map((value, index) => (\r\n                                                 <input\r\n                                                     key={index}\r\n@@ -581,9 +573,9 @@\n                                             Verify OTP\r\n                                         </button>\r\n                                         <div className=\"otp-resend mt-20\">\r\n                                             <span>Didn't receive OTP? </span>\r\n-                                            <a href=\"#\">Resend</a>\r\n+                                            <a href=\"#\" onClick={handleResendOTP}>Resend</a>\r\n                                         </div>\r\n                                     </div>\r\n                                 )}\r\n \r\n"
                },
                {
                    "date": 1753634367553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,51 +97,84 @@\n \r\n     const handleSignUp = async (e) => {\r\n         e.preventDefault()\r\n         \r\n-\r\n-        if (!name || !email || !phone || !password || !confirmPassword || \r\n-            !companyName || !gstNumber || !companyAddress || !pincode) {\r\n-            setToast('Please fill all required fields')\r\n-            return\r\n+        // Enhanced validation\r\n+        const errors = []\r\n+        \r\n+        if (!name || name.trim().length < 2) {\r\n+            errors.push('Please enter a valid name (at least 2 characters)')\r\n         }\r\n-\r\n+        \r\n+        if (!email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r\n+            errors.push('Please enter a valid email address')\r\n+        }\r\n+        \r\n+        if (!phone || !/^[0-9]{10}$/.test(phone)) {\r\n+            errors.push('Please enter a valid 10-digit phone number')\r\n+        }\r\n+        \r\n+        if (!password || password.length < 6) {\r\n+            errors.push('Password must be at least 6 characters long')\r\n+        }\r\n+        \r\n         if (password !== confirmPassword) {\r\n-            setToast('Passwords do not match')\r\n-            return\r\n+            errors.push('Passwords do not match')\r\n         }\r\n-\r\n-        if (phone.length !== 10) {\r\n-            setToast('Please enter a valid 10-digit phone number')\r\n-            return\r\n+        \r\n+        if (!companyName || companyName.trim().length < 2) {\r\n+            errors.push('Please enter a valid company name')\r\n         }\r\n-\r\n-        if (pincode.length !== 6) {\r\n-            setToast('Please enter a valid 6-digit pincode')\r\n+        \r\n+        if (!gstNumber || gstNumber.trim().length < 5) {\r\n+            errors.push('Please enter a valid GST number')\r\n+        }\r\n+        \r\n+        if (!companyAddress || companyAddress.trim().length < 5) {\r\n+            errors.push('Please enter a valid company address')\r\n+        }\r\n+        \r\n+        if (!pincode || !/^[0-9]{6}$/.test(pincode)) {\r\n+            errors.push('Please enter a valid 6-digit pincode')\r\n+        }\r\n+        \r\n+        if (errors.length > 0) {\r\n+            setToast(errors[0]) // Show first error\r\n             return\r\n         }\r\n \r\n         try {\r\n-            // Check if user exists by email (primary check for corporate users)\r\n-            const emailCheckResponse = await authService.checkUserByEmail(email)\r\n-            if (emailCheckResponse.success && emailCheckResponse.data.exists) {\r\n-                setToast('User already exists with this email')\r\n+            // Check if user already exists before sending OTP\r\n+            const emailCheck = await authService.checkUserByEmail(email)\r\n+            if (emailCheck.data && emailCheck.data.exists) {\r\n+                setToast('An account already exists with this email')\r\n                 return\r\n             }\r\n \r\n-            // Also check if user exists by phone (secondary check)\r\n-            const phoneCheckResponse = await authService.checkUserByPhone(phone)\r\n-            if (phoneCheckResponse.success && phoneCheckResponse.data.exists) {\r\n-                setToast('User already exists with this phone number')\r\n-                return\r\n-            }\r\n-\r\n             // Send OTP to email for corporate users\r\n-            const otpData = { \r\n-                email, // Use email instead of phone for corporate\r\n+            const otpData = {\r\n+                email,\r\n+                phone, // Include phone for complete registration later\r\n                 purpose: 'signup',\r\n                 userType: 'Corporate'\r\n             }\r\n+            \r\n+            const response = await authService.sendOTP(otpData)\r\n+            \r\n+            if (response.success) {\r\n+                setStep('otp')\r\n+                setToast('OTP sent to your email address')\r\n+            } else {\r\n+                setToast(response.message || 'Failed to send OTP')\r\n+            }\r\n+        } catch (error) {\r\n+            console.error('Send OTP error:', error)\r\n+            setToast(error.response?.data?.message || 'Failed to send OTP. Please try again.')\r\n+        }\r\n+    }\r\n+                purpose: 'signup',\r\n+                userType: 'Corporate'\r\n+            }\r\n             const otpResponse = await authService.sendOTP(otpData, true)\r\n \r\n             if (!otpResponse.success) {\r\n                 setToast(otpResponse.message || 'Failed to send OTP')\r\n@@ -156,67 +189,113 @@\n         }\r\n     }\r\n \r\n     const handleOtpVerification = async () => {\r\n-        const enteredOtp = otp.join('')\r\n-        if (enteredOtp.length !== 6) {\r\n+        if (otp.some(digit => !digit)) {\r\n             setToast('Please enter complete OTP')\r\n             return\r\n         }\r\n \r\n+        const enteredOtp = otp.join('')\r\n+\r\n         try {\r\n-            // Verify OTP using email for corporate users\r\n+            // First verify OTP\r\n             const otpData = {\r\n-                email, // Use email instead of phone\r\n+                email,\r\n                 otp: enteredOtp,\r\n                 purpose: 'signup',\r\n                 userType: 'Corporate'\r\n             }\r\n             \r\n-            const response = await authService.verifyOTP(otpData, true)\r\n+            const otpResponse = await authService.verifyOTP(otpData)\r\n \r\n-            if (!response.success) {\r\n-                setToast(response.message || 'Invalid OTP')\r\n+            if (!otpResponse.success) {\r\n+                setToast(otpResponse.message || 'Invalid OTP')\r\n+                setOtp(new Array(6).fill('')) // Clear OTP fields\r\n                 return\r\n             }\r\n \r\n-            // Register user as Corporate\r\n+            // If OTP is valid, proceed with registration\r\n             const registrationData = {\r\n-                name,\r\n-                email,\r\n-                phone,\r\n+                name: name.trim(),\r\n+                email: email.toLowerCase().trim(),\r\n+                phone: phone.trim(),\r\n                 password,\r\n                 confirmPassword,\r\n                 otp: enteredOtp,\r\n-                userType: 'Corporate', // Set as Corporate by default (matches database)\r\n+                userType: 'Corporate',\r\n                 companyDetails: {\r\n-                    companyName,\r\n-                    gstNumber,\r\n-                    address: companyAddress\r\n+                    companyName: companyName.trim(),\r\n+                    gstNumber: gstNumber.trim().toUpperCase(),\r\n+                    address: companyAddress.trim()\r\n                 },\r\n                 role: 'user',\r\n-                gender: 'others', // Default for corporate\r\n-                dob: new Date().toISOString().split('T')[0], // Default current date\r\n-                pincode: pincode // Use actual pincode\r\n+                gender: 'others',\r\n+                dob: new Date().toISOString().split('T')[0],\r\n+                pincode: pincode.trim()\r\n             }\r\n \r\n-            const signupResponse = await authService.signup(registrationData, true)\r\n+            const signupResponse = await authService.signup(registrationData)\r\n \r\n             if (!signupResponse.success) {\r\n                 setToast(signupResponse.message || 'Registration failed')\r\n                 return\r\n             }\r\n \r\n-            setToast('Registration successful! Please login.')\r\n-            setStep('login')\r\n-            setIsSignUp(false)\r\n+            setToast('Registration successful! Please check your email for verification.')\r\n             \r\n+            // Clear all form fields and redirect to login after delay\r\n+            setTimeout(() => {\r\n+                setStep('login')\r\n+                setIsSignUp(false)\r\n+                // Clear all fields\r\n+                setName('')\r\n+                setEmail('')\r\n+                setPhone('')\r\n+                setPassword('')\r\n+                setConfirmPassword('')\r\n+                setCompanyName('')\r\n+                setGstNumber('')\r\n+                setCompanyAddress('')\r\n+                setPincode('')\r\n+                setOtp(new Array(6).fill(''))\r\n+            }, 3000)\r\n+            \r\n         } catch (error) {\r\n-            console.error('OTP verification error:', error)\r\n-            setToast(error.message || 'Verification failed. Please try again.')\r\n+            console.error('Registration error:', error)\r\n+            setToast(error.response?.data?.message || 'Registration failed. Please try again.')\r\n         }\r\n     }\r\n \r\n+    const handleResendOTP = async (e) => {\r\n+        e.preventDefault()\r\n+        \r\n+        try {\r\n+            // Determine the purpose based on current step\r\n+            const purpose = step === 'resetOtp' ? 'reset' : 'signup'\r\n+            \r\n+            // Send OTP to email for corporate users\r\n+            const otpData = {\r\n+                email,\r\n+                purpose,\r\n+                userType: 'Corporate'\r\n+            }\r\n+            \r\n+            const response = await authService.sendOTP(otpData)\r\n+            \r\n+            if (response.success) {\r\n+                setToast('OTP resent to your email address')\r\n+                // Reset OTP input fields\r\n+                setOtp(new Array(6).fill(''))\r\n+            } else {\r\n+                setToast(response.message || 'Failed to resend OTP')\r\n+            }\r\n+        } catch (error) {\r\n+            console.error('Resend OTP error:', error)\r\n+            setToast('Failed to resend OTP. Please try again.')\r\n+        }\r\n+    }\r\n+\r\n     const handleForgotPassword = async () => {\r\n         if (!email) {\r\n             setToast('Please enter your email address')\r\n             return\r\n"
                },
                {
                    "date": 1753634678401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,26 +170,9 @@\n             console.error('Send OTP error:', error)\r\n             setToast(error.response?.data?.message || 'Failed to send OTP. Please try again.')\r\n         }\r\n     }\r\n-                purpose: 'signup',\r\n-                userType: 'Corporate'\r\n-            }\r\n-            const otpResponse = await authService.sendOTP(otpData, true)\r\n \r\n-            if (!otpResponse.success) {\r\n-                setToast(otpResponse.message || 'Failed to send OTP')\r\n-                return\r\n-            }\r\n-\r\n-            setStep('otp')\r\n-            setToast('OTP sent to your email address')\r\n-        } catch (error) {\r\n-            console.error('Signup error:', error)\r\n-            setToast('Something went wrong. Please try again.')\r\n-        }\r\n-    }\r\n-\r\n     const handleOtpVerification = async () => {\r\n         if (otp.some(digit => !digit)) {\r\n             setToast('Please enter complete OTP')\r\n             return\r\n"
                },
                {
                    "date": 1753635797562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,38 +61,71 @@\n             return\r\n         }\r\n \r\n         try {\r\n-            // Login directly with email and password for corporate users\r\n+            console.log('🚀 [Frontend] Corporate login attempt for:', email)\r\n+            \r\n+            // Login data specifically for corporate users\r\n             const loginData = { \r\n-                email, // Use email as the primary identifier for corporate users\r\n+                email: email.toLowerCase().trim(), // Ensure email is properly formatted\r\n                 password,\r\n-                userType: 'Corporate'\r\n+                userType: 'Corporate' // Explicitly set userType for backend query\r\n             }\r\n             \r\n+            console.log('📤 [Frontend] Sending login data:', { email: loginData.email, userType: loginData.userType })\r\n+            \r\n             const response = await authService.login(loginData, true)\r\n+            \r\n+            console.log('📥 [Frontend] Login response:', response)\r\n \r\n             if (!response.success) {\r\n+                console.error('❌ [Frontend] Login failed:', response.message)\r\n                 setToast(response.message || 'Login failed')\r\n                 return\r\n             }\r\n \r\n-            // Verify response contains corporate user\r\n-            const userData = response.data?.data?.user || response.data?.user\r\n-            if (userData?.userType !== 'Corporate') {\r\n+            // Extract user data from response (handle both encrypted and unencrypted responses)\r\n+            const userData = response.data?.data?.user || response.data?.user || response.user\r\n+            \r\n+            if (!userData) {\r\n+                console.error('❌ [Frontend] No user data in response')\r\n+                setToast('Invalid response from server')\r\n+                return\r\n+            }\r\n+            \r\n+            console.log('👤 [Frontend] User data received:', { \r\n+                name: userData.name, \r\n+                email: userData.email, \r\n+                userType: userData.userType \r\n+            })\r\n+            \r\n+            // Verify this is a corporate user\r\n+            if (userData.userType !== 'Corporate') {\r\n+                console.error('❌ [Frontend] User is not corporate type:', userData.userType)\r\n                 setToast('This login is for corporate users only')\r\n                 return\r\n             }\r\n \r\n+            // Update auth context if login function is available\r\n+            if (login && typeof login === 'function') {\r\n+                console.log('📝 [Frontend] Updating auth context...')\r\n+                await login(userData, response.data?.data?.token || response.data?.token || response.token)\r\n+            }\r\n+\r\n             // Success - redirect to corporate home\r\n+            console.log('✅ [Frontend] Corporate login successful')\r\n             setToast('Login successful!')\r\n             setTimeout(() => {\r\n                 router.push('/CorporateHome')\r\n             }, 1000)\r\n             \r\n         } catch (error) {\r\n-            console.error('Login error:', error)\r\n-            setToast(error.message || 'Login failed. Please try again.')\r\n+            console.error('❌ [Frontend] Login error:', error)\r\n+            const errorMessage = error.response?.data?.message || \r\n+                                error.response?.data?.error || \r\n+                                error.message || \r\n+                                'Login failed. Please try again.'\r\n+            setToast(errorMessage)\r\n         }\r\n     }\r\n \r\n     const handleSignUp = async (e) => {\r\n"
                },
                {
                    "date": 1753636887743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,11 +65,11 @@\n             console.log('🚀 [Frontend] Corporate login attempt for:', email)\r\n             \r\n             // Login data specifically for corporate users\r\n             const loginData = { \r\n-                email: email.toLowerCase().trim(), // Ensure email is properly formatted\r\n+                email: email.toLowerCase().trim(),\r\n                 password,\r\n-                userType: 'Corporate' // Explicitly set userType for backend query\r\n+                userType: 'Corporate'\r\n             }\r\n             \r\n             console.log('📤 [Frontend] Sending login data:', { email: loginData.email, userType: loginData.userType })\r\n             \r\n@@ -82,17 +82,31 @@\n                 setToast(response.message || 'Login failed')\r\n                 return\r\n             }\r\n \r\n-            // Extract user data from response (handle both encrypted and unencrypted responses)\r\n+            // Extract user data and token from response\r\n             const userData = response.data?.data?.user || response.data?.user || response.user\r\n+            const token = response.data?.data?.token || response.data?.token || response.token\r\n             \r\n+            console.log('🔍 [Frontend] Extracted data:', {\r\n+                hasUserData: !!userData,\r\n+                hasToken: !!token,\r\n+                userType: userData?.userType,\r\n+                tokenLength: token?.length\r\n+            })\r\n+            \r\n             if (!userData) {\r\n                 console.error('❌ [Frontend] No user data in response')\r\n                 setToast('Invalid response from server')\r\n                 return\r\n             }\r\n             \r\n+            if (!token) {\r\n+                console.error('❌ [Frontend] No token in response')\r\n+                setToast('Authentication token missing')\r\n+                return\r\n+            }\r\n+            \r\n             console.log('👤 [Frontend] User data received:', { \r\n                 name: userData.name, \r\n                 email: userData.email, \r\n                 userType: userData.userType \r\n@@ -104,20 +118,34 @@\n                 setToast('This login is for corporate users only')\r\n                 return\r\n             }\r\n \r\n-            // Update auth context if login function is available\r\n+            // Update auth context with user data and token\r\n             if (login && typeof login === 'function') {\r\n                 console.log('📝 [Frontend] Updating auth context...')\r\n-                await login(userData, response.data?.data?.token || response.data?.token || response.token)\r\n+                const contextResult = await login(userData, token)\r\n+                \r\n+                if (!contextResult.success) {\r\n+                    console.error('❌ [Frontend] Failed to update auth context:', contextResult.message)\r\n+                    setToast('Authentication failed')\r\n+                    return\r\n+                }\r\n+                console.log('✅ [Frontend] Auth context updated successfully')\r\n             }\r\n \r\n-            // Success - redirect to corporate home\r\n+            // Success message and form reset\r\n             console.log('✅ [Frontend] Corporate login successful')\r\n-            setToast('Login successful!')\r\n+            setToast('Login successful! Redirecting...')\r\n+            \r\n+            // Clear form fields\r\n+            setEmail('')\r\n+            setPassword('')\r\n+            \r\n+            // Redirect after a short delay\r\n             setTimeout(() => {\r\n+                console.log('🔄 [Frontend] Redirecting to CorporateHome...')\r\n                 router.push('/CorporateHome')\r\n-            }, 1000)\r\n+            }, 1500)\r\n             \r\n         } catch (error) {\r\n             console.error('❌ [Frontend] Login error:', error)\r\n             const errorMessage = error.response?.data?.message || \r\n"
                },
                {
                    "date": 1753637752579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,9 +463,8 @@\n                                                 <label>Corporate Email</label>\r\n                                                 <input\r\n                                                     type=\"email\"\r\n                                                     className=\"corporate-input\"\r\n-                                                    placeholder=\"your@company.com\"\r\n                                                     value={email}\r\n                                                     onChange={(e) => setEmail(e.target.value)}\r\n                                                     required\r\n                                                 />\r\n@@ -474,9 +473,8 @@\n                                                 <label>Password</label>\r\n                                                 <input\r\n                                                     type=\"password\"\r\n                                                     className=\"corporate-input\"\r\n-                                                    placeholder=\"Enter your password\"\r\n                                                     value={password}\r\n                                                     onChange={(e) => setPassword(e.target.value)}\r\n                                                     required\r\n                                                 />\r\n@@ -527,9 +525,9 @@\n                                                         <label>Full Name *</label>\r\n                                                         <input\r\n                                                             type=\"text\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"John Doe\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={name}\r\n                                                             onChange={(e) => setName(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -540,9 +538,9 @@\n                                                         <label>Corporate Email *</label>\r\n                                                         <input\r\n                                                             type=\"email\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"your@company.com\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={email}\r\n                                                             onChange={(e) => setEmail(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -553,9 +551,9 @@\n                                                         <label>Phone Number *</label>\r\n                                                         <input\r\n                                                             type=\"tel\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"10-digit mobile number\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={phone}\r\n                                                             onChange={(e) => setPhone(e.target.value)}\r\n                                                             maxLength=\"10\"\r\n                                                             required\r\n@@ -567,9 +565,9 @@\n                                                         <label>Company Name *</label>\r\n                                                         <input\r\n                                                             type=\"text\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"Your Company Ltd.\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={companyName}\r\n                                                             onChange={(e) => setCompanyName(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -580,9 +578,9 @@\n                                                         <label>GST Number *</label>\r\n                                                         <input\r\n                                                             type=\"text\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"GST123456789\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={gstNumber}\r\n                                                             onChange={(e) => setGstNumber(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -593,9 +591,9 @@\n                                                         <label>Company Address *</label>\r\n                                                         <input\r\n                                                             type=\"text\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"123 Business Park\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={companyAddress}\r\n                                                             onChange={(e) => setCompanyAddress(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -606,9 +604,9 @@\n                                                         <label>Pincode *</label>\r\n                                                         <input\r\n                                                             type=\"text\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"123456\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={pincode}\r\n                                                             onChange={(e) => setPincode(e.target.value)}\r\n                                                             maxLength=\"6\"\r\n                                                             required\r\n@@ -620,9 +618,9 @@\n                                                         <label>Password *</label>\r\n                                                         <input\r\n                                                             type=\"password\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"Create password\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={password}\r\n                                                             onChange={(e) => setPassword(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -633,9 +631,9 @@\n                                                         <label>Confirm Password *</label>\r\n                                                         <input\r\n                                                             type=\"password\"\r\n                                                             className=\"corporate-input\"\r\n-                                                            placeholder=\"Confirm password\"\r\n+                                                            placeholder=\"\"\r\n                                                             value={confirmPassword}\r\n                                                             onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                                             required\r\n                                                         />\r\n@@ -694,8 +692,17 @@\n                                             onClick={handleOtpVerification}\r\n                                         >\r\n                                             Verify OTP\r\n                                         </button>\r\n+                                        <button \r\n+                                            className=\"corporate-btn-secondary mt-10\"\r\n+                                            onClick={() => {\r\n+                                                setStep('login')\r\n+                                                setOtp(new Array(6).fill(''))\r\n+                                            }}\r\n+                                        >\r\n+                                            Back to Form\r\n+                                        </button>\r\n                                         <div className=\"otp-resend mt-20\">\r\n                                             <span>Didn't receive OTP? </span>\r\n                                             <a href=\"#\" onClick={handleResendOTP}>Resend</a>\r\n                                         </div>\r\n@@ -710,9 +717,8 @@\n                                             <label>Corporate Email</label>\r\n                                             <input\r\n                                                 type=\"email\"\r\n                                                 className=\"corporate-input\"\r\n-                                                placeholder=\"your@company.com\"\r\n                                                 value={email}\r\n                                                 onChange={(e) => setEmail(e.target.value)}\r\n                                             />\r\n                                         </div>\r\n@@ -732,8 +738,16 @@\n                                 )}\r\n \r\n                                 {step === 'resetOtp' && (\r\n                                     <div className=\"corporate-auth-box\">\r\n+                                        <div className=\"back-button-container\">\r\n+                                            <button \r\n+                                                className=\"back-btn\"\r\n+                                                onClick={() => setStep('forgotPassword')}\r\n+                                            >\r\n+                                                ← Back\r\n+                                            </button>\r\n+                                        </div>\r\n                                         <h3 className=\"auth-box-title\">Enter OTP & New Password</h3>\r\n                                         <p className=\"otp-info\">OTP sent to phone ending with {phone.slice(-4)}</p>\r\n                                         <div className=\"otp-inputs\">\r\n                                             {otp.map((value, index) => (\r\n@@ -752,9 +766,8 @@\n                                             <label>New Password</label>\r\n                                             <input\r\n                                                 type=\"password\"\r\n                                                 className=\"corporate-input\"\r\n-                                                placeholder=\"Enter new password\"\r\n                                                 value={newPassword}\r\n                                                 onChange={(e) => setNewPassword(e.target.value)}\r\n                                             />\r\n                                         </div>\r\n@@ -762,9 +775,8 @@\n                                             <label>Confirm New Password</label>\r\n                                             <input\r\n                                                 type=\"password\"\r\n                                                 className=\"corporate-input\"\r\n-                                                placeholder=\"Confirm new password\"\r\n                                                 value={confirmPassword}\r\n                                                 onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                             />\r\n                                         </div>\r\n"
                },
                {
                    "date": 1753720005640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,17 @@\n     const { login, user } = useContext(AuthContext)\r\n     \r\n     // Redirect if already logged in as corporate user\r\n     useEffect(() => {\r\n-        if (user && user.userType === 'Corporate') {\r\n-            router.push('/CorporateHome')\r\n-        }\r\n+        // Add a small delay to avoid race conditions with CorporateRouteManager\r\n+        const timer = setTimeout(() => {\r\n+            if (user && user.userType === 'Corporate') {\r\n+                console.log('🔄 [Corporate Sign-in] Redirecting authenticated user to CorporateHome')\r\n+                router.push('/CorporateHome')\r\n+            }\r\n+        }, 100)\r\n+        \r\n+        return () => clearTimeout(timer)\r\n     }, [user, router])\r\n \r\n     const [isSignUp, setIsSignUp] = useState(false)\r\n     const [step, setStep] = useState('login') // login, signup, otp, forgotPassword, resetPassword\r\n"
                }
            ],
            "date": 1753614088378,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { useState, useEffect, useContext } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport Layout from \"@/components/layout/Layout\"\r\nimport Link from \"next/link\"\r\nimport AuthContext from '@/components/context/AuthContext'\r\nimport authService from '@/util/authService'\r\n\r\nexport default function CorporateSignIn() {\r\n    const router = useRouter()\r\n    const { login, user } = useContext(AuthContext)\r\n    \r\n    // Redirect if already logged in as corporate user\r\n    useEffect(() => {\r\n        if (user && user.userType === 'Corporate') {\r\n            router.push('/CorporateHome')\r\n        }\r\n    }, [user, router])\r\n\r\n    const [isSignUp, setIsSignUp] = useState(false)\r\n    const [step, setStep] = useState('login') // login, signup, otp, forgotPassword, resetPassword\r\n    const [toast, setToast] = useState('')\r\n    \r\n    // Form fields\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [companyName, setCompanyName] = useState('')\r\n    const [gstNumber, setGstNumber] = useState('')\r\n    const [companyAddress, setCompanyAddress] = useState('')\r\n    const [otp, setOtp] = useState(new Array(6).fill(''))\r\n    const [newPassword, setNewPassword] = useState('')\r\n\r\n    // Toast handler\r\n    useEffect(() => {\r\n        if (toast) {\r\n            const timer = setTimeout(() => setToast(''), 3000)\r\n            return () => clearTimeout(timer)\r\n        }\r\n    }, [toast])\r\n\r\n    const handleOtpChange = (value, index) => {\r\n        if (!/^\\d*$/.test(value)) return\r\n        const updatedOtp = [...otp]\r\n        updatedOtp[index] = value\r\n        setOtp(updatedOtp)\r\n        if (value && index < 5) {\r\n            const nextInput = document.getElementById(`otp-${index + 1}`)\r\n            nextInput?.focus()\r\n        }\r\n    }\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!email || !password) {\r\n            setToast('Please fill all fields')\r\n            return\r\n        }\r\n\r\n        try {\r\n            // Check if user exists with this email and get user info\r\n            const userCheckResponse = await authService.checkUserByEmail(email)\r\n            \r\n            if (!userCheckResponse.success || !userCheckResponse.data.exists) {\r\n                setToast('No corporate account found with this email')\r\n                return\r\n            }\r\n\r\n            // Verify this is a corporate user\r\n            if (userCheckResponse.data.userType !== 'Corporate') {\r\n                setToast('This login is for corporate users only. Please use the regular sign-in.')\r\n                return\r\n            }\r\n\r\n            // Login with email and password (backend will handle email-to-phone mapping)\r\n            const loginData = { \r\n                email, \r\n                password,\r\n                userType: 'Corporate' // Specify we're doing corporate login\r\n            }\r\n            \r\n            const response = await authService.login(loginData, true)\r\n\r\n            if (!response.success) {\r\n                setToast(response.message || 'Login failed')\r\n                return\r\n            }\r\n\r\n            // Verify response contains corporate user\r\n            const userData = response.data?.data?.user || response.data?.user\r\n            if (userData?.userType !== 'Corporate') {\r\n                setToast('This login is for corporate users only')\r\n                return\r\n            }\r\n\r\n            // Success - redirect to corporate home\r\n            setToast('Login successful!')\r\n            setTimeout(() => {\r\n                router.push('/CorporateHome')\r\n            }, 1000)\r\n            \r\n        } catch (error) {\r\n            console.error('Login error:', error)\r\n            setToast(error.message || 'Login failed. Please try again.')\r\n        }\r\n    }\r\n\r\n    const handleSignUp = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!name || !email || !phone || !password || !confirmPassword || \r\n            !companyName || !gstNumber || !companyAddress) {\r\n            setToast('Please fill all required fields')\r\n            return\r\n        }\r\n\r\n        if (password !== confirmPassword) {\r\n            setToast('Passwords do not match')\r\n            return\r\n        }\r\n\r\n        if (phone.length !== 10) {\r\n            setToast('Please enter a valid 10-digit phone number')\r\n            return\r\n        }\r\n\r\n        try {\r\n            // Check if user exists by phone\r\n            const phoneCheckResponse = await authService.checkUserByPhone(phone)\r\n            if (phoneCheckResponse.success && phoneCheckResponse.data.exists) {\r\n                setToast('User already exists with this phone number')\r\n                return\r\n            }\r\n\r\n            // Check if user exists by email\r\n            const emailCheckResponse = await authService.checkUserByEmail(email)\r\n            if (emailCheckResponse.success && emailCheckResponse.data.exists) {\r\n                setToast('User already exists with this email')\r\n                return\r\n            }\r\n\r\n            // Send OTP for verification\r\n            const otpData = { phone, purpose: 'signup' }\r\n            const otpResponse = await authService.sendOTP(otpData, true)\r\n\r\n            if (!otpResponse.success) {\r\n                setToast(otpResponse.message || 'Failed to send OTP')\r\n                return\r\n            }\r\n\r\n            setStep('otp')\r\n        } catch (error) {\r\n            console.error('Signup error:', error)\r\n            setToast('Something went wrong. Please try again.')\r\n        }\r\n    }\r\n\r\n    const handleOtpVerification = async () => {\r\n        const enteredOtp = otp.join('')\r\n        if (enteredOtp.length !== 6) {\r\n            setToast('Please enter complete OTP')\r\n            return\r\n        }\r\n\r\n        try {\r\n            // Verify OTP\r\n            const otpData = {\r\n                phone,\r\n                otp: enteredOtp,\r\n                purpose: 'signup'\r\n            }\r\n            \r\n            const response = await authService.verifyOTP(otpData, true)\r\n\r\n            if (!response.success) {\r\n                setToast(response.message || 'Invalid OTP')\r\n                return\r\n            }\r\n\r\n            // Register user as Corporate\r\n            const registrationData = {\r\n                name,\r\n                email,\r\n                phone,\r\n                password,\r\n                confirmPassword,\r\n                otp: enteredOtp,\r\n                userType: 'Corporate', // Set as Corporate by default\r\n                companyDetails: {\r\n                    companyName,\r\n                    gstNumber,\r\n                    address: companyAddress\r\n                },\r\n                role: 'user',\r\n                gender: 'other', // Default for corporate\r\n                dob: new Date().toISOString().split('T')[0], // Default current date\r\n                pincode: '000000' // Default pincode\r\n            }\r\n\r\n            const signupResponse = await authService.signup(registrationData, true)\r\n\r\n            if (!signupResponse.success) {\r\n                setToast(signupResponse.message || 'Registration failed')\r\n                return\r\n            }\r\n\r\n            setToast('Registration successful! Please login.')\r\n            setStep('login')\r\n            setIsSignUp(false)\r\n            \r\n        } catch (error) {\r\n            console.error('OTP verification error:', error)\r\n            setToast(error.message || 'Verification failed. Please try again.')\r\n        }\r\n    }\r\n\r\n    const handleForgotPassword = async () => {\r\n        if (!email) {\r\n            setToast('Please enter your email address')\r\n            return\r\n        }\r\n\r\n        try {\r\n            // Check if user exists with this email\r\n            const userCheckResponse = await authService.checkUserByEmail(email)\r\n            \r\n            if (!userCheckResponse.success || !userCheckResponse.data.exists) {\r\n                setToast('No account found with this email')\r\n                return\r\n            }\r\n\r\n            // Verify this is a corporate user\r\n            if (userCheckResponse.data.userType !== 'Corporate') {\r\n                setToast('This reset is for corporate users only')\r\n                return\r\n            }\r\n\r\n            // Get phone from response\r\n            const userPhone = userCheckResponse.data.phone\r\n            if (!userPhone) {\r\n                setToast('Unable to retrieve account information')\r\n                return\r\n            }\r\n            \r\n            // Send OTP for password reset\r\n            const otpData = { phone: userPhone, purpose: 'reset' }\r\n            const otpResponse = await authService.sendOTP(otpData, true)\r\n\r\n            if (!otpResponse.success) {\r\n                setToast(otpResponse.message || 'Failed to send OTP')\r\n                return\r\n            }\r\n\r\n            setStep('resetOtp')\r\n            setPhone(userPhone)\r\n        } catch (error) {\r\n            console.error('Forgot password error:', error)\r\n            setToast('Something went wrong. Please try again.')\r\n        }\r\n    }\r\n\r\n    const handlePasswordReset = async () => {\r\n        const enteredOtp = otp.join('')\r\n        if (enteredOtp.length !== 6 || !newPassword || !confirmPassword) {\r\n            setToast('Please fill all fields')\r\n            return\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            setToast('Passwords do not match')\r\n            return\r\n        }\r\n\r\n        try {\r\n            // Verify OTP first\r\n            const otpData = {\r\n                phone,\r\n                otp: enteredOtp,\r\n                purpose: 'reset'\r\n            }\r\n            \r\n            const otpResponse = await authService.verifyOTP(otpData, true)\r\n\r\n            if (!otpResponse.success) {\r\n                setToast('Invalid OTP')\r\n                return\r\n            }\r\n\r\n            // Reset password\r\n            const resetData = {\r\n                phone,\r\n                newPassword\r\n            }\r\n            \r\n            const resetResponse = await authService.resetPassword(resetData, true)\r\n\r\n            if (!resetResponse.success) {\r\n                setToast(resetResponse.message || 'Password reset failed')\r\n                return\r\n            }\r\n\r\n            setToast('Password reset successful! Please login.')\r\n            setStep('login')\r\n            setOtp(new Array(6).fill(''))\r\n            setNewPassword('')\r\n            setConfirmPassword('')\r\n            \r\n        } catch (error) {\r\n            console.error('Password reset error:', error)\r\n            setToast(error.message || 'Reset failed. Please try again.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Layout headerStyle={1} footerStyle={1} breadcrumbTitle=\"Corporate Portal\">\r\n            <section className=\"corporate-auth-area pt-80 pb-80\">\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-8\">\r\n                            <div className=\"corporate-auth-wrapper\">\r\n                                <div className=\"corporate-auth-header text-center mb-40\">\r\n                                    <h2 className=\"corporate-title\">Corporate Portal</h2>\r\n                                    <p className=\"corporate-subtitle\">Access exclusive benefits for business partners</p>\r\n                                </div>\r\n\r\n                                {step === 'login' && !isSignUp && (\r\n                                    <div className=\"corporate-auth-box\">\r\n                                        <h3 className=\"auth-box-title\">Corporate Sign In</h3>\r\n                                        <form onSubmit={handleLogin}>\r\n                                            <div className=\"corporate-form-group\">\r\n                                                <label>Corporate Email</label>\r\n                                                <input\r\n                                                    type=\"email\"\r\n                                                    className=\"corporate-input\"\r\n                                                    placeholder=\"your@company.com\"\r\n                                                    value={email}\r\n                                                    onChange={(e) => setEmail(e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"corporate-form-group\">\r\n                                                <label>Password</label>\r\n                                                <input\r\n                                                    type=\"password\"\r\n                                                    className=\"corporate-input\"\r\n                                                    placeholder=\"Enter your password\"\r\n                                                    value={password}\r\n                                                    onChange={(e) => setPassword(e.target.value)}\r\n                                                    required\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"corporate-form-actions\">\r\n                                                <button type=\"submit\" className=\"corporate-btn-primary\">\r\n                                                    Sign In <i className=\"fal fa-long-arrow-right\" />\r\n                                                </button>\r\n                                                <div className=\"corporate-links\">\r\n                                                    <a href=\"#\" onClick={(e) => {\r\n                                                        e.preventDefault()\r\n                                                        setStep('forgotPassword')\r\n                                                    }}>Forgot Password?</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        </form>\r\n                                        <div className=\"corporate-divider\">\r\n                                            <span>New to Corporate Portal?</span>\r\n                                        </div>\r\n                                        <button \r\n                                            className=\"corporate-btn-secondary\"\r\n                                            onClick={() => setIsSignUp(true)}\r\n                                        >\r\n                                            Create Corporate Account\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n\r\n                                {isSignUp && step === 'login' && (\r\n                                    <div className=\"corporate-auth-box\">\r\n                                        <h3 className=\"auth-box-title\">Create Corporate Account</h3>\r\n                                        <form onSubmit={handleSignUp}>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Full Name *</label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"John Doe\"\r\n                                                            value={name}\r\n                                                            onChange={(e) => setName(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Corporate Email *</label>\r\n                                                        <input\r\n                                                            type=\"email\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"your@company.com\"\r\n                                                            value={email}\r\n                                                            onChange={(e) => setEmail(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Phone Number *</label>\r\n                                                        <input\r\n                                                            type=\"tel\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"10-digit mobile number\"\r\n                                                            value={phone}\r\n                                                            onChange={(e) => setPhone(e.target.value)}\r\n                                                            maxLength=\"10\"\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Company Name *</label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"Your Company Ltd.\"\r\n                                                            value={companyName}\r\n                                                            onChange={(e) => setCompanyName(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>GST Number *</label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"GST123456789\"\r\n                                                            value={gstNumber}\r\n                                                            onChange={(e) => setGstNumber(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Company Address *</label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"123 Business Park\"\r\n                                                            value={companyAddress}\r\n                                                            onChange={(e) => setCompanyAddress(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Password *</label>\r\n                                                        <input\r\n                                                            type=\"password\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"Create password\"\r\n                                                            value={password}\r\n                                                            onChange={(e) => setPassword(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-md-6\">\r\n                                                    <div className=\"corporate-form-group\">\r\n                                                        <label>Confirm Password *</label>\r\n                                                        <input\r\n                                                            type=\"password\"\r\n                                                            className=\"corporate-input\"\r\n                                                            placeholder=\"Confirm password\"\r\n                                                            value={confirmPassword}\r\n                                                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                                            required\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"corporate-form-actions\">\r\n                                                <button type=\"submit\" className=\"corporate-btn-primary\">\r\n                                                    Create Account <i className=\"fal fa-long-arrow-right\" />\r\n                                                </button>\r\n                                            </div>\r\n                                        </form>\r\n                                        <div className=\"corporate-divider\">\r\n                                            <span>Already have an account?</span>\r\n                                        </div>\r\n                                        <button \r\n                                            className=\"corporate-btn-secondary\"\r\n                                            onClick={() => setIsSignUp(false)}\r\n                                        >\r\n                                            Back to Sign In\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n\r\n                                {step === 'otp' && (\r\n                                    <div className=\"corporate-auth-box\">\r\n                                        <h3 className=\"auth-box-title\">Verify Your Phone</h3>\r\n                                        <p className=\"otp-info\">We've sent a 6-digit OTP to {phone}</p>\r\n                                        <div className=\"otp-inputs\">\r\n                                            {otp.map((value, index) => (\r\n                                                <input\r\n                                                    key={index}\r\n                                                    id={`otp-${index}`}\r\n                                                    type=\"text\"\r\n                                                    maxLength=\"1\"\r\n                                                    className=\"otp-input\"\r\n                                                    value={value}\r\n                                                    onChange={(e) => handleOtpChange(e.target.value, index)}\r\n                                                />\r\n                                            ))}\r\n                                        </div>\r\n                                        <button \r\n                                            className=\"corporate-btn-primary mt-20\"\r\n                                            onClick={handleOtpVerification}\r\n                                        >\r\n                                            Verify OTP\r\n                                        </button>\r\n                                        <div className=\"otp-resend mt-20\">\r\n                                            <span>Didn't receive OTP? </span>\r\n                                            <a href=\"#\">Resend</a>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n\r\n                                {step === 'forgotPassword' && (\r\n                                    <div className=\"corporate-auth-box\">\r\n                                        <h3 className=\"auth-box-title\">Reset Password</h3>\r\n                                        <p className=\"reset-info\">Enter your registered email to reset password</p>\r\n                                        <div className=\"corporate-form-group\">\r\n                                            <label>Corporate Email</label>\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                className=\"corporate-input\"\r\n                                                placeholder=\"your@company.com\"\r\n                                                value={email}\r\n                                                onChange={(e) => setEmail(e.target.value)}\r\n                                            />\r\n                                        </div>\r\n                                        <button \r\n                                            className=\"corporate-btn-primary\"\r\n                                            onClick={handleForgotPassword}\r\n                                        >\r\n                                            Send OTP\r\n                                        </button>\r\n                                        <button \r\n                                            className=\"corporate-btn-secondary mt-10\"\r\n                                            onClick={() => setStep('login')}\r\n                                        >\r\n                                            Back to Sign In\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n\r\n                                {step === 'resetOtp' && (\r\n                                    <div className=\"corporate-auth-box\">\r\n                                        <h3 className=\"auth-box-title\">Enter OTP & New Password</h3>\r\n                                        <p className=\"otp-info\">OTP sent to phone ending with {phone.slice(-4)}</p>\r\n                                        <div className=\"otp-inputs\">\r\n                                            {otp.map((value, index) => (\r\n                                                <input\r\n                                                    key={index}\r\n                                                    id={`otp-${index}`}\r\n                                                    type=\"text\"\r\n                                                    maxLength=\"1\"\r\n                                                    className=\"otp-input\"\r\n                                                    value={value}\r\n                                                    onChange={(e) => handleOtpChange(e.target.value, index)}\r\n                                                />\r\n                                            ))}\r\n                                        </div>\r\n                                        <div className=\"corporate-form-group mt-20\">\r\n                                            <label>New Password</label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                className=\"corporate-input\"\r\n                                                placeholder=\"Enter new password\"\r\n                                                value={newPassword}\r\n                                                onChange={(e) => setNewPassword(e.target.value)}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"corporate-form-group\">\r\n                                            <label>Confirm New Password</label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                className=\"corporate-input\"\r\n                                                placeholder=\"Confirm new password\"\r\n                                                value={confirmPassword}\r\n                                                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                                            />\r\n                                        </div>\r\n                                        <button \r\n                                            className=\"corporate-btn-primary\"\r\n                                            onClick={handlePasswordReset}\r\n                                        >\r\n                                            Reset Password\r\n                                        </button>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            {/* Toast Message */}\r\n            {toast && (\r\n                <div className=\"corporate-toast\">\r\n                    {toast}\r\n                </div>\r\n            )}\r\n\r\n            <style jsx>{`\r\n                .corporate-auth-area {\r\n                    background: #f8f9fa;\r\n                    min-height: 80vh;\r\n                }\r\n\r\n                .corporate-auth-wrapper {\r\n                    max-width: 600px;\r\n                    margin: 0 auto;\r\n                }\r\n\r\n                .corporate-title {\r\n                    font-size: 36px;\r\n                    font-weight: 700;\r\n                    color: #1a1a1a;\r\n                    margin-bottom: 10px;\r\n                }\r\n\r\n                .corporate-subtitle {\r\n                    font-size: 18px;\r\n                    color: #666;\r\n                }\r\n\r\n                .corporate-auth-box {\r\n                    background: white;\r\n                    padding: 40px;\r\n                    border-radius: 12px;\r\n                    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.08);\r\n                    border: 1px solid #e5e5e5;\r\n                }\r\n\r\n                .auth-box-title {\r\n                    font-size: 24px;\r\n                    font-weight: 600;\r\n                    margin-bottom: 30px;\r\n                    color: #1a1a1a;\r\n                }\r\n\r\n                .corporate-form-group {\r\n                    margin-bottom: 20px;\r\n                }\r\n\r\n                .corporate-form-group label {\r\n                    display: block;\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    color: #333;\r\n                    margin-bottom: 8px;\r\n                }\r\n\r\n                .corporate-input {\r\n                    width: 100%;\r\n                    padding: 12px 16px;\r\n                    font-size: 15px;\r\n                    border: 1px solid #ddd;\r\n                    border-radius: 8px;\r\n                    transition: all 0.3s ease;\r\n                    background: #fafafa;\r\n                }\r\n\r\n                .corporate-input:focus {\r\n                    outline: none;\r\n                    border-color: #0989ff;\r\n                    background: white;\r\n                    box-shadow: 0 0 0 3px rgba(9, 137, 255, 0.1);\r\n                }\r\n\r\n                .corporate-btn-primary {\r\n                    width: 100%;\r\n                    padding: 14px 24px;\r\n                    background: #0989ff;\r\n                    color: white;\r\n                    border: none;\r\n                    border-radius: 8px;\r\n                    font-size: 16px;\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    transition: all 0.3s ease;\r\n                }\r\n\r\n                .corporate-btn-primary:hover {\r\n                    background: #0871d3;\r\n                    transform: translateY(-1px);\r\n                    box-shadow: 0 4px 12px rgba(9, 137, 255, 0.3);\r\n                }\r\n\r\n                .corporate-btn-secondary {\r\n                    width: 100%;\r\n                    padding: 14px 24px;\r\n                    background: white;\r\n                    color: #0989ff;\r\n                    border: 2px solid #0989ff;\r\n                    border-radius: 8px;\r\n                    font-size: 16px;\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    transition: all 0.3s ease;\r\n                }\r\n\r\n                .corporate-btn-secondary:hover {\r\n                    background: #0989ff;\r\n                    color: white;\r\n                }\r\n\r\n                .corporate-form-actions {\r\n                    margin-top: 30px;\r\n                }\r\n\r\n                .corporate-links {\r\n                    text-align: center;\r\n                    margin-top: 15px;\r\n                }\r\n\r\n                .corporate-links a {\r\n                    color: #0989ff;\r\n                    text-decoration: none;\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                }\r\n\r\n                .corporate-links a:hover {\r\n                    text-decoration: underline;\r\n                }\r\n\r\n                .corporate-divider {\r\n                    text-align: center;\r\n                    margin: 30px 0 20px;\r\n                    position: relative;\r\n                }\r\n\r\n                .corporate-divider span {\r\n                    background: white;\r\n                    padding: 0 15px;\r\n                    color: #999;\r\n                    font-size: 14px;\r\n                    position: relative;\r\n                    z-index: 1;\r\n                }\r\n\r\n                .corporate-divider::before {\r\n                    content: '';\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    left: 0;\r\n                    right: 0;\r\n                    height: 1px;\r\n                    background: #e5e5e5;\r\n                }\r\n\r\n                .otp-inputs {\r\n                    display: flex;\r\n                    gap: 10px;\r\n                    justify-content: center;\r\n                    margin: 20px 0;\r\n                }\r\n\r\n                .otp-input {\r\n                    width: 50px;\r\n                    height: 50px;\r\n                    text-align: center;\r\n                    font-size: 20px;\r\n                    font-weight: 600;\r\n                    border: 2px solid #ddd;\r\n                    border-radius: 8px;\r\n                    transition: all 0.3s ease;\r\n                }\r\n\r\n                .otp-input:focus {\r\n                    outline: none;\r\n                    border-color: #0989ff;\r\n                    box-shadow: 0 0 0 3px rgba(9, 137, 255, 0.1);\r\n                }\r\n\r\n                .otp-info {\r\n                    text-align: center;\r\n                    color: #666;\r\n                    margin-bottom: 20px;\r\n                }\r\n\r\n                .otp-resend {\r\n                    text-align: center;\r\n                    font-size: 14px;\r\n                    color: #666;\r\n                }\r\n\r\n                .otp-resend a {\r\n                    color: #0989ff;\r\n                    text-decoration: none;\r\n                    font-weight: 500;\r\n                }\r\n\r\n                .reset-info {\r\n                    color: #666;\r\n                    margin-bottom: 20px;\r\n                    font-size: 15px;\r\n                }\r\n\r\n                .corporate-toast {\r\n                    position: fixed;\r\n                    bottom: 30px;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                    background: #333;\r\n                    color: white;\r\n                    padding: 12px 24px;\r\n                    border-radius: 8px;\r\n                    font-size: 14px;\r\n                    font-weight: 500;\r\n                    z-index: 9999;\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n                }\r\n\r\n                @media (max-width: 768px) {\r\n                    .corporate-auth-box {\r\n                        padding: 30px 20px;\r\n                    }\r\n\r\n                    .corporate-title {\r\n                        font-size: 28px;\r\n                    }\r\n\r\n                    .corporate-subtitle {\r\n                        font-size: 16px;\r\n                    }\r\n\r\n                    .otp-input {\r\n                        width: 45px;\r\n                        height: 45px;\r\n                        font-size: 18px;\r\n                    }\r\n                }\r\n            `}</style>\r\n        </Layout>\r\n    )\r\n}\r\n"
        }
    ]
}