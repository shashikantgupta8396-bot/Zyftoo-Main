{
    "sourceFile": "Ninico/app/adminLogin/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1753949861863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753950300616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { AUTH } from '../../util/apiEndpoints'\r\n \r\n export default function AdminLoginPage() {\r\n   const router = useRouter()\r\n-  const [email, setEmail] = useState('')\r\n+  const [phone, setPhone] = useState('')\r\n   const [password, setPassword] = useState('')\r\n   const [error, setError] = useState('')\r\n   const [loading, setLoading] = useState(false)\r\n \r\n@@ -25,9 +25,9 @@\n     setLoading(true)\r\n \r\n     try {\r\n       const response = await post(AUTH.LOGIN, {\r\n-        email,\r\n+        phone,\r\n         password,\r\n         role: 'admin' // Add role to indicate admin login\r\n       })\r\n \r\n@@ -57,21 +57,21 @@\n         </div>\r\n         <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\r\n           <div className=\"rounded-md shadow-sm -space-y-px\">\r\n             <div>\r\n-              <label htmlFor=\"email-address\" className=\"sr-only\">\r\n-                Email address\r\n+              <label htmlFor=\"phone\" className=\"sr-only\">\r\n+                Phone Number\r\n               </label>\r\n               <input\r\n-                id=\"email-address\"\r\n-                name=\"email\"\r\n-                type=\"email\"\r\n-                autoComplete=\"email\"\r\n+                id=\"phone\"\r\n+                name=\"phone\"\r\n+                type=\"tel\"\r\n+                autoComplete=\"tel\"\r\n                 required\r\n                 className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n-                placeholder=\"Email address\"\r\n-                value={email}\r\n-                onChange={(e) => setEmail(e.target.value)}\r\n+                placeholder=\"Phone number\"\r\n+                value={phone}\r\n+                onChange={(e) => setPhone(e.target.value)}\r\n               />\r\n             </div>\r\n             <div>\r\n               <label htmlFor=\"password\" className=\"sr-only\">\r\n"
                },
                {
                    "date": 1753950506374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,23 +18,49 @@\n       router.push('/admin')\r\n     }\r\n   }, [router])\r\n \r\n+  const validatePhone = (phone) => {\r\n+    const phoneRegex = /^[0-9]{10}$/\r\n+    return phoneRegex.test(phone)\r\n+  }\r\n+\r\n   const handleLogin = async (e) => {\r\n     e.preventDefault()\r\n     setError('')\r\n     setLoading(true)\r\n \r\n+    // Validate phone\r\n+    if (!validatePhone(phone)) {\r\n+      setError('Please enter a valid 10-digit phone number')\r\n+      setLoading(false)\r\n+      return\r\n+    }\r\n+\r\n     try {\r\n       const response = await post(AUTH.LOGIN, {\r\n         phone,\r\n         password,\r\n         role: 'admin' // Add role to indicate admin login\r\n       })\r\n \r\n-      if (response.success) {\r\n+      if (response.success && response.token) {\r\n+        if (response.user?.role !== 'admin') {\r\n+          setError('Access denied. Admin privileges required.')\r\n+          return\r\n+        }\r\n+\r\n         // Store admin token\r\n         localStorage.setItem('adminToken', response.token)\r\n+        \r\n+        // Store admin info\r\n+        localStorage.setItem('adminInfo', JSON.stringify({\r\n+          id: response.user.id,\r\n+          name: response.user.name,\r\n+          phone: response.user.phone,\r\n+          role: response.user.role\r\n+        }))\r\n+\r\n         console.log('‚úÖ Admin login successful')\r\n         router.push('/admin')\r\n       } else {\r\n         setError(response.message || 'Login failed')\r\n"
                },
                {
                    "date": 1753950970808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,15 +36,56 @@\n       return\r\n     }\r\n \r\n     try {\r\n+      // Send login request\r\n       const response = await post(AUTH.LOGIN, {\r\n         phone,\r\n         password,\r\n         role: 'admin' // Add role to indicate admin login\r\n       })\r\n \r\n-      if (response.success && response.token) {\r\n+      console.log('üîÑ Login response:', response)\r\n+\r\n+      // Handle encrypted response\r\n+      if (response && response.encryptedData) {\r\n+        try {\r\n+          // Get the decrypted data from the response\r\n+          const decryptedData = response.data\r\n+          console.log('üîì Decrypted response:', decryptedData)\r\n+\r\n+          if (decryptedData.success && decryptedData.data?.token) {\r\n+            const { token, user } = decryptedData.data\r\n+\r\n+            // Verify admin role\r\n+            if (user?.role !== 'admin') {\r\n+              setError('Access denied. Admin privileges required.')\r\n+              return\r\n+            }\r\n+\r\n+            // Store admin token\r\n+            localStorage.setItem('adminToken', token)\r\n+            \r\n+            // Store admin info\r\n+            localStorage.setItem('adminInfo', JSON.stringify({\r\n+              id: user.id,\r\n+              name: user.name,\r\n+              phone: user.phone,\r\n+              role: user.role,\r\n+              email: user.email\r\n+            }))\r\n+\r\n+            console.log('‚úÖ Admin login successful')\r\n+            router.push('/admin')\r\n+          } else {\r\n+            setError(decryptedData.message || 'Login failed')\r\n+          }\r\n+        } catch (decryptError) {\r\n+          console.error('üîê Decryption error:', decryptError)\r\n+          setError('Error processing login response')\r\n+        }\r\n+      } else if (response.success && response.token) {\r\n+        // Handle unencrypted response (fallback)\r\n         if (response.user?.role !== 'admin') {\r\n           setError('Access denied. Admin privileges required.')\r\n           return\r\n         }\r\n@@ -56,9 +97,10 @@\n         localStorage.setItem('adminInfo', JSON.stringify({\r\n           id: response.user.id,\r\n           name: response.user.name,\r\n           phone: response.user.phone,\r\n-          role: response.user.role\r\n+          role: response.user.role,\r\n+          email: response.user.email\r\n         }))\r\n \r\n         console.log('‚úÖ Admin login successful')\r\n         router.push('/admin')\r\n"
                },
                {
                    "date": 1753951204471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { useState, useEffect } from 'react'\r\n import { useRouter } from 'next/navigation'\r\n import { post } from '../../util/apiService'\r\n import { AUTH } from '../../util/apiEndpoints'\r\n+import { decryptData } from '../../util/cryptoHelper'\r\n \r\n export default function AdminLoginPage() {\r\n   const router = useRouter()\r\n   const [phone, setPhone] = useState('')\r\n@@ -45,15 +46,15 @@\n       })\r\n \r\n       console.log('üîÑ Login response:', response)\r\n \r\n-      // Handle encrypted response\r\n-      if (response && response.encryptedData) {\r\n+      if (response?.encryptedData) {\r\n         try {\r\n-          // Get the decrypted data from the response\r\n-          const decryptedData = response.data\r\n+          // Decrypt the response data using cryptoHelper\r\n+          const decryptedData = decryptData(response.encryptedData)\r\n           console.log('üîì Decrypted response:', decryptedData)\r\n \r\n+          // Handle decrypted response\r\n           if (decryptedData.success && decryptedData.data?.token) {\r\n             const { token, user } = decryptedData.data\r\n \r\n             // Verify admin role\r\n@@ -80,33 +81,12 @@\n             setError(decryptedData.message || 'Login failed')\r\n           }\r\n         } catch (decryptError) {\r\n           console.error('üîê Decryption error:', decryptError)\r\n-          setError('Error processing login response')\r\n+          setError('Error processing encrypted response')\r\n         }\r\n-      } else if (response.success && response.token) {\r\n-        // Handle unencrypted response (fallback)\r\n-        if (response.user?.role !== 'admin') {\r\n-          setError('Access denied. Admin privileges required.')\r\n-          return\r\n-        }\r\n-\r\n-        // Store admin token\r\n-        localStorage.setItem('adminToken', response.token)\r\n-        \r\n-        // Store admin info\r\n-        localStorage.setItem('adminInfo', JSON.stringify({\r\n-          id: response.user.id,\r\n-          name: response.user.name,\r\n-          phone: response.user.phone,\r\n-          role: response.user.role,\r\n-          email: response.user.email\r\n-        }))\r\n-\r\n-        console.log('‚úÖ Admin login successful')\r\n-        router.push('/admin')\r\n       } else {\r\n-        setError(response.message || 'Login failed')\r\n+        setError('Invalid response format from server')\r\n       }\r\n     } catch (err) {\r\n       console.error('‚ùå Admin login error:', err)\r\n       setError('Invalid credentials or server error')\r\n"
                },
                {
                    "date": 1753951609718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,53 +44,87 @@\n         password,\r\n         role: 'admin' // Add role to indicate admin login\r\n       })\r\n \r\n-      console.log('üîÑ Login response:', response)\r\n+      // Debug the response structure\r\n+      console.log('üîÑ Full response:', {\r\n+        status: response?.status,\r\n+        hasEncryptedData: !!response?.encryptedData,\r\n+        encryptedDataLength: response?.encryptedData?.length,\r\n+        responseKeys: Object.keys(response)\r\n+      })\r\n \r\n-      if (response?.encryptedData) {\r\n-        try {\r\n-          // Decrypt the response data using cryptoHelper\r\n-          const decryptedData = decryptData(response.encryptedData)\r\n-          console.log('üîì Decrypted response:', decryptedData)\r\n+      if (!response?.encryptedData) {\r\n+        console.error('‚ùå No encrypted data in response:', response)\r\n+        throw new Error('Invalid response format from server')\r\n+      }\r\n \r\n-          // Handle decrypted response\r\n-          if (decryptedData.success && decryptedData.data?.token) {\r\n-            const { token, user } = decryptedData.data\r\n+      try {\r\n+        // Log encrypted data prefix for debugging\r\n+        console.log('üîí Encrypted data prefix:', response.encryptedData.substring(0, 50))\r\n \r\n-            // Verify admin role\r\n-            if (user?.role !== 'admin') {\r\n-              setError('Access denied. Admin privileges required.')\r\n-              return\r\n-            }\r\n+        // Decrypt the response\r\n+        const decryptedData = decryptData(response.encryptedData)\r\n+        console.log('üîì Decrypted response structure:', {\r\n+          success: decryptedData?.success,\r\n+          hasData: !!decryptedData?.data,\r\n+          hasToken: !!decryptedData?.data?.token,\r\n+          hasUser: !!decryptedData?.data?.user,\r\n+          userRole: decryptedData?.data?.user?.role\r\n+        })\r\n \r\n-            // Store admin token\r\n-            localStorage.setItem('adminToken', token)\r\n-            \r\n-            // Store admin info\r\n-            localStorage.setItem('adminInfo', JSON.stringify({\r\n-              id: user.id,\r\n-              name: user.name,\r\n-              phone: user.phone,\r\n-              role: user.role,\r\n-              email: user.email\r\n-            }))\r\n+        if (!decryptedData?.success || !decryptedData?.data?.token || !decryptedData?.data?.user) {\r\n+          console.error('‚ùå Invalid decrypted data structure:', decryptedData)\r\n+          throw new Error('Invalid response data structure')\r\n+        }\r\n \r\n-            console.log('‚úÖ Admin login successful')\r\n-            router.push('/admin')\r\n-          } else {\r\n-            setError(decryptedData.message || 'Login failed')\r\n-          }\r\n-        } catch (decryptError) {\r\n-          console.error('üîê Decryption error:', decryptError)\r\n-          setError('Error processing encrypted response')\r\n+        const { token, user } = decryptedData.data\r\n+\r\n+        // Verify admin role\r\n+        if (user.role !== 'admin') {\r\n+          console.warn('‚ö†Ô∏è Non-admin user attempted login:', user.role)\r\n+          setError('Access denied. Admin privileges required.')\r\n+          return\r\n         }\r\n-      } else {\r\n-        setError('Invalid response format from server')\r\n+\r\n+        console.log('‚úÖ Admin validation successful:', {\r\n+          userId: user.id,\r\n+          role: user.role\r\n+        })\r\n+\r\n+        // Store admin token\r\n+        localStorage.setItem('adminToken', token)\r\n+        \r\n+        // Store admin info\r\n+        const adminInfo = {\r\n+          id: user.id,\r\n+          name: user.name,\r\n+          phone: user.phone,\r\n+          role: user.role,\r\n+          email: user.email\r\n+        }\r\n+        \r\n+        localStorage.setItem('adminInfo', JSON.stringify(adminInfo))\r\n+        console.log('üíæ Stored admin info:', adminInfo)\r\n+\r\n+        console.log('‚úÖ Admin login successful')\r\n+        router.push('/admin')\r\n+\r\n+      } catch (decryptError) {\r\n+        console.error('üîê Decryption error:', {\r\n+          message: decryptError.message,\r\n+          stack: decryptError.stack,\r\n+          response: response\r\n+        })\r\n+        setError(`Error processing response: ${decryptError.message}`)\r\n       }\r\n     } catch (err) {\r\n-      console.error('‚ùå Admin login error:', err)\r\n-      setError('Invalid credentials or server error')\r\n+      console.error('‚ùå Login error:', {\r\n+        message: err.message,\r\n+        type: err.name,\r\n+        stack: err.stack\r\n+      })\r\n+      setError(err.message || 'Invalid credentials or server error')\r\n     } finally {\r\n       setLoading(false)\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1753951937080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,28 @@\n import { useState, useEffect } from 'react'\r\n import { useRouter } from 'next/navigation'\r\n import { post } from '../../util/apiService'\r\n import { AUTH } from '../../util/apiEndpoints'\r\n-import { decryptData } from '../../util/cryptoHelper'\r\n+import { encryptData, decryptData } from '../../util/cryptoHelper'\r\n+import Image from 'next/image'\r\n \r\n export default function AdminLoginPage() {\r\n   const router = useRouter()\r\n+  const [step, setStep] = useState('phone') // 'phone' or 'password'\r\n   const [phone, setPhone] = useState('')\r\n   const [password, setPassword] = useState('')\r\n   const [error, setError] = useState('')\r\n   const [loading, setLoading] = useState(false)\r\n+  const [toast, setToast] = useState('')\r\n \r\n+  // Auto-hide toast after 3 seconds\r\n+  useEffect(() => {\r\n+    if (toast) {\r\n+      const timer = setTimeout(() => setToast(''), 3000)\r\n+      return () => clearTimeout(timer)\r\n+    }\r\n+  }, [toast])\r\n+\r\n   // Check if already logged in\r\n   useEffect(() => {\r\n     const token = localStorage.getItem('adminToken')\r\n     if (token) {\r\n@@ -129,75 +140,236 @@\n     }\r\n   }\r\n \r\n   return (\r\n-    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\r\n-      <div className=\"max-w-md w-full space-y-8\">\r\n-        <div>\r\n-          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n-            Admin Login\r\n-          </h2>\r\n-        </div>\r\n-        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\r\n-          <div className=\"rounded-md shadow-sm -space-y-px\">\r\n-            <div>\r\n-              <label htmlFor=\"phone\" className=\"sr-only\">\r\n-                Phone Number\r\n-              </label>\r\n-              <input\r\n-                id=\"phone\"\r\n-                name=\"phone\"\r\n-                type=\"tel\"\r\n-                autoComplete=\"tel\"\r\n-                required\r\n-                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n-                placeholder=\"Phone number\"\r\n-                value={phone}\r\n-                onChange={(e) => setPhone(e.target.value)}\r\n-              />\r\n+    <div className=\"modal-overlay\">\r\n+      <div className=\"modal-content login-modal\">\r\n+        <div className=\"login-modal-left\">\r\n+          <div className=\"login-logo-wrapper mobile-only\">\r\n+            <div className=\"logo-circle\">\r\n+              <img src=\"/assets/img/logo/logo.png\" alt=\"Company Logo\" className=\"login-logo\" />\r\n             </div>\r\n-            <div>\r\n-              <label htmlFor=\"password\" className=\"sr-only\">\r\n-                Password\r\n-              </label>\r\n-              <input\r\n-                id=\"password\"\r\n-                name=\"password\"\r\n-                type=\"password\"\r\n-                autoComplete=\"current-password\"\r\n-                required\r\n-                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n-                placeholder=\"Password\"\r\n-                value={password}\r\n-                onChange={(e) => setPassword(e.target.value)}\r\n-              />\r\n-            </div>\r\n           </div>\r\n+          <h2>ADMIN PANEL</h2>\r\n+          <p>Secure Login Portal</p>\r\n+          <div className=\"offer-image desktop-only\">\r\n+            <img src=\"/assets/login-illustration.png\" alt=\"Admin\" />\r\n+          </div>\r\n+        </div>\r\n \r\n-          {error && (\r\n-            <div className=\"rounded-md bg-red-50 p-4\">\r\n-              <div className=\"flex\">\r\n-                <div className=\"ml-3\">\r\n-                  <h3 className=\"text-sm font-medium text-red-800\">{error}</h3>\r\n-                </div>\r\n+        <div className=\"login-modal-right\">\r\n+          <div className=\"login-content-wrapper\">\r\n+            <div className=\"login-logo-wrapper desktop-only\">\r\n+              <div className=\"logo-circle\">\r\n+                <img src=\"/assets/img/logo/logo.png\" alt=\"Company Logo\" className=\"login-logo\" />\r\n               </div>\r\n             </div>\r\n-          )}\r\n \r\n-          <div>\r\n-            <button\r\n-              type=\"submit\"\r\n-              disabled={loading}\r\n-              className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white ${\r\n-                loading \r\n-                  ? 'bg-indigo-400 cursor-not-allowed' \r\n-                  : 'bg-indigo-600 hover:bg-indigo-700'\r\n-              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\r\n-            >\r\n-              {loading ? 'Signing in...' : 'Sign in'}\r\n-            </button>\r\n+            <div className=\"login-form-wrapper\">\r\n+              {step === 'phone' ? (\r\n+                <>\r\n+                  <h3>Admin Login</h3>\r\n+                  <input\r\n+                    type=\"text\"\r\n+                    placeholder=\"Phone Number\"\r\n+                    className=\"login-input\"\r\n+                    value={phone}\r\n+                    onChange={(e) => setPhone(e.target.value)}\r\n+                  />\r\n+                  <button \r\n+                    className=\"login-next\"\r\n+                    onClick={() => {\r\n+                      if (validatePhone(phone)) {\r\n+                        setStep('password')\r\n+                      } else {\r\n+                        setToast('Please enter a valid 10-digit phone number')\r\n+                      }\r\n+                    }}\r\n+                  >\r\n+                    Next\r\n+                  </button>\r\n+                </>\r\n+              ) : step === 'password' ? (\r\n+                <>\r\n+                  <div className='password-text1'><h3>Password:</h3></div>\r\n+                  <div style={{ marginBottom: '10px', fontSize: '14px', color: '#666' }}>\r\n+                    <strong>Phone:</strong> {phone || 'Not set'}\r\n+                  </div>\r\n+                  <input\r\n+                    type=\"password\"\r\n+                    placeholder=\"Enter Your Password\"\r\n+                    className=\"password-input\"\r\n+                    value={password}\r\n+                    onChange={(e) => setPassword(e.target.value)}\r\n+                  />\r\n+                  <button\r\n+                    className=\"login-btn\"\r\n+                    onClick={handleLogin}\r\n+                  >\r\n+                    {loading ? 'Signing in...' : 'Login'}\r\n+                  </button>\r\n+                </>\r\n+              ) : null}\r\n+\r\n+              {error && (\r\n+                <div className=\"error-message\">\r\n+                  {error}\r\n+                </div>\r\n+              )}\r\n+            </div>\r\n           </div>\r\n-        </form>\r\n+        </div>\r\n       </div>\r\n+\r\n+      {toast && (\r\n+        <div className=\"toast-message\">\r\n+          {toast}\r\n+        </div>\r\n+      )}\r\n+\r\n+      <style jsx>{`\r\n+        .modal-overlay {\r\n+          position: fixed;\r\n+          top: 0;\r\n+          left: 0;\r\n+          width: 100vw;\r\n+          height: 100vh;\r\n+          background: rgba(0, 0, 0, 0.5);\r\n+          display: flex;\r\n+          align-items: center;\r\n+          justify-content: center;\r\n+        }\r\n+\r\n+        .modal-content.login-modal {\r\n+          display: flex;\r\n+          flex-direction: row;\r\n+          width: 800px;\r\n+          background: white;\r\n+          border-radius: 10px;\r\n+          overflow: hidden;\r\n+          position: relative;\r\n+          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n+        }\r\n+\r\n+        .login-modal-left {\r\n+          width: 50%;\r\n+          background: #d3f14a;\r\n+          padding: 30px 20px;\r\n+          display: flex;\r\n+          flex-direction: column;\r\n+          justify-content: center;\r\n+          align-items: center;\r\n+          text-align: center;\r\n+        }\r\n+\r\n+        .login-modal-right {\r\n+          width: 50%;\r\n+          display: flex;\r\n+          justify-content: center;\r\n+          align-items: center;\r\n+          padding: 40px;\r\n+        }\r\n+\r\n+        .login-form-wrapper {\r\n+          width: 100%;\r\n+          max-width: 300px;\r\n+        }\r\n+\r\n+        .login-input,\r\n+        .password-input {\r\n+          width: 100%;\r\n+          padding: 10px;\r\n+          margin: 10px 0;\r\n+          border: 1px solid #ccc;\r\n+          border-radius: 4px;\r\n+          font-size: 14px;\r\n+        }\r\n+\r\n+        .password-input {\r\n+          text-align: center;\r\n+        }\r\n+\r\n+        .login-next,\r\n+        .login-btn {\r\n+          width: 100%;\r\n+          padding: 10px;\r\n+          margin-top: 20px;\r\n+          background: rgb(76, 105, 149);\r\n+          color: white;\r\n+          border: none;\r\n+          border-radius: 4px;\r\n+          cursor: pointer;\r\n+          font-weight: 600;\r\n+        }\r\n+\r\n+        .login-next:hover,\r\n+        .login-btn:hover {\r\n+          background: #007bff;\r\n+        }\r\n+\r\n+        .error-message {\r\n+          color: #ff4d4f;\r\n+          margin-top: 10px;\r\n+          text-align: center;\r\n+        }\r\n+\r\n+        .toast-message {\r\n+          position: fixed;\r\n+          bottom: 30px;\r\n+          left: 50%;\r\n+          transform: translateX(-50%);\r\n+          background: #ff4d4f;\r\n+          color: white;\r\n+          padding: 10px 20px;\r\n+          border-radius: 6px;\r\n+          font-size: 13px;\r\n+          font-weight: 500;\r\n+        }\r\n+\r\n+        .login-logo-wrapper {\r\n+          margin-bottom: 20px;\r\n+          text-align: center;\r\n+        }\r\n+\r\n+        .logo-circle {\r\n+          background-color: black;\r\n+          padding: 10px;\r\n+          border-radius: 50%;\r\n+          display: inline-block;\r\n+        }\r\n+\r\n+        .login-logo {\r\n+          height: 60px;\r\n+          width: auto;\r\n+        }\r\n+\r\n+        @media (max-width: 768px) {\r\n+          .modal-content.login-modal {\r\n+            flex-direction: column;\r\n+            width: 90%;\r\n+            max-width: 400px;\r\n+          }\r\n+\r\n+          .login-modal-left,\r\n+          .login-modal-right {\r\n+            width: 100%;\r\n+          }\r\n+\r\n+          .desktop-only {\r\n+            display: none;\r\n+          }\r\n+\r\n+          .mobile-only {\r\n+            display: block;\r\n+          }\r\n+        }\r\n+\r\n+        @media (min-width: 769px) {\r\n+          .mobile-only {\r\n+            display: none;\r\n+          }\r\n+        }\r\n+      `}</style>\r\n     </div>\r\n   )\r\n+  )\r\n }\r\n"
                },
                {
                    "date": 1753952019913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,34 +35,37 @@\n     const phoneRegex = /^[0-9]{10}$/\r\n     return phoneRegex.test(phone)\r\n   }\r\n \r\n-  const handleLogin = async (e) => {\r\n-    e.preventDefault()\r\n+  const handleLogin = async () => {\r\n     setError('')\r\n     setLoading(true)\r\n \r\n-    // Validate phone\r\n-    if (!validatePhone(phone)) {\r\n-      setError('Please enter a valid 10-digit phone number')\r\n+    if (!validatePhone(phone) || !password) {\r\n+      setToast('Please enter valid credentials')\r\n       setLoading(false)\r\n       return\r\n     }\r\n \r\n     try {\r\n-      // Send login request\r\n-      const response = await post(AUTH.LOGIN, {\r\n+      // Prepare and encrypt login data\r\n+      const loginData = {\r\n         phone,\r\n         password,\r\n-        role: 'admin' // Add role to indicate admin login\r\n-      })\r\n+        role: 'admin'\r\n+      }\r\n+      \r\n+      // Encrypt the data\r\n+      const encryptedData = encryptData(loginData)\r\n+      console.log('üîí Login data encrypted')\r\n \r\n+      // Send login request\r\n+      const response = await post(AUTH.LOGIN, { encryptedData })\r\n+\r\n       // Debug the response structure\r\n-      console.log('üîÑ Full response:', {\r\n-        status: response?.status,\r\n+      console.log('üîÑ Response received:', {\r\n         hasEncryptedData: !!response?.encryptedData,\r\n-        encryptedDataLength: response?.encryptedData?.length,\r\n-        responseKeys: Object.keys(response)\r\n+        responseLength: response?.encryptedData?.length\r\n       })\r\n \r\n       if (!response?.encryptedData) {\r\n         console.error('‚ùå No encrypted data in response:', response)\r\n@@ -370,6 +373,5 @@\n         }\r\n       `}</style>\r\n     </div>\r\n   )\r\n-  )\r\n }\r\n"
                },
                {
                    "date": 1753952572167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n \r\n       // Handle decryption\r\n       let decryptedResponse\r\n       if (response.encryptedData) {\r\n-        console.log('ÔøΩ Starting decryption...')\r\n+        console.log('\udd13 Starting decryption...')\r\n         decryptedResponse = decryptData(response.encryptedData)\r\n         console.log('‚úÖ Decrypted response:', decryptedResponse)\r\n       } else {\r\n         console.log('‚ö†Ô∏è No encrypted data, using response as-is')\r\n"
                },
                {
                    "date": 1753953292634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,54 +61,45 @@\n       console.log('üîí Login data encrypted')\r\n \r\n       // Send login request and get response data\r\n       const res = await post(AUTH.LOGIN, { encryptedData })\r\n-      const response = res.data // Get data from axios response\r\n+      const response = res.data; // ‚úÖ Axios wraps it here\r\n+                              console.log('üì® Parsed Axios response:', response);\r\n       \r\n-      console.log('üîÑ Raw response:', response)\r\n-\r\n-      // Handle decryption\r\n-      let decryptedResponse\r\n-      if (response.encryptedData) {\r\n-        console.log('ÔøΩ Starting decryption...')\r\n-        decryptedResponse = decryptData(response.encryptedData)\r\n-        console.log('‚úÖ Decrypted response:', decryptedResponse)\r\n-      } else {\r\n-        console.log('‚ö†Ô∏è No encrypted data, using response as-is')\r\n-        decryptedResponse = response\r\n-      }\r\n-\r\n-      // Get the actual response data (handle nested structure)\r\n-      const responseData = decryptedResponse.data || decryptedResponse\r\n-      console.log('üì¶ Final response data:', responseData)\r\n-\r\n-      if (!responseData?.token || !responseData?.user) {\r\n-        throw new Error('Invalid response format')\r\n-      }\r\n-\r\n-      // Verify admin role\r\n-      if (responseData.user.role !== 'admin') {\r\n-        console.warn('‚ö†Ô∏è Non-admin user attempted login:', responseData.user.role)\r\n-        setError('Access denied. Admin privileges required.')\r\n-        return\r\n-      }\r\n-\r\n-      // Store admin token\r\n-      localStorage.setItem('adminToken', responseData.token)\r\n       \r\n-      // Store admin info\r\n-      const adminInfo = {\r\n-        id: responseData.user.id,\r\n-        name: responseData.user.name,\r\n-        phone: responseData.user.phone,\r\n-        role: responseData.user.role,\r\n-        email: responseData.user.email\r\n-      }\r\n+                              if (!response.success) {\r\n+                                const msg = response.message || 'Login failed';\r\n+                                console.log('‚ùå Login failed:', msg);\r\n+                                setToast(msg);\r\n+                                return;\r\n+                              }\r\n       \r\n-      localStorage.setItem('adminInfo', JSON.stringify(adminInfo))\r\n-      console.log('üíæ Stored admin info:', adminInfo)\r\n-\r\n-      console.log('‚úÖ Admin login successful')\r\n+                              // Decrypt the response data\r\n+                              let decryptedResponse;\r\n+                              if (response.encryptedData) {\r\n+                                console.log('üîì Decrypting response data...');\r\n+                                decryptedResponse = decryptData(response.encryptedData);\r\n+                                console.log('‚úÖ Decrypted response:', decryptedResponse);\r\n+                              } else {\r\n+                                console.log('‚ö†Ô∏è No encrypted data in response, using as-is');\r\n+                                decryptedResponse = response;\r\n+                              }\r\n+      \r\n+                              // Handle nested data structure\r\n+                              const responseData = decryptedResponse.data || decryptedResponse;\r\n+                              console.log('üîç Response data structure:', responseData);\r\n+      \r\n+                              if (!responseData?.token) {\r\n+                                console.log('‚ùå Token missing in response data:', responseData);\r\n+                                setToast('Login succeeded but token missing.');\r\n+                                return;\r\n+                              }\r\n+                              \r\n+                              console.log('‚úÖ Login successful, storing user data...');\r\n+                              console.log('üé´ Token found:', responseData.token);\r\n+                              // Store user data encrypted in localStorage\r\n+                              encryptAndStore('user', responseData.user);\r\n+                              login(responseData.user);\r\n       router.push('/admin')\r\n \r\n     } catch (err) {\r\n       console.error('‚ùå Login error:', err)\r\n"
                }
            ],
            "date": 1753949861862,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { useState, useEffect } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { post } from '../../util/apiService'\r\nimport { AUTH } from '../../util/apiEndpoints'\r\n\r\nexport default function AdminLoginPage() {\r\n  const router = useRouter()\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [error, setError] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // Check if already logged in\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('adminToken')\r\n    if (token) {\r\n      router.push('/admin')\r\n    }\r\n  }, [router])\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault()\r\n    setError('')\r\n    setLoading(true)\r\n\r\n    try {\r\n      const response = await post(AUTH.LOGIN, {\r\n        email,\r\n        password,\r\n        role: 'admin' // Add role to indicate admin login\r\n      })\r\n\r\n      if (response.success) {\r\n        // Store admin token\r\n        localStorage.setItem('adminToken', response.token)\r\n        console.log('‚úÖ Admin login successful')\r\n        router.push('/admin')\r\n      } else {\r\n        setError(response.message || 'Login failed')\r\n      }\r\n    } catch (err) {\r\n      console.error('‚ùå Admin login error:', err)\r\n      setError('Invalid credentials or server error')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full space-y-8\">\r\n        <div>\r\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n            Admin Login\r\n          </h2>\r\n        </div>\r\n        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\r\n          <div className=\"rounded-md shadow-sm -space-y-px\">\r\n            <div>\r\n              <label htmlFor=\"email-address\" className=\"sr-only\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                id=\"email-address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                required\r\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n                placeholder=\"Email address\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"password\" className=\"sr-only\">\r\n                Password\r\n              </label>\r\n              <input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                required\r\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=\"rounded-md bg-red-50 p-4\">\r\n              <div className=\"flex\">\r\n                <div className=\"ml-3\">\r\n                  <h3 className=\"text-sm font-medium text-red-800\">{error}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white ${\r\n                loading \r\n                  ? 'bg-indigo-400 cursor-not-allowed' \r\n                  : 'bg-indigo-600 hover:bg-indigo-700'\r\n              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}\r\n            >\r\n              {loading ? 'Signing in...' : 'Sign in'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}