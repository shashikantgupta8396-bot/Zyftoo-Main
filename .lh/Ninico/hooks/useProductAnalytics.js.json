{
    "sourceFile": "Ninico/hooks/useProductAnalytics.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753711237033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753711237033,
            "name": "Commit-0",
            "content": "import { useCallback, useEffect, useRef } from 'react';\r\nimport { analyticsService } from '../util/analyticsService';\r\nimport { useAuth } from '../components/context/AuthContext';\r\n\r\n/**\r\n * Custom hook for product analytics tracking\r\n * @param {object} options - Hook configuration options\r\n */\r\nexport const useProductAnalytics = (options = {}) => {\r\n  const { user } = useAuth();\r\n  const trackingRef = useRef(new Set());\r\n  \r\n  const {\r\n    autoTrackPageViews = true,\r\n    debounceMs = 1000,\r\n    trackHover = false\r\n  } = options;\r\n\r\n  /**\r\n   * Get current user type\r\n   */\r\n  const getUserType = useCallback(() => {\r\n    return analyticsService.getUserType(user);\r\n  }, [user]);\r\n\r\n  /**\r\n   * Track a product view\r\n   */\r\n  const trackProductView = useCallback((productId, context = {}) => {\r\n    const userType = getUserType();\r\n    \r\n    analyticsService.trackProductView(productId, {\r\n      userType,\r\n      debounceMs,\r\n      ...context\r\n    });\r\n  }, [getUserType, debounceMs]);\r\n\r\n  /**\r\n   * Track product card click with enhanced context\r\n   */\r\n  const trackProductCardClick = useCallback((product, context = {}) => {\r\n    const userType = getUserType();\r\n    \r\n    analyticsService.trackProductCardClick(product, {\r\n      userType,\r\n      trackHover,\r\n      ...context\r\n    });\r\n  }, [getUserType, trackHover]);\r\n\r\n  /**\r\n   * Track product page view (for product detail pages)\r\n   */\r\n  const trackProductPageView = useCallback((productId, context = {}) => {\r\n    // Prevent duplicate tracking for the same product in the same session\r\n    const trackingKey = `page-${productId}`;\r\n    if (trackingRef.current.has(trackingKey)) {\r\n      return;\r\n    }\r\n    \r\n    trackingRef.current.add(trackingKey);\r\n    \r\n    const userType = getUserType();\r\n    \r\n    analyticsService.trackProductPageView(productId, {\r\n      userType,\r\n      ...context\r\n    });\r\n  }, [getUserType]);\r\n\r\n  /**\r\n   * Create tracking props for product components\r\n   */\r\n  const createTrackingProps = useCallback((product, context = {}) => {\r\n    const userType = getUserType();\r\n    \r\n    return analyticsService.createTrackingProps(product, {\r\n      userType,\r\n      trackHover,\r\n      ...context\r\n    });\r\n  }, [getUserType, trackHover]);\r\n\r\n  /**\r\n   * Get popular products with user context\r\n   */\r\n  const getPopularProducts = useCallback(async (filters = {}) => {\r\n    const userType = getUserType();\r\n    \r\n    return await analyticsService.getPopularProducts({\r\n      userType: userType === 'guest' ? 'all' : userType,\r\n      ...filters\r\n    });\r\n  }, [getUserType]);\r\n\r\n  /**\r\n   * Auto-track page views based on URL changes\r\n   */\r\n  useEffect(() => {\r\n    if (!autoTrackPageViews) return;\r\n\r\n    // This would typically integrate with Next.js router\r\n    // For now, we'll track based on URL patterns\r\n    const currentPath = window.location.pathname;\r\n    \r\n    // Check for product detail pages\r\n    const productDetailMatch = currentPath.match(/\\/shop-details\\/([^\\/]+)/) ||\r\n                              currentPath.match(/\\/products\\/([^\\/]+)/) ||\r\n                              currentPath.match(/\\/corporate\\/products\\/([^\\/]+)/);\r\n    \r\n    if (productDetailMatch) {\r\n      const productId = productDetailMatch[1];\r\n      trackProductPageView(productId, {\r\n        referrer: document.referrer ? 'external' : 'internal',\r\n        source: currentPath.includes('corporate') ? 'corporate-page' : 'product-page'\r\n      });\r\n    }\r\n  }, [autoTrackPageViews, trackProductPageView]);\r\n\r\n  return {\r\n    // Core tracking functions\r\n    trackProductView,\r\n    trackProductCardClick,\r\n    trackProductPageView,\r\n    \r\n    // Helper functions\r\n    createTrackingProps,\r\n    getUserType,\r\n    \r\n    // Data fetching\r\n    getPopularProducts,\r\n    \r\n    // Admin functions (only available for admin users)\r\n    getProductAnalytics: user?.role === 'admin' ? \r\n      analyticsService.getProductAnalytics.bind(analyticsService) : null,\r\n    getAnalyticsDashboard: user?.role === 'admin' ? \r\n      analyticsService.getAnalyticsDashboard.bind(analyticsService) : null\r\n  };\r\n};\r\n"
        }
    ]
}