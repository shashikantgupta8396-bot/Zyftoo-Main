{
    "sourceFile": "Ninico/hooks/useCategorySectionData.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753454690895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753455141746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+import { useState, useEffect } from 'react';\r\n+\r\n+// For now, let's create a simple hook that returns mock data to test the UI\r\n+export default function useCategorySectionData(pageId, token) {\r\n+  const [data, setData] = useState({\r\n+    mainCategories: [],\r\n+    subcategories: []\r\n+  });\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [selectedMainCategory, setSelectedMainCategory] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      try {\r\n+        setLoading(true);\r\n+        setError(null);\r\n+        \r\n+        console.log('üîç [useCategorySectionData] Fetching data for:', { pageId, token: !!token });\r\n+        \r\n+        // For now, let's use mock data to test the UI\r\n+        // TODO: Replace with actual API call once backend is ready\r\n+        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n+        \r\n+        const mockData = {\r\n+          mainCategories: [\r\n+            {\r\n+              id: '687fbada33f196eb765aecd2',\r\n+              name: 'Fashion & Clothing',\r\n+              description: 'Trendy clothing and fashion accessories for all occasions',\r\n+              image: null\r\n+            },\r\n+            {\r\n+              id: '687fbada33f196eb765aecd3',\r\n+              name: 'Electronics',\r\n+              description: 'Latest gadgets and electronic devices',\r\n+              image: null\r\n+            },\r\n+            {\r\n+              id: '687fbada33f196eb765aecd4', \r\n+              name: 'Home & Living',\r\n+              description: 'Home decor, furniture, and living essentials',\r\n+              image: null\r\n+            }\r\n+          ],\r\n+          subcategories: [\r\n+            {\r\n+              id: 'sub1',\r\n+              name: 'Men\\'s Clothing',\r\n+              description: 'Shirts, pants, suits, and men\\'s fashion wear',\r\n+              parent: '687fbada33f196eb765aecd2',\r\n+              parentName: 'Fashion & Clothing',\r\n+              image: null\r\n+            },\r\n+            {\r\n+              id: 'sub2', \r\n+              name: 'Women\\'s Clothing',\r\n+              description: 'Dresses, tops, skirts, and women\\'s fashion wear',\r\n+              parent: '687fbada33f196eb765aecd2',\r\n+              parentName: 'Fashion & Clothing',\r\n+              image: null\r\n+            },\r\n+            {\r\n+              id: 'sub3',\r\n+              name: 'Smartphones',\r\n+              description: 'Latest smartphones and mobile devices',\r\n+              parent: '687fbada33f196eb765aecd3',\r\n+              parentName: 'Electronics',\r\n+              image: null\r\n+            }\r\n+          ]\r\n+        };\r\n+        \r\n+        setData(mockData);\r\n+        \r\n+        // Auto-select first category\r\n+        if (mockData.mainCategories.length > 0) {\r\n+          setSelectedMainCategory(mockData.mainCategories[0].id);\r\n+        }\r\n+        \r\n+        console.log('‚úÖ [useCategorySectionData] Mock data loaded:', mockData);\r\n+        \r\n+      } catch (err) {\r\n+        console.error('‚ùå [useCategorySectionData] Error:', err);\r\n+        setError(err.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    if (pageId && token) {\r\n+      fetchData();\r\n+    } else {\r\n+      console.warn('‚ö†Ô∏è [useCategorySectionData] Missing pageId or token:', { pageId, token: !!token });\r\n+      setLoading(false);\r\n+    }\r\n+  }, [pageId, token]);\r\n+\r\n+  const getSubcategoriesForCategory = (categoryId) => {\r\n+    return data.subcategories.filter(sub => sub.parent === categoryId);\r\n+  };\r\n+\r\n+  return {\r\n+    mainCategories: data.mainCategories,\r\n+    subcategories: data.subcategories,\r\n+    loading,\r\n+    error,\r\n+    selectedMainCategory,\r\n+    setSelectedMainCategory,\r\n+    getSubcategoriesForCategory,\r\n+    refetch: () => {\r\n+      // Trigger re-fetch if needed\r\n+      if (pageId && token) {\r\n+        setLoading(true);\r\n+        // Re-run the fetch logic\r\n+      }\r\n+    }\r\n+  };\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753456327306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { useState, useEffect } from 'react';\r\n+import CategorySectionService from '../services/categorySectionService';\r\n \r\n-// For now, let's create a simple hook that returns mock data to test the UI\r\n+// Hook for fetching category section data with real API integration\r\n export default function useCategorySectionData(pageId, token) {\r\n   const [data, setData] = useState({\r\n     mainCategories: [],\r\n     subcategories: []\r\n@@ -17,73 +18,36 @@\n         setError(null);\r\n         \r\n         console.log('üîç [useCategorySectionData] Fetching data for:', { pageId, token: !!token });\r\n         \r\n-        // For now, let's use mock data to test the UI\r\n-        // TODO: Replace with actual API call once backend is ready\r\n-        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n+        // Create service instance and fetch real data\r\n+        const categoryService = new CategorySectionService();\r\n+        const response = await categoryService.getCategorySectionConfig(pageId, token);\r\n         \r\n-        const mockData = {\r\n-          mainCategories: [\r\n-            {\r\n-              id: '687fbada33f196eb765aecd2',\r\n-              name: 'Fashion & Clothing',\r\n-              description: 'Trendy clothing and fashion accessories for all occasions',\r\n-              image: null\r\n-            },\r\n-            {\r\n-              id: '687fbada33f196eb765aecd3',\r\n-              name: 'Electronics',\r\n-              description: 'Latest gadgets and electronic devices',\r\n-              image: null\r\n-            },\r\n-            {\r\n-              id: '687fbada33f196eb765aecd4', \r\n-              name: 'Home & Living',\r\n-              description: 'Home decor, furniture, and living essentials',\r\n-              image: null\r\n-            }\r\n-          ],\r\n-          subcategories: [\r\n-            {\r\n-              id: 'sub1',\r\n-              name: 'Men\\'s Clothing',\r\n-              description: 'Shirts, pants, suits, and men\\'s fashion wear',\r\n-              parent: '687fbada33f196eb765aecd2',\r\n-              parentName: 'Fashion & Clothing',\r\n-              image: null\r\n-            },\r\n-            {\r\n-              id: 'sub2', \r\n-              name: 'Women\\'s Clothing',\r\n-              description: 'Dresses, tops, skirts, and women\\'s fashion wear',\r\n-              parent: '687fbada33f196eb765aecd2',\r\n-              parentName: 'Fashion & Clothing',\r\n-              image: null\r\n-            },\r\n-            {\r\n-              id: 'sub3',\r\n-              name: 'Smartphones',\r\n-              description: 'Latest smartphones and mobile devices',\r\n-              parent: '687fbada33f196eb765aecd3',\r\n-              parentName: 'Electronics',\r\n-              image: null\r\n-            }\r\n-          ]\r\n+        // Transform API response to match our UI format\r\n+        const transformedData = {\r\n+          mainCategories: response.data?.availableCategories || [],\r\n+          subcategories: response.data?.availableSubcategories || []\r\n         };\r\n         \r\n-        setData(mockData);\r\n+        setData(transformedData);\r\n         \r\n         // Auto-select first category\r\n-        if (mockData.mainCategories.length > 0) {\r\n-          setSelectedMainCategory(mockData.mainCategories[0].id);\r\n+        if (transformedData.mainCategories.length > 0) {\r\n+          setSelectedMainCategory(transformedData.mainCategories[0].id);\r\n         }\r\n         \r\n-        console.log('‚úÖ [useCategorySectionData] Mock data loaded:', mockData);\r\n+        console.log('‚úÖ [useCategorySectionData] Real API data loaded:', transformedData);\r\n         \r\n       } catch (err) {\r\n         console.error('‚ùå [useCategorySectionData] Error:', err);\r\n         setError(err.message);\r\n+        \r\n+        // Fallback to empty data on error\r\n+        setData({\r\n+          mainCategories: [],\r\n+          subcategories: []\r\n+        });\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n@@ -115,136 +79,5 @@\n         // Re-run the fetch logic\r\n       }\r\n     }\r\n   };\r\n-}\n-/**\r\n- * Custom hook for category section data fetching and management\r\n- */\r\n-\r\n-import { useState, useEffect } from 'react';\r\n-import categorySectionService from '@/services/categorySectionService';\r\n-\r\n-export default function useCategorySectionData(pageId, token) {\r\n-  const [data, setData] = useState({\r\n-    mainCategories: [],\r\n-    subcategories: [],\r\n-    sectionConfig: null\r\n-  });\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [selectedMainCategory, setSelectedMainCategory] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    if (!pageId || !token) {\r\n-      console.log(`‚ö†Ô∏è [useCategorySectionData] Missing required params - pageId: ${!!pageId}, token: ${!!token}`);\r\n-      setLoading(false);\r\n-      return;\r\n-    }\r\n-\r\n-    const fetchData = async () => {\r\n-      try {\r\n-        console.log(`üîÑ [useCategorySectionData] Starting data fetch for page: ${pageId}`);\r\n-        setLoading(true);\r\n-        setError(null);\r\n-\r\n-        const response = await categorySectionService.getCategorySectionConfig(pageId, token);\r\n-        \r\n-        if (response.success) {\r\n-          const { categoriesData, sectionConfig } = response.data;\r\n-          \r\n-          console.log(`‚úÖ [useCategorySectionData] Data fetched successfully:`, {\r\n-            mainCategories: categoriesData.mainCategories?.length || 0,\r\n-            subcategories: categoriesData.subcategories?.length || 0,\r\n-            sectionEnabled: sectionConfig?.enabled\r\n-          });\r\n-          \r\n-          setData({\r\n-            mainCategories: categoriesData.mainCategories || [],\r\n-            subcategories: categoriesData.subcategories || [],\r\n-            sectionConfig\r\n-          });\r\n-\r\n-          // Auto-select first main category if available\r\n-          if (categoriesData.mainCategories?.length > 0) {\r\n-            setSelectedMainCategory(categoriesData.mainCategories[0].id);\r\n-            console.log(`üéØ [useCategorySectionData] Auto-selected first category: ${categoriesData.mainCategories[0].name}`);\r\n-          }\r\n-        } else {\r\n-          console.error(`‚ùå [useCategorySectionData] API returned unsuccessful response:`, response);\r\n-          throw new Error(response.message || 'Failed to fetch data');\r\n-        }\r\n-      } catch (err) {\r\n-        console.error(`‚ùå [useCategorySectionData] Error during fetch:`, err);\r\n-        setError(err.message);\r\n-        \r\n-        // Set empty data on error\r\n-        setData({\r\n-          mainCategories: [],\r\n-          subcategories: [],\r\n-          sectionConfig: null\r\n-        });\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchData();\r\n-  }, [pageId, token]);\r\n-\r\n-  // Get subcategories for selected main category\r\n-  const getSubcategoriesForCategory = (categoryId) => {\r\n-    if (!categoryId) {\r\n-      console.log(`‚ö†Ô∏è [useCategorySectionData] No categoryId provided for subcategory lookup`);\r\n-      return [];\r\n-    }\r\n-    \r\n-    const subcategories = data.subcategories.filter(sub => sub.parent === categoryId);\r\n-    console.log(`üîç [useCategorySectionData] Found ${subcategories.length} subcategories for category: ${categoryId}`);\r\n-    return subcategories;\r\n-  };\r\n-\r\n-  // Refresh data function\r\n-  const refetch = async () => {\r\n-    if (!pageId || !token) {\r\n-      console.log(`‚ö†Ô∏è [useCategorySectionData] Cannot refetch - missing pageId or token`);\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      console.log(`üîÑ [useCategorySectionData] Manual refetch triggered`);\r\n-      setLoading(true);\r\n-      setError(null);\r\n-      \r\n-      const response = await categorySectionService.getCategorySectionConfig(pageId, token);\r\n-      \r\n-      if (response.success) {\r\n-        const { categoriesData, sectionConfig } = response.data;\r\n-        \r\n-        setData({\r\n-          mainCategories: categoriesData.mainCategories || [],\r\n-          subcategories: categoriesData.subcategories || [],\r\n-          sectionConfig\r\n-        });\r\n-\r\n-        console.log(`‚úÖ [useCategorySectionData] Refetch successful`);\r\n-      } else {\r\n-        throw new Error(response.message || 'Failed to refetch data');\r\n-      }\r\n-    } catch (err) {\r\n-      console.error(`‚ùå [useCategorySectionData] Error during refetch:`, err);\r\n-      setError(err.message);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    ...data,\r\n-    loading,\r\n-    error,\r\n-    selectedMainCategory,\r\n-    setSelectedMainCategory,\r\n-    getSubcategoriesForCategory,\r\n-    refetch\r\n-  };\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753454690895,
            "name": "Commit-0",
            "content": "/**\r\n * Custom hook for category section data fetching and management\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport categorySectionService from '@/services/categorySectionService';\r\n\r\nexport default function useCategorySectionData(pageId, token) {\r\n  const [data, setData] = useState({\r\n    mainCategories: [],\r\n    subcategories: [],\r\n    sectionConfig: null\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMainCategory, setSelectedMainCategory] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!pageId || !token) {\r\n      console.log(`‚ö†Ô∏è [useCategorySectionData] Missing required params - pageId: ${!!pageId}, token: ${!!token}`);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log(`üîÑ [useCategorySectionData] Starting data fetch for page: ${pageId}`);\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const response = await categorySectionService.getCategorySectionConfig(pageId, token);\r\n        \r\n        if (response.success) {\r\n          const { categoriesData, sectionConfig } = response.data;\r\n          \r\n          console.log(`‚úÖ [useCategorySectionData] Data fetched successfully:`, {\r\n            mainCategories: categoriesData.mainCategories?.length || 0,\r\n            subcategories: categoriesData.subcategories?.length || 0,\r\n            sectionEnabled: sectionConfig?.enabled\r\n          });\r\n          \r\n          setData({\r\n            mainCategories: categoriesData.mainCategories || [],\r\n            subcategories: categoriesData.subcategories || [],\r\n            sectionConfig\r\n          });\r\n\r\n          // Auto-select first main category if available\r\n          if (categoriesData.mainCategories?.length > 0) {\r\n            setSelectedMainCategory(categoriesData.mainCategories[0].id);\r\n            console.log(`üéØ [useCategorySectionData] Auto-selected first category: ${categoriesData.mainCategories[0].name}`);\r\n          }\r\n        } else {\r\n          console.error(`‚ùå [useCategorySectionData] API returned unsuccessful response:`, response);\r\n          throw new Error(response.message || 'Failed to fetch data');\r\n        }\r\n      } catch (err) {\r\n        console.error(`‚ùå [useCategorySectionData] Error during fetch:`, err);\r\n        setError(err.message);\r\n        \r\n        // Set empty data on error\r\n        setData({\r\n          mainCategories: [],\r\n          subcategories: [],\r\n          sectionConfig: null\r\n        });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [pageId, token]);\r\n\r\n  // Get subcategories for selected main category\r\n  const getSubcategoriesForCategory = (categoryId) => {\r\n    if (!categoryId) {\r\n      console.log(`‚ö†Ô∏è [useCategorySectionData] No categoryId provided for subcategory lookup`);\r\n      return [];\r\n    }\r\n    \r\n    const subcategories = data.subcategories.filter(sub => sub.parent === categoryId);\r\n    console.log(`üîç [useCategorySectionData] Found ${subcategories.length} subcategories for category: ${categoryId}`);\r\n    return subcategories;\r\n  };\r\n\r\n  // Refresh data function\r\n  const refetch = async () => {\r\n    if (!pageId || !token) {\r\n      console.log(`‚ö†Ô∏è [useCategorySectionData] Cannot refetch - missing pageId or token`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(`üîÑ [useCategorySectionData] Manual refetch triggered`);\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await categorySectionService.getCategorySectionConfig(pageId, token);\r\n      \r\n      if (response.success) {\r\n        const { categoriesData, sectionConfig } = response.data;\r\n        \r\n        setData({\r\n          mainCategories: categoriesData.mainCategories || [],\r\n          subcategories: categoriesData.subcategories || [],\r\n          sectionConfig\r\n        });\r\n\r\n        console.log(`‚úÖ [useCategorySectionData] Refetch successful`);\r\n      } else {\r\n        throw new Error(response.message || 'Failed to refetch data');\r\n      }\r\n    } catch (err) {\r\n      console.error(`‚ùå [useCategorySectionData] Error during refetch:`, err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...data,\r\n    loading,\r\n    error,\r\n    selectedMainCategory,\r\n    setSelectedMainCategory,\r\n    getSubcategoriesForCategory,\r\n    refetch\r\n  };\r\n}\r\n"
        }
    ]
}