{
    "sourceFile": "Ninico/hooks/useAdminAuth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753949861870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753950506373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,32 +5,54 @@\n export function useAdminAuth() {\r\n   const router = useRouter()\r\n \r\n   useEffect(() => {\r\n-    // Check for admin token\r\n-    const token = localStorage.getItem('adminToken')\r\n-    if (!token) {\r\n-      console.log('🚫 No admin token found, redirecting to login')\r\n-      router.push('/adminLogin')\r\n-      return\r\n-    }\r\n+    const validateToken = async () => {\r\n+      // Check for admin token\r\n+      const token = localStorage.getItem('adminToken')\r\n+      if (!token) {\r\n+        console.log('🚫 No admin token found, redirecting to login')\r\n+        router.push('/adminLogin')\r\n+        return\r\n+      }\r\n \r\n-    // Verify token is valid (you can add more validation here)\r\n-    try {\r\n-      // Optional: Verify token format or expiration\r\n-      const tokenData = JSON.parse(atob(token.split('.')[1]))\r\n-      const isExpired = tokenData.exp * 1000 < Date.now()\r\n-      \r\n-      if (isExpired) {\r\n-        console.log('🚫 Admin token expired, redirecting to login')\r\n+      // Verify token format without decoding\r\n+      if (!token.includes('.')) {\r\n+        console.error('❌ Invalid token format')\r\n         localStorage.removeItem('adminToken')\r\n         router.push('/adminLogin')\r\n+        return\r\n       }\r\n-    } catch (error) {\r\n-      console.error('❌ Invalid token format:', error)\r\n-      localStorage.removeItem('adminToken')\r\n-      router.push('/adminLogin')\r\n+\r\n+      try {\r\n+        // Verify token with backend\r\n+        const response = await fetch('http://localhost:5000/api/auth/verify', {\r\n+          headers: {\r\n+            'Authorization': `Bearer ${token}`\r\n+          }\r\n+        })\r\n+\r\n+        if (!response.ok) {\r\n+          console.log('🚫 Invalid or expired token')\r\n+          localStorage.removeItem('adminToken')\r\n+          router.push('/adminLogin')\r\n+          return\r\n+        }\r\n+\r\n+        const data = await response.json()\r\n+        if (!data.success || data.role !== 'admin') {\r\n+          console.log('🚫 Not an admin token')\r\n+          localStorage.removeItem('adminToken')\r\n+          router.push('/adminLogin')\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('❌ Token verification failed:', error)\r\n+        localStorage.removeItem('adminToken')\r\n+        router.push('/adminLogin')\r\n+      }\r\n     }\r\n+\r\n+    validateToken()\r\n   }, [router])\r\n \r\n   return null\r\n }\r\n"
                },
                {
                    "date": 1753961808901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,12 @@\n   const router = useRouter()\r\n \r\n   useEffect(() => {\r\n     const validateToken = async () => {\r\n+      // Temporarily disabled auth check for development\r\n+      console.log('⚠️ Auth check bypassed for development')\r\n+      return\r\n+      \r\n       // Check for admin token\r\n       const token = localStorage.getItem('adminToken')\r\n       if (!token) {\r\n         console.log('🚫 No admin token found, redirecting to login')\r\n"
                }
            ],
            "date": 1753949861870,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { useEffect } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\n\r\nexport function useAdminAuth() {\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    // Check for admin token\r\n    const token = localStorage.getItem('adminToken')\r\n    if (!token) {\r\n      console.log('🚫 No admin token found, redirecting to login')\r\n      router.push('/adminLogin')\r\n      return\r\n    }\r\n\r\n    // Verify token is valid (you can add more validation here)\r\n    try {\r\n      // Optional: Verify token format or expiration\r\n      const tokenData = JSON.parse(atob(token.split('.')[1]))\r\n      const isExpired = tokenData.exp * 1000 < Date.now()\r\n      \r\n      if (isExpired) {\r\n        console.log('🚫 Admin token expired, redirecting to login')\r\n        localStorage.removeItem('adminToken')\r\n        router.push('/adminLogin')\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Invalid token format:', error)\r\n      localStorage.removeItem('adminToken')\r\n      router.push('/adminLogin')\r\n    }\r\n  }, [router])\r\n\r\n  return null\r\n}\r\n"
        }
    ]
}