{
    "sourceFile": "Ninico/components/context/AuthContext.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752851951262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753609730859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,319 @@\n-'use client'\r\n-import { createContext, useState, useEffect } from 'react'\r\n+'use client';\r\n \r\n-const AuthContext = createContext()\r\n+import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n+import { apiService } from '../../util/apiService';\r\n \r\n+// Auth Action Types\r\n+const AUTH_ACTIONS = {\r\n+  LOGIN_START: 'LOGIN_START',\r\n+  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n+  LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n+  LOGOUT: 'LOGOUT',\r\n+  SET_USER: 'SET_USER',\r\n+  SET_LOADING: 'SET_LOADING',\r\n+  CLEAR_ERROR: 'CLEAR_ERROR'\r\n+};\r\n+\r\n+// Initial Auth State\r\n+const initialState = {\r\n+  user: null,\r\n+  token: null,\r\n+  isAuthenticated: false,\r\n+  isLoading: true,\r\n+  error: null,\r\n+  userType: null,\r\n+  role: null,\r\n+  permissions: []\r\n+};\r\n+\r\n+// Auth Reducer\r\n+const authReducer = (state, action) => {\r\n+  switch (action.type) {\r\n+    case AUTH_ACTIONS.LOGIN_START:\r\n+      return {\r\n+        ...state,\r\n+        isLoading: true,\r\n+        error: null\r\n+      };\r\n+\r\n+    case AUTH_ACTIONS.LOGIN_SUCCESS:\r\n+      return {\r\n+        ...state,\r\n+        user: action.payload.user,\r\n+        token: action.payload.token,\r\n+        isAuthenticated: true,\r\n+        isLoading: false,\r\n+        error: null,\r\n+        userType: action.payload.user.userType,\r\n+        role: action.payload.user.role,\r\n+        permissions: action.payload.permissions || []\r\n+      };\r\n+\r\n+    case AUTH_ACTIONS.LOGIN_FAILURE:\r\n+      return {\r\n+        ...state,\r\n+        user: null,\r\n+        token: null,\r\n+        isAuthenticated: false,\r\n+        isLoading: false,\r\n+        error: action.payload,\r\n+        userType: null,\r\n+        role: null,\r\n+        permissions: []\r\n+      };\r\n+\r\n+    case AUTH_ACTIONS.LOGOUT:\r\n+      return {\r\n+        ...initialState,\r\n+        isLoading: false\r\n+      };\r\n+\r\n+    case AUTH_ACTIONS.SET_USER:\r\n+      return {\r\n+        ...state,\r\n+        user: action.payload,\r\n+        isAuthenticated: !!action.payload,\r\n+        userType: action.payload?.userType || null,\r\n+        role: action.payload?.role || null\r\n+      };\r\n+\r\n+    case AUTH_ACTIONS.SET_LOADING:\r\n+      return {\r\n+        ...state,\r\n+        isLoading: action.payload\r\n+      };\r\n+\r\n+    case AUTH_ACTIONS.CLEAR_ERROR:\r\n+      return {\r\n+        ...state,\r\n+        error: null\r\n+      };\r\n+\r\n+    default:\r\n+      return state;\r\n+  }\r\n+};\r\n+\r\n+// Role-based permissions mapping\r\n+const ROLE_PERMISSIONS = {\r\n+  user: [\r\n+    'profile.read',\r\n+    'profile.update',\r\n+    'orders.read',\r\n+    'orders.create',\r\n+    'cart.manage',\r\n+    'wishlist.manage'\r\n+  ],\r\n+  corporate: [\r\n+    'profile.read',\r\n+    'profile.update',\r\n+    'orders.read',\r\n+    'orders.create',\r\n+    'orders.bulk',\r\n+    'cart.manage',\r\n+    'company.manage'\r\n+  ],\r\n+  admin: [\r\n+    'admin.dashboard',\r\n+    'users.read',\r\n+    'users.write',\r\n+    'products.read',\r\n+    'products.write',\r\n+    'orders.read',\r\n+    'orders.write',\r\n+    'categories.manage',\r\n+    'content.manage'\r\n+  ],\r\n+  superadmin: ['*'] // All permissions\r\n+};\r\n+\r\n+// Create Auth Context\r\n+const AuthContext = createContext();\r\n+\r\n+// Auth Provider Component\r\n export const AuthProvider = ({ children }) => {\r\n-  const [user, setUser] = useState(null)\r\n-  const [loading, setLoading] = useState(true)\r\n+  const [state, dispatch] = useReducer(authReducer, initialState);\r\n \r\n+  // Initialize auth on app load\r\n   useEffect(() => {\r\n-    const user = localStorage.getItem('user')\r\n-    if (user) {\r\n-      setUser(JSON.parse(user))\r\n+    initializeAuth();\r\n+  }, []);\r\n+\r\n+  const initializeAuth = async () => {\r\n+    try {\r\n+      console.log('🔄 [AuthContext] Initializing authentication...');\r\n+      \r\n+      const token = localStorage.getItem('token');\r\n+      const userData = localStorage.getItem('user');\r\n+\r\n+      if (token && userData) {\r\n+        const user = JSON.parse(userData);\r\n+        const permissions = ROLE_PERMISSIONS[user.role] || [];\r\n+        \r\n+        dispatch({\r\n+          type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n+          payload: { user, token, permissions }\r\n+        });\r\n+        \r\n+        console.log('✅ [AuthContext] Auth initialized from localStorage');\r\n+      } else {\r\n+        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n+        console.log('🔍 [AuthContext] No stored auth found');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('❌ [AuthContext] Auth initialization error:', error);\r\n+      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n     }\r\n-    setLoading(false) // done loading\r\n-  }, [])\r\n+  };\r\n \r\n-  const login = (userData) => {\r\n-    setUser(userData)\r\n-    localStorage.setItem('user', JSON.stringify(userData))\r\n-  }\r\n+  // Login function\r\n+  const login = async (credentials) => {\r\n+    try {\r\n+      console.log('🔄 [AuthContext] Starting login process...');\r\n+      dispatch({ type: AUTH_ACTIONS.LOGIN_START });\r\n \r\n+      const response = await apiService.post('/auth/login', credentials);\r\n+      \r\n+      if (response.success) {\r\n+        const { token, user } = response.data;\r\n+        const permissions = ROLE_PERMISSIONS[user.role] || [];\r\n+\r\n+        // Store in localStorage\r\n+        localStorage.setItem('token', token);\r\n+        localStorage.setItem('user', JSON.stringify(user));\r\n+\r\n+        dispatch({\r\n+          type: AUTH_ACTIONS.LOGIN_SUCCESS,\r\n+          payload: { user, token, permissions }\r\n+        });\r\n+\r\n+        console.log('✅ [AuthContext] Login successful:', user.userType);\r\n+        return { success: true, user };\r\n+      } else {\r\n+        throw new Error(response.error || 'Login failed');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('❌ [AuthContext] Login error:', error.message);\r\n+      dispatch({\r\n+        type: AUTH_ACTIONS.LOGIN_FAILURE,\r\n+        payload: error.message\r\n+      });\r\n+      return { success: false, error: error.message };\r\n+    }\r\n+  };\r\n+\r\n+  // Logout function\r\n   const logout = () => {\r\n-    setUser(null)\r\n-    localStorage.removeItem('user')\r\n-  }\r\n+    console.log('🔄 [AuthContext] Logging out...');\r\n+    \r\n+    // Clear localStorage\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('user');\r\n+    \r\n+    dispatch({ type: AUTH_ACTIONS.LOGOUT });\r\n+    \r\n+    console.log('✅ [AuthContext] Logout successful');\r\n+  };\r\n \r\n+  // Register function\r\n+  const register = async (userData) => {\r\n+    try {\r\n+      console.log('🔄 [AuthContext] Starting registration...');\r\n+      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true });\r\n+\r\n+      const response = await apiService.post('/auth/signup', userData);\r\n+      \r\n+      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n+      \r\n+      if (response.success) {\r\n+        console.log('✅ [AuthContext] Registration successful');\r\n+        return { success: true, message: response.message };\r\n+      } else {\r\n+        throw new Error(response.error || 'Registration failed');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('❌ [AuthContext] Registration error:', error.message);\r\n+      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false });\r\n+      return { success: false, error: error.message };\r\n+    }\r\n+  };\r\n+\r\n+  // Permission check function\r\n+  const hasPermission = (permission) => {\r\n+    if (!state.isAuthenticated || !state.permissions) return false;\r\n+    \r\n+    // SuperAdmin has all permissions\r\n+    if (state.permissions.includes('*')) return true;\r\n+    \r\n+    // Check specific permission\r\n+    return state.permissions.includes(permission);\r\n+  };\r\n+\r\n+  // Role check function\r\n+  const hasRole = (roles) => {\r\n+    if (!state.isAuthenticated || !state.role) return false;\r\n+    \r\n+    const roleArray = Array.isArray(roles) ? roles : [roles];\r\n+    return roleArray.includes(state.role);\r\n+  };\r\n+\r\n+  // Check if user is admin (admin or superadmin)\r\n+  const isAdmin = () => {\r\n+    return hasRole(['admin', 'superadmin']);\r\n+  };\r\n+\r\n+  // Check if user is corporate\r\n+  const isCorporate = () => {\r\n+    return state.userType === 'Corporate' || hasRole('corporate');\r\n+  };\r\n+\r\n+  // Clear error function\r\n+  const clearError = () => {\r\n+    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR });\r\n+  };\r\n+\r\n+  // Context value\r\n+  const value = {\r\n+    // State\r\n+    ...state,\r\n+    loading: state.isLoading, // Backward compatibility\r\n+    \r\n+    // Actions\r\n+    login,\r\n+    logout,\r\n+    register,\r\n+    clearError,\r\n+    \r\n+    // Utility functions\r\n+    hasPermission,\r\n+    hasRole,\r\n+    isAdmin,\r\n+    isCorporate,\r\n+    \r\n+    // User type checks\r\n+    isCustomer: () => state.userType === 'Customer',\r\n+    isIndividual: () => state.userType === 'Customer',\r\n+    \r\n+    // Quick access to user info\r\n+    userName: state.user?.name || '',\r\n+    userEmail: state.user?.email || '',\r\n+    userPhone: state.user?.phone || ''\r\n+  };\r\n+\r\n   return (\r\n-    <AuthContext.Provider value={{ user, login, logout, loading }}>\r\n+    <AuthContext.Provider value={value}>\r\n       {children}\r\n     </AuthContext.Provider>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n-export default AuthContext\r\n+// Custom hook to use auth context\r\n+export const useAuth = () => {\r\n+  const context = useContext(AuthContext);\r\n+  if (!context) {\r\n+    throw new Error('useAuth must be used within an AuthProvider');\r\n+  }\r\n+  return context;\r\n+};\r\n+\r\n+export default AuthContext;\r\n"
                },
                {
                    "date": 1753636887716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n \r\n   // Logout function\r\n   const logout = () => {\r\n     try {\r\n-      console.log('� [AuthContext] Logging out user...');\r\n+      console.log('\udeaa [AuthContext] Logging out user...');\r\n       \r\n       // Clear localStorage\r\n       localStorage.removeItem('token');\r\n       localStorage.removeItem('user');\r\n"
                }
            ],
            "date": 1752851951262,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { createContext, useState, useEffect } from 'react'\r\n\r\nconst AuthContext = createContext()\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const user = localStorage.getItem('user')\r\n    if (user) {\r\n      setUser(JSON.parse(user))\r\n    }\r\n    setLoading(false) // done loading\r\n  }, [])\r\n\r\n  const login = (userData) => {\r\n    setUser(userData)\r\n    localStorage.setItem('user', JSON.stringify(userData))\r\n  }\r\n\r\n  const logout = () => {\r\n    setUser(null)\r\n    localStorage.removeItem('user')\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default AuthContext\r\n"
        }
    ]
}