{
    "sourceFile": "Ninico/components/shop/CorporateAwareFilterShopBox.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753640931589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753640931589,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { addCart } from \"@/features/shopSlice\"\r\nimport { addWishlist } from \"@/features/wishlistSlice\"\r\nimport { Fragment, useContext } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport products from \"../../data/products\"\r\nimport AuthContext from '@/components/context/AuthContext'\r\nimport {\r\n    addPerPage,\r\n    addSort,\r\n    addprice,\r\n    clearBrand,\r\n    clearCategory,\r\n    clearColor,\r\n} from \"../../features/filterSlice\"\r\nimport {\r\n    clearBrandToggle,\r\n    clearCategoryToggle,\r\n    clearColorToggle,\r\n} from \"../../features/productSlice\"\r\nimport ShopCard from \"./ShopCard\"\r\nimport EnhancedShopCard from \"./EnhancedShopCard\"\r\n\r\nconst CorporateAwareFilterShopBox = ({ itemStart, itemEnd, useCorporateCard = false }) => {\r\n    const { shopList, shopSort } = useSelector((state) => state.filter)\r\n    const { user } = useContext(AuthContext)\r\n    \r\n    const {\r\n        price,\r\n        category,\r\n        color,\r\n        brand,\r\n    } = shopList || {}\r\n\r\n    const { sort, perPage } = shopSort\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addToCart = (id) => {\r\n        const item = products?.find((item) => item.id === id)\r\n        dispatch(addCart({ product: item }))\r\n    }\r\n\r\n    const addToWishlist = (id) => {\r\n        const item = products?.find((item) => item.id === id)\r\n        dispatch(addWishlist({ product: item }))\r\n    }\r\n\r\n    // Enhanced products with corporate pricing (sample data for demo)\r\n    const enhanceProductsWithCorporatePricing = (products) => {\r\n        return products.map(product => ({\r\n            ...product,\r\n            retailPrice: {\r\n                mrp: (product.price?.max * 100) * 1.2 || 0,\r\n                sellingPrice: product.price?.max * 100 || 0,\r\n                discount: Math.floor(Math.random() * 20), // Random discount for demo\r\n                currency: 'INR'\r\n            },\r\n            corporatePricing: Math.random() > 0.5 ? {\r\n                enabled: true,\r\n                minimumOrderQuantity: Math.floor(Math.random() * 50) + 10,\r\n                priceTiers: [\r\n                    {\r\n                        minQuantity: 10,\r\n                        maxQuantity: 49,\r\n                        pricePerUnit: (product.price?.max * 100) * 0.9,\r\n                        discount: 10,\r\n                        description: \"Small bulk discount\"\r\n                    },\r\n                    {\r\n                        minQuantity: 50,\r\n                        maxQuantity: 99,\r\n                        pricePerUnit: (product.price?.max * 100) * 0.8,\r\n                        discount: 20,\r\n                        description: \"Medium bulk discount\"\r\n                    },\r\n                    {\r\n                        minQuantity: 100,\r\n                        maxQuantity: null,\r\n                        pricePerUnit: (product.price?.max * 100) * 0.7,\r\n                        discount: 30,\r\n                        description: \"Large bulk discount\"\r\n                    }\r\n                ]\r\n            } : { enabled: false }\r\n        }))\r\n    }\r\n\r\n    // Existing filter functions\r\n    const priceFilter = (item) =>\r\n        item?.price?.min >= price?.min && item?.price?.max <= price?.max\r\n\r\n    const categoryFilter = (item) =>\r\n        category?.length !== 0 && item?.category !== undefined ? \r\n        category?.includes(item?.category[0]?.type.toLocaleLowerCase().split(\" \").join(\"-\")) : item\r\n\r\n    const colorFilter = (item) =>\r\n        color?.length !== 0 && item?.color !== undefined ? \r\n        color?.includes(item?.color[0]?.type.toLocaleLowerCase().split(\" \").join(\"-\")) : item\r\n\r\n    const brandFilter = (item) =>\r\n        brand?.length !== 0 && item?.brand !== undefined ? \r\n        brand?.includes(item?.brand[0]?.type.toLocaleLowerCase().split(\" \").join(\"-\")) : item\r\n\r\n    const sortFilter = (a, b) =>\r\n        sort === \"des\" ? a.id > b.id && -1 : a.id < b.id && -1\r\n\r\n    // Determine which products to show and which card component to use\r\n    const productsToShow = useCorporateCard ? enhanceProductsWithCorporatePricing(products) : products\r\n    const CardComponent = useCorporateCard ? EnhancedShopCard : ShopCard\r\n\r\n    let content = productsToShow.slice(itemStart, itemEnd)\r\n        ?.filter(priceFilter)\r\n        ?.filter(categoryFilter)\r\n        ?.filter(colorFilter)\r\n        ?.filter(brandFilter)\r\n        ?.sort(sortFilter)\r\n        .slice(perPage.start, perPage.end !== 0 ? perPage.end : 10)\r\n        ?.map((item, i) => (\r\n            <Fragment key={i}>\r\n                <CardComponent \r\n                    item={item} \r\n                    addToCart={addToCart} \r\n                    addToWishlist={addToWishlist} \r\n                />\r\n            </Fragment>\r\n        ))\r\n\r\n    return content\r\n}\r\n\r\nexport default CorporateAwareFilterShopBox\r\n"
        }
    ]
}