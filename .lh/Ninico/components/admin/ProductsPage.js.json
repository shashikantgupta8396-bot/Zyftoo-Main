{
    "sourceFile": "Ninico/components/admin/ProductsPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752833729951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753114023113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n 'use client'\r\n import { useState, useEffect } from 'react'\r\n import { get, del } from '@/util/apiService'\r\n-import { PRODUCT } from '@/util/apiEndpoints'\r\n+import { PRODUCT, CATEGORY } from '@/util/apiEndpoints'\r\n \r\n export default function ProductsPage({ onNavigate }) {\r\n   const [Products, setProducts] = useState([])\r\n   const [filteredProducts, setFilteredProducts] = useState([])\r\n+  const [categories, setCategories] = useState([]) // Add categories state\r\n   const [loading, setLoading] = useState(true)\r\n   const [error, setError] = useState('')\r\n   const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n   const [productToDelete, setProductToDelete] = useState(null)\r\n@@ -21,33 +22,50 @@\n     priceRange: ''\r\n   })\r\n \r\n   useEffect(() => {\r\n-    async function fetchProducts() {\r\n+    async function fetchData() {\r\n       setLoading(true)\r\n       setError('')\r\n       try {\r\n-        console.log('Fetching products from API...')\r\n-        const response = await get(PRODUCT.GET_ALL)\r\n-        console.log('Response:', response)\r\n+        console.log('Fetching products and categories from API...')\r\n         \r\n-        if (!response.success) throw new Error(response.message || 'Failed to fetch Products')\r\n+        // Fetch products and categories in parallel\r\n+        const [productsResponse, categoriesResponse] = await Promise.all([\r\n+          get(PRODUCT.GET_ALL),\r\n+          get(CATEGORY.GET_ALL)\r\n+        ])\r\n         \r\n-        console.log('Fetched products data:', response.data)\r\n-        console.log('First product:', response.data.products?.[0] || response.data[0])\r\n-        console.log('First product categories:', response.data.products?.[0]?.categories || response.data[0]?.categories)\r\n+        console.log('Products Response:', productsResponse)\r\n+        console.log('Categories Response:', categoriesResponse)\r\n         \r\n-        // If API returns { products: [...] } use data.products, else fallback to array\r\n-        const productsArray = Array.isArray(response.data) ? response.data : (response.data.products || [])\r\n+        if (!productsResponse.success) throw new Error(productsResponse.message || 'Failed to fetch Products')\r\n+        \r\n+        // Handle products\r\n+        const productsArray = Array.isArray(productsResponse.data) ? productsResponse.data : (productsResponse.data.products || [])\r\n         setProducts(productsArray)\r\n         setFilteredProducts(productsArray)\r\n+        \r\n+        // Handle categories\r\n+        if (categoriesResponse.success) {\r\n+          const categoriesArray = Array.isArray(categoriesResponse.data) ? categoriesResponse.data : (categoriesResponse.data.categories || [])\r\n+          setCategories(categoriesArray)\r\n+          console.log('Fetched categories:', categoriesArray)\r\n+        } else {\r\n+          console.warn('Failed to fetch categories:', categoriesResponse.message)\r\n+          setCategories([]) // Set empty array if categories fail to load\r\n+        }\r\n+        \r\n+        console.log('First product categories:', productsArray[0]?.categories)\r\n+        \r\n       } catch (err) {\r\n+        console.error('Fetch error:', err)\r\n         setError(err.message)\r\n       } finally {\r\n         setLoading(false)\r\n       }\r\n     }\r\n-    fetchProducts()\r\n+    fetchData()\r\n   }, [])\r\n \r\n   // Filter products based on current filter state\r\n   useEffect(() => {\r\n@@ -68,10 +86,15 @@\n       filtered = filtered.filter(product => {\r\n         if (!product.categories || !Array.isArray(product.categories)) return false\r\n         return product.categories.some(cat => {\r\n           if (typeof cat === 'object' && cat.name) {\r\n+            // Handle populated category objects\r\n             const hierarchicalName = getHierarchicalCategoryName(cat)\r\n-            return hierarchicalName.toLowerCase().includes(filters.category.toLowerCase())\r\n+            return hierarchicalName === filters.category\r\n+          } else if (typeof cat === 'string') {\r\n+            // Handle ObjectId strings - map to full name\r\n+            const fullName = getFullCategoryName(cat)\r\n+            return fullName === filters.category\r\n           }\r\n           return false\r\n         })\r\n       })\r\n@@ -173,23 +196,59 @@\n       alert('Failed to delete product: ' + err.message)\r\n     }\r\n   }\r\n \r\n+  // Helper function to get category by ID\r\n+  const getCategoryById = (categoryId) => {\r\n+    if (!categoryId || !categories.length) return null\r\n+    return categories.find(cat => cat._id === categoryId)\r\n+  }\r\n+\r\n+  // Helper function to get full category name with parent\r\n+  const getFullCategoryName = (categoryId) => {\r\n+    if (!categoryId) return 'Unknown Category'\r\n+    \r\n+    const category = getCategoryById(categoryId)\r\n+    if (!category) return `Unknown Category (${categoryId?.substring(0, 8)}...)`\r\n+    \r\n+    let name = category.name\r\n+    if (category.parent) {\r\n+      const parentCategory = getCategoryById(category.parent)\r\n+      if (parentCategory) {\r\n+        name = `${parentCategory.name} > ${category.name}`\r\n+      }\r\n+    }\r\n+    return name\r\n+  }\r\n+\r\n   // Get unique categories for filter dropdown\r\n   const getUniqueCategories = () => {\r\n-    const categories = new Set()\r\n+    const categoryNames = new Set()\r\n+    \r\n+    // Debug: log first few products to see category structure\r\n+    if (Products.length > 0) {\r\n+      console.log('First product categories:', Products[0]?.categories)\r\n+      console.log('Available categories for mapping:', categories)\r\n+    }\r\n+    \r\n     Products.forEach(product => {\r\n       if (product.categories && Array.isArray(product.categories)) {\r\n         product.categories.forEach(cat => {\r\n-          if (cat && typeof cat === 'object' && cat.name) {\r\n-            // Build hierarchical name\r\n+          if (typeof cat === 'object' && cat.name) {\r\n+            // Already populated category object\r\n             const hierarchicalName = getHierarchicalCategoryName(cat)\r\n-            categories.add(hierarchicalName)\r\n+            categoryNames.add(hierarchicalName)\r\n+          } else if (typeof cat === 'string') {\r\n+            // Category ID - map to full name\r\n+            const fullName = getFullCategoryName(cat)\r\n+            categoryNames.add(fullName)\r\n           }\r\n         })\r\n       }\r\n     })\r\n-    return Array.from(categories).sort()\r\n+    \r\n+    console.log('Unique categories found:', Array.from(categoryNames))\r\n+    return Array.from(categoryNames).sort()\r\n   }\r\n \r\n   // Build hierarchical category name (Parent > Child)\r\n   const getHierarchicalCategoryName = (category) => {\r\n@@ -207,14 +266,14 @@\n     if (!categories || categories.length === 0) return 'Uncategorized'\r\n     \r\n     return categories.map(cat => {\r\n       if (typeof cat === 'string') {\r\n-        // If it's just an ObjectId string, show truncated ID\r\n-        return cat.substring(0, 8) + '...'\r\n+        // Category ID - map to full name\r\n+        return getFullCategoryName(cat)\r\n       }\r\n       if (typeof cat === 'object' && cat.name) {\r\n-        // Just show the category name\r\n-        return cat.name\r\n+        // Already populated - use hierarchical name\r\n+        return getHierarchicalCategoryName(cat)\r\n       }\r\n       return 'Unknown Category'\r\n     }).join(', ')\r\n   }\r\n"
                },
                {
                    "date": 1753114241238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,12 @@\n           } else if (typeof cat === 'string') {\r\n             // Handle ObjectId strings - map to full name\r\n             const fullName = getFullCategoryName(cat)\r\n             return fullName === filters.category\r\n+          } else if (typeof cat === 'object' && cat.$oid) {\r\n+            // Handle MongoDB ObjectId objects - map to full name\r\n+            const fullName = getFullCategoryName(cat)\r\n+            return fullName === filters.category\r\n           }\r\n           return false\r\n         })\r\n       })\r\n@@ -196,20 +200,39 @@\n       alert('Failed to delete product: ' + err.message)\r\n     }\r\n   }\r\n \r\n+  // Helper function to extract ObjectId string from MongoDB ObjectId object\r\n+  const getObjectIdString = (obj) => {\r\n+    if (typeof obj === 'string') return obj\r\n+    if (typeof obj === 'object' && obj.$oid) return obj.$oid\r\n+    if (typeof obj === 'object' && obj._id) return obj._id\r\n+    return null\r\n+  }\r\n+\r\n   // Helper function to get category by ID\r\n   const getCategoryById = (categoryId) => {\r\n     if (!categoryId || !categories.length) return null\r\n-    return categories.find(cat => cat._id === categoryId)\r\n+    \r\n+    // Extract actual ID string from ObjectId object if needed\r\n+    const idString = getObjectIdString(categoryId)\r\n+    if (!idString) return null\r\n+    \r\n+    return categories.find(cat => {\r\n+      const catId = getObjectIdString(cat._id)\r\n+      return catId === idString\r\n+    })\r\n   }\r\n \r\n   // Helper function to get full category name with parent\r\n   const getFullCategoryName = (categoryId) => {\r\n     if (!categoryId) return 'Unknown Category'\r\n     \r\n     const category = getCategoryById(categoryId)\r\n-    if (!category) return `Unknown Category (${categoryId?.substring(0, 8)}...)`\r\n+    if (!category) {\r\n+      const idString = getObjectIdString(categoryId)\r\n+      return `Unknown Category (${idString?.substring(0, 8)}...)`\r\n+    }\r\n     \r\n     let name = category.name\r\n     if (category.parent) {\r\n       const parentCategory = getCategoryById(category.parent)\r\n@@ -226,9 +249,23 @@\n     \r\n     // Debug: log first few products to see category structure\r\n     if (Products.length > 0) {\r\n       console.log('First product categories:', Products[0]?.categories)\r\n+      console.log('Category structure:', Products[0]?.categories?.[0])\r\n       console.log('Available categories for mapping:', categories)\r\n+      \r\n+      // Test a specific product with categories\r\n+      const productWithCategories = Products.find(p => p.categories && p.categories.length > 0)\r\n+      if (productWithCategories) {\r\n+        console.log('Product with categories:', productWithCategories.name)\r\n+        console.log('Its categories:', productWithCategories.categories)\r\n+        console.log('First category type:', typeof productWithCategories.categories[0])\r\n+        console.log('First category:', productWithCategories.categories[0])\r\n+        \r\n+        // Test the mapping function\r\n+        const testMapping = getFullCategoryName(productWithCategories.categories[0])\r\n+        console.log('Test mapping result:', testMapping)\r\n+      }\r\n     }\r\n     \r\n     Products.forEach(product => {\r\n       if (product.categories && Array.isArray(product.categories)) {\r\n@@ -237,11 +274,15 @@\n             // Already populated category object\r\n             const hierarchicalName = getHierarchicalCategoryName(cat)\r\n             categoryNames.add(hierarchicalName)\r\n           } else if (typeof cat === 'string') {\r\n-            // Category ID - map to full name\r\n+            // Category ID string - map to full name\r\n             const fullName = getFullCategoryName(cat)\r\n             categoryNames.add(fullName)\r\n+          } else if (typeof cat === 'object' && cat.$oid) {\r\n+            // MongoDB ObjectId object - map to full name\r\n+            const fullName = getFullCategoryName(cat)\r\n+            categoryNames.add(fullName)\r\n           }\r\n         })\r\n       }\r\n     })\r\n@@ -266,15 +307,19 @@\n     if (!categories || categories.length === 0) return 'Uncategorized'\r\n     \r\n     return categories.map(cat => {\r\n       if (typeof cat === 'string') {\r\n-        // Category ID - map to full name\r\n+        // Category ID string - map to full name\r\n         return getFullCategoryName(cat)\r\n       }\r\n       if (typeof cat === 'object' && cat.name) {\r\n         // Already populated - use hierarchical name\r\n         return getHierarchicalCategoryName(cat)\r\n       }\r\n+      if (typeof cat === 'object' && cat.$oid) {\r\n+        // MongoDB ObjectId object - map to full name\r\n+        return getFullCategoryName(cat)\r\n+      }\r\n       return 'Unknown Category'\r\n     }).join(', ')\r\n   }\r\n \r\n"
                },
                {
                    "date": 1753722023590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -793,8 +793,88 @@\n                       <div className=\"col-sm-8\">\r\n                         {formatCategoriesForDisplay(selectedProduct.categories)}\r\n                       </div>\r\n                     </div>\r\n+                    \r\n+                    {/* New Enhanced Fields */}\r\n+                    {selectedProduct.rating > 0 && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Rating:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          <span className=\"text-warning\">\r\n+                            {'⭐'.repeat(Math.floor(selectedProduct.rating))}\r\n+                          </span>\r\n+                          <span className=\"ms-1\">\r\n+                            {selectedProduct.rating}/5 ({selectedProduct.numReviews || 0} reviews)\r\n+                          </span>\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {selectedProduct.hasActiveCorporatePricing && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Corporate Pricing:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          <span className=\"badge bg-info\">Available</span>\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {selectedProduct.is_corporate_only && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Access:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          <span className=\"badge bg-warning\">Corporate Only</span>\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Product Flags */}\r\n+                    {(selectedProduct.is_featured || selectedProduct.is_popular || selectedProduct.is_trending) && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Flags:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          {selectedProduct.is_featured && <span className=\"badge bg-warning me-1\">Featured</span>}\r\n+                          {selectedProduct.is_popular && <span className=\"badge bg-success me-1\">Popular</span>}\r\n+                          {selectedProduct.is_trending && <span className=\"badge bg-primary me-1\">Trending</span>}\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Business Features */}\r\n+                    {(selectedProduct.safe_checkout || selectedProduct.secure_checkout || selectedProduct.social_share) && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Features:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          {selectedProduct.safe_checkout && <span className=\"badge bg-light text-dark me-1\">Safe Checkout</span>}\r\n+                          {selectedProduct.secure_checkout && <span className=\"badge bg-light text-dark me-1\">Secure</span>}\r\n+                          {selectedProduct.social_share && <span className=\"badge bg-light text-dark me-1\">Social Share</span>}\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {/* Analytics (if available) */}\r\n+                    {selectedProduct.analytics?.views?.total > 0 && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Views:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          <span className=\"badge bg-secondary\">\r\n+                            {selectedProduct.analytics.views.total} total views\r\n+                          </span>\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n+\r\n+                    {selectedProduct.sales_count > 0 && (\r\n+                      <div className=\"row mb-2\">\r\n+                        <div className=\"col-sm-4\"><strong>Sales:</strong></div>\r\n+                        <div className=\"col-sm-8\">\r\n+                          <span className=\"badge bg-success\">\r\n+                            {selectedProduct.sales_count} sold\r\n+                          </span>\r\n+                        </div>\r\n+                      </div>\r\n+                    )}\r\n                   </div>\r\n                 </div>\r\n                 \r\n                 {selectedProduct.description && (\r\n"
                },
                {
                    "date": 1753728944321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         console.log('Fetching products and categories from API...')\r\n         \r\n         // Fetch products and categories in parallel\r\n         const [productsResponse, categoriesResponse] = await Promise.all([\r\n-          get(PRODUCT.GET_ALL),\r\n+          get(PRODUCT.GET_ALL, { adminView: 'true', limit: 100 }), // Add admin parameters\r\n           get(CATEGORY.GET_ALL)\r\n         ])\r\n         \r\n         console.log('Products Response:', productsResponse)\r\n"
                },
                {
                    "date": 1753729761131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n 'use client'\r\n import { useState, useEffect } from 'react'\r\n import { get, del } from '@/util/apiService'\r\n-import { PRODUCT, CATEGORY } from '@/util/apiEndpoints'\r\n+import { ADMIN_PRODUCT, ADMIN_CATEGORY } from '@/util/apiEndpoints'\r\n \r\n export default function ProductsPage({ onNavigate }) {\r\n   const [Products, setProducts] = useState([])\r\n   const [filteredProducts, setFilteredProducts] = useState([])\r\n@@ -30,10 +30,10 @@\n         console.log('Fetching products and categories from API...')\r\n         \r\n         // Fetch products and categories in parallel\r\n         const [productsResponse, categoriesResponse] = await Promise.all([\r\n-          get(PRODUCT.GET_ALL, { adminView: 'true', limit: 100 }), // Add admin parameters\r\n-          get(CATEGORY.GET_ALL)\r\n+          get(ADMIN_PRODUCT.GET_ALL, { limit: 100 }), // Use admin endpoint, remove adminView since it's already admin route\r\n+          get(ADMIN_CATEGORY.GET_ALL)\r\n         ])\r\n         \r\n         console.log('Products Response:', productsResponse)\r\n         console.log('Categories Response:', categoriesResponse)\r\n@@ -181,9 +181,9 @@\n   const confirmDelete = async () => {\r\n     if (!productToDelete) return\r\n \r\n     try {\r\n-      const response = await del(`${PRODUCT.DELETE}/${productToDelete._id}`)\r\n+      const response = await del(`${ADMIN_PRODUCT.DELETE}/${productToDelete._id}`)\r\n \r\n       if (!response.success) {\r\n         throw new Error(response.message || 'Failed to delete product')\r\n       }\r\n"
                }
            ],
            "date": 1752833729951,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { useState, useEffect } from 'react'\r\nimport { get, del } from '@/util/apiService'\r\nimport { PRODUCT } from '@/util/apiEndpoints'\r\n\r\nexport default function ProductsPage({ onNavigate }) {\r\n  const [Products, setProducts] = useState([])\r\n  const [filteredProducts, setFilteredProducts] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState('')\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n  const [productToDelete, setProductToDelete] = useState(null)\r\n  const [showViewModal, setShowViewModal] = useState(false)\r\n  const [selectedProduct, setSelectedProduct] = useState(null)\r\n  \r\n  // Filter states\r\n  const [filters, setFilters] = useState({\r\n    search: '',\r\n    category: '',\r\n    status: '',\r\n    priceRange: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    async function fetchProducts() {\r\n      setLoading(true)\r\n      setError('')\r\n      try {\r\n        console.log('Fetching products from API...')\r\n        const response = await get(PRODUCT.GET_ALL)\r\n        console.log('Response:', response)\r\n        \r\n        if (!response.success) throw new Error(response.message || 'Failed to fetch Products')\r\n        \r\n        console.log('Fetched products data:', response.data)\r\n        console.log('First product:', response.data.products?.[0] || response.data[0])\r\n        console.log('First product categories:', response.data.products?.[0]?.categories || response.data[0]?.categories)\r\n        \r\n        // If API returns { products: [...] } use data.products, else fallback to array\r\n        const productsArray = Array.isArray(response.data) ? response.data : (response.data.products || [])\r\n        setProducts(productsArray)\r\n        setFilteredProducts(productsArray)\r\n      } catch (err) {\r\n        setError(err.message)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n    fetchProducts()\r\n  }, [])\r\n\r\n  // Filter products based on current filter state\r\n  useEffect(() => {\r\n    let filtered = [...Products]\r\n\r\n    // Search filter\r\n    if (filters.search) {\r\n      const searchLower = filters.search.toLowerCase()\r\n      filtered = filtered.filter(product => \r\n        product.name?.toLowerCase().includes(searchLower) ||\r\n        product.sku?.toLowerCase().includes(searchLower) ||\r\n        product.short_description?.toLowerCase().includes(searchLower)\r\n      )\r\n    }\r\n\r\n    // Category filter\r\n    if (filters.category && filters.category !== 'all') {\r\n      filtered = filtered.filter(product => {\r\n        if (!product.categories || !Array.isArray(product.categories)) return false\r\n        return product.categories.some(cat => {\r\n          if (typeof cat === 'object' && cat.name) {\r\n            const hierarchicalName = getHierarchicalCategoryName(cat)\r\n            return hierarchicalName.toLowerCase().includes(filters.category.toLowerCase())\r\n          }\r\n          return false\r\n        })\r\n      })\r\n    }\r\n\r\n    // Status filter\r\n    if (filters.status && filters.status !== 'all') {\r\n      filtered = filtered.filter(product => {\r\n        switch (filters.status) {\r\n          case 'published':\r\n            return product.status === true\r\n          case 'draft':\r\n            return product.status === false\r\n          case 'out-of-stock':\r\n            return (product.quantity || 0) === 0\r\n          default:\r\n            return true\r\n        }\r\n      })\r\n    }\r\n\r\n    // Price range filter\r\n    if (filters.priceRange && filters.priceRange !== 'all') {\r\n      filtered = filtered.filter(product => {\r\n        const price = parseFloat(product.price) || 0\r\n        switch (filters.priceRange) {\r\n          case 'low':\r\n            return price >= 0 && price <= 2000\r\n          case 'medium':\r\n            return price > 2000 && price <= 10000\r\n          case 'high':\r\n            return price > 10000\r\n          default:\r\n            return true\r\n        }\r\n      })\r\n    }\r\n\r\n    setFilteredProducts(filtered)\r\n  }, [Products, filters])\r\n\r\n  // Handle filter changes\r\n  const handleFilterChange = (filterType, value) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [filterType]: value\r\n    }))\r\n  }\r\n\r\n  // Reset filters\r\n  const resetFilters = () => {\r\n    setFilters({\r\n      search: '',\r\n      category: '',\r\n      status: '',\r\n      priceRange: ''\r\n    })\r\n  }\r\n\r\n  // Handle Edit Product\r\n  const handleEdit = (product) => {\r\n    // Store product data for editing\r\n    localStorage.setItem('editProduct', JSON.stringify(product))\r\n    onNavigate && onNavigate('edit-product')\r\n  }\r\n\r\n  // Handle View Product\r\n  const handleView = (product) => {\r\n    setSelectedProduct(product)\r\n    setShowViewModal(true)\r\n  }\r\n\r\n  // Handle Delete Product\r\n  const handleDelete = (product) => {\r\n    setProductToDelete(product)\r\n    setShowDeleteModal(true)\r\n  }\r\n\r\n  // Confirm Delete\r\n  const confirmDelete = async () => {\r\n    if (!productToDelete) return\r\n\r\n    try {\r\n      const response = await del(`${PRODUCT.DELETE}/${productToDelete._id}`)\r\n\r\n      if (!response.success) {\r\n        throw new Error(response.message || 'Failed to delete product')\r\n      }\r\n\r\n      // Remove product from state\r\n      setProducts(Products.filter(p => p._id !== productToDelete._id))\r\n      setShowDeleteModal(false)\r\n      setProductToDelete(null)\r\n      \r\n      // Show success message (you can add a toast notification here)\r\n      alert('Product deleted successfully!')\r\n    } catch (err) {\r\n      console.error('Delete error:', err)\r\n      alert('Failed to delete product: ' + err.message)\r\n    }\r\n  }\r\n\r\n  // Get unique categories for filter dropdown\r\n  const getUniqueCategories = () => {\r\n    const categories = new Set()\r\n    Products.forEach(product => {\r\n      if (product.categories && Array.isArray(product.categories)) {\r\n        product.categories.forEach(cat => {\r\n          if (cat && typeof cat === 'object' && cat.name) {\r\n            // Build hierarchical name\r\n            const hierarchicalName = getHierarchicalCategoryName(cat)\r\n            categories.add(hierarchicalName)\r\n          }\r\n        })\r\n      }\r\n    })\r\n    return Array.from(categories).sort()\r\n  }\r\n\r\n  // Build hierarchical category name (Parent > Child)\r\n  const getHierarchicalCategoryName = (category) => {\r\n    if (!category) return ''\r\n    \r\n    let name = category.name\r\n    if (category.parent && category.parent.name) {\r\n      name = `${category.parent.name} > ${category.name}`\r\n    }\r\n    return name\r\n  }\r\n\r\n  // Format categories for display\r\n  const formatCategoriesForDisplay = (categories) => {\r\n    if (!categories || categories.length === 0) return 'Uncategorized'\r\n    \r\n    return categories.map(cat => {\r\n      if (typeof cat === 'string') {\r\n        // If it's just an ObjectId string, show truncated ID\r\n        return cat.substring(0, 8) + '...'\r\n      }\r\n      if (typeof cat === 'object' && cat.name) {\r\n        // Just show the category name\r\n        return cat.name\r\n      }\r\n      return 'Unknown Category'\r\n    }).join(', ')\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* Page Header */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-12\">\r\n          <div className=\"d-flex justify-content-between align-items-center\">\r\n            <h2 className=\"fw-bold text-dark mb-0\">Products Management</h2>\r\n            <div className=\"d-flex gap-2\">\r\n              <button className=\"btn btn-outline-primary\">\r\n                <i className=\"bi bi-download me-2\"></i>\r\n                Export\r\n              </button>\r\n              <button \r\n                className=\"btn btn-success\"\r\n                onClick={() => onNavigate && onNavigate('add-product')}\r\n              >\r\n                <i className=\"bi bi-plus-circle me-2\"></i>\r\n                Add New Product\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Cards */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card border-0 shadow-sm\">\r\n            <div className=\"card-body text-center\">\r\n              <i className=\"bi bi-box text-primary\" style={{ fontSize: '2rem' }}></i>\r\n              <h4 className=\"mt-2 mb-0\">{filteredProducts.length}</h4>\r\n              <small className=\"text-muted\">Total Products {filters.search || filters.category || filters.status || filters.priceRange ? '(Filtered)' : ''}</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card border-0 shadow-sm\">\r\n            <div className=\"card-body text-center\">\r\n              <i className=\"bi bi-eye text-success\" style={{ fontSize: '2rem' }}></i>\r\n              <h4 className=\"mt-2 mb-0\">{filteredProducts.filter(p => p.status).length}</h4>\r\n              <small className=\"text-muted\">Published</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card border-0 shadow-sm\">\r\n            <div className=\"card-body text-center\">\r\n              <i className=\"bi bi-eye-slash text-warning\" style={{ fontSize: '2rem' }}></i>\r\n              <h4 className=\"mt-2 mb-0\">{filteredProducts.filter(p => !p.status).length}</h4>\r\n              <small className=\"text-muted\">Drafts</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card border-0 shadow-sm\">\r\n            <div className=\"card-body text-center\">\r\n              <i className=\"bi bi-exclamation-triangle text-danger\" style={{ fontSize: '2rem' }}></i>\r\n              <h4 className=\"mt-2 mb-0\">{filteredProducts.filter(p => (p.quantity || 0) < 5).length}</h4>\r\n              <small className=\"text-muted\">Low Stock</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-12\">\r\n          <div className=\"card border-0 shadow-sm\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row g-3\">\r\n                <div className=\"col-md-3\">\r\n                  <label className=\"form-label\">Search Products</label>\r\n                  <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Search by name, SKU...\"\r\n                    value={filters.search}\r\n                    onChange={(e) => handleFilterChange('search', e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <label className=\"form-label\">Category</label>\r\n                  <select \r\n                    className=\"form-select\"\r\n                    value={filters.category}\r\n                    onChange={(e) => handleFilterChange('category', e.target.value)}\r\n                  >\r\n                    <option value=\"\">All Categories</option>\r\n                    {getUniqueCategories().map(category => (\r\n                      <option key={category} value={category}>{category}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <label className=\"form-label\">Status</label>\r\n                  <select \r\n                    className=\"form-select\"\r\n                    value={filters.status}\r\n                    onChange={(e) => handleFilterChange('status', e.target.value)}\r\n                  >\r\n                    <option value=\"\">All Status</option>\r\n                    <option value=\"published\">Published</option>\r\n                    <option value=\"draft\">Draft</option>\r\n                    <option value=\"out-of-stock\">Out of Stock</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <label className=\"form-label\">Price Range</label>\r\n                  <select \r\n                    className=\"form-select\"\r\n                    value={filters.priceRange}\r\n                    onChange={(e) => handleFilterChange('priceRange', e.target.value)}\r\n                  >\r\n                    <option value=\"\">All Prices</option>\r\n                    <option value=\"low\">₹0 - ₹2,000</option>\r\n                    <option value=\"medium\">₹2,000 - ₹10,000</option>\r\n                    <option value=\"high\">₹10,000+</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                  <label className=\"form-label\">&nbsp;</label>\r\n                  <button \r\n                    className=\"btn btn-primary w-100\"\r\n                    onClick={() => {/* Filters are applied automatically */}}\r\n                    disabled={!filters.search && !filters.category && !filters.status && !filters.priceRange}\r\n                  >\r\n                    <i className=\"bi bi-funnel\"></i>\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-md-2\">\r\n                  <label className=\"form-label\">&nbsp;</label>\r\n                  <button \r\n                    className=\"btn btn-outline-secondary w-100\"\r\n                    onClick={resetFilters}\r\n                    disabled={!filters.search && !filters.category && !filters.status && !filters.priceRange}\r\n                  >\r\n                    <i className=\"bi bi-arrow-clockwise me-1\"></i>\r\n                    Reset\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Active Filters Indicator */}\r\n      {(filters.search || filters.category || filters.status || filters.priceRange) && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <div className=\"d-flex align-items-center flex-wrap gap-2\">\r\n              <span className=\"text-muted\">Active filters:</span>\r\n              \r\n              {filters.search && (\r\n                <span className=\"badge bg-light text-dark border\">\r\n                  Search: \"{filters.search}\"\r\n                  <button \r\n                    className=\"btn-close btn-close-sm ms-1\" \r\n                    style={{ fontSize: '0.7em' }}\r\n                    onClick={() => handleFilterChange('search', '')}\r\n                  ></button>\r\n                </span>\r\n              )}\r\n              \r\n              {filters.category && (\r\n                <span className=\"badge bg-light text-dark border\">\r\n                  Category: {filters.category}\r\n                  <button \r\n                    className=\"btn-close btn-close-sm ms-1\" \r\n                    style={{ fontSize: '0.7em' }}\r\n                    onClick={() => handleFilterChange('category', '')}\r\n                  ></button>\r\n                </span>\r\n              )}\r\n              \r\n              {filters.status && (\r\n                <span className=\"badge bg-light text-dark border\">\r\n                  Status: {filters.status.charAt(0).toUpperCase() + filters.status.slice(1)}\r\n                  <button \r\n                    className=\"btn-close btn-close-sm ms-1\" \r\n                    style={{ fontSize: '0.7em' }}\r\n                    onClick={() => handleFilterChange('status', '')}\r\n                  ></button>\r\n                </span>\r\n              )}\r\n              \r\n              {filters.priceRange && (\r\n                <span className=\"badge bg-light text-dark border\">\r\n                  Price: {filters.priceRange === 'low' ? '₹0 - ₹2,000' : \r\n                          filters.priceRange === 'medium' ? '₹2,000 - ₹10,000' : '₹10,000+'}\r\n                  <button \r\n                    className=\"btn-close btn-close-sm ms-1\" \r\n                    style={{ fontSize: '0.7em' }}\r\n                    onClick={() => handleFilterChange('priceRange', '')}\r\n                  ></button>\r\n                </span>\r\n              )}\r\n              \r\n              <button \r\n                className=\"btn btn-sm btn-outline-secondary\"\r\n                onClick={resetFilters}\r\n              >\r\n                Clear All\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Products Table */}\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"card border-0 shadow-sm\">\r\n            <div className=\"card-header bg-white border-bottom\">\r\n              <div className=\"d-flex justify-content-between align-items-center\">\r\n                <h5 className=\"mb-0 fw-semibold\">\r\n                  All Products \r\n                  {(filters.search || filters.category || filters.status || filters.priceRange) && (\r\n                    <span className=\"badge bg-primary ms-2\">\r\n                      {filteredProducts.length} filtered\r\n                    </span>\r\n                  )}\r\n                </h5>\r\n                <div className=\"d-flex gap-2\">\r\n                  <button className=\"btn btn-sm btn-outline-secondary\">\r\n                    <i className=\"bi bi-grid\"></i>\r\n                  </button>\r\n                  <button className=\"btn btn-sm btn-primary\">\r\n                    <i className=\"bi bi-list\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-hover mb-0\">\r\n                  <thead className=\"table-light\">\r\n                    <tr>\r\n                      <th className=\"ps-4\">\r\n                        <input type=\"checkbox\" className=\"form-check-input\" />\r\n                      </th>\r\n                      <th>Product Name</th>\r\n                      <th>SKU</th>\r\n                      <th>Category</th>\r\n                      <th>Stock</th>\r\n                      <th>Price</th>\r\n                      <th>Status</th>\r\n                      <th className=\"text-center\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {loading ? (\r\n                      <tr>\r\n                        <td colSpan=\"8\" className=\"text-center py-5 text-muted\">Loading products...</td>\r\n                      </tr>\r\n                    ) : error ? (\r\n                      <tr>\r\n                        <td colSpan=\"8\" className=\"text-center py-5 text-danger\">{error}</td>\r\n                      </tr>\r\n                    ) : filteredProducts.length === 0 ? (\r\n                      <tr>\r\n                        <td colSpan=\"8\" className=\"text-center py-5 text-muted\">\r\n                          {Products.length === 0 ? (\r\n                            <>\r\n                              <i className=\"bi bi-box\" style={{ fontSize: '3rem' }}></i>\r\n                              <p className=\"mt-2\">No products found</p>\r\n                              <button \r\n                                className=\"btn btn-success\"\r\n                                onClick={() => onNavigate && onNavigate('add-product')}\r\n                              >\r\n                                <i className=\"bi bi-plus-circle me-2\"></i>\r\n                                Add Product\r\n                              </button>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <i className=\"bi bi-search\" style={{ fontSize: '3rem' }}></i>\r\n                              <p className=\"mt-2\">No products match your filters</p>\r\n                              <button \r\n                                className=\"btn btn-outline-secondary\"\r\n                                onClick={resetFilters}\r\n                              >\r\n                                <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n                                Clear Filters\r\n                              </button>\r\n                            </>\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    ) : (\r\n                      filteredProducts.map(Product => (\r\n                        <tr key={Product._id}>\r\n                          <td className=\"ps-4\"><input type=\"checkbox\" className=\"form-check-input\" /></td>\r\n                          <td>\r\n                            <div className=\"d-flex align-items-center\">\r\n                              {Product.images && Product.images.length > 0 ? (\r\n                                <img \r\n                                  src={Product.images[0]} \r\n                                  alt={Product.name}\r\n                                  className=\"rounded me-2\"\r\n                                  style={{ width: '40px', height: '40px', objectFit: 'cover' }}\r\n                                />\r\n                              ) : (\r\n                                <div className=\"bg-light rounded me-2 d-flex align-items-center justify-content-center\" style={{ width: '40px', height: '40px' }}>\r\n                                  <i className=\"bi bi-image text-muted\"></i>\r\n                                </div>\r\n                              )}\r\n                              <div>\r\n                                <div className=\"fw-semibold\">{Product.name || 'N/A'}</div>\r\n                                {Product.short_description && (\r\n                                  <small className=\"text-muted\">{Product.short_description.substring(0, 50)}...</small>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </td>\r\n                          <td>{Product.sku || 'N/A'}</td>\r\n                          <td>\r\n                            {formatCategoriesForDisplay(Product.categories)}\r\n                          </td>\r\n                          <td>\r\n                            <span className={`badge ${Product.quantity > 10 ? 'bg-success' : Product.quantity > 0 ? 'bg-warning' : 'bg-danger'}`}>\r\n                              {Product.quantity || 0}\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"fw-semibold\">₹{Product.price ? Number(Product.price).toLocaleString('en-IN') : '0.00'}</td>\r\n                          <td>\r\n                            <span className={`badge ${Product.status ? 'bg-success' : 'bg-secondary'}`}>\r\n                              {Product.status ? 'Published' : 'Draft'}\r\n                            </span>\r\n                          </td>\r\n                          <td className=\"text-center\">\r\n                            <div className=\"btn-group\" role=\"group\">\r\n                              <button \r\n                                className=\"btn btn-sm btn-outline-primary\" \r\n                                title=\"Edit\"\r\n                                onClick={() => handleEdit(Product)}\r\n                              >\r\n                                <i className=\"bi bi-pencil\"></i>\r\n                              </button>\r\n                              <button \r\n                                className=\"btn btn-sm btn-outline-info\" \r\n                                title=\"View\"\r\n                                onClick={() => handleView(Product)}\r\n                              >\r\n                                <i className=\"bi bi-eye\"></i>\r\n                              </button>\r\n                              <button \r\n                                className=\"btn btn-sm btn-outline-danger\" \r\n                                title=\"Delete\"\r\n                                onClick={() => handleDelete(Product)}\r\n                              >\r\n                                <i className=\"bi bi-trash\"></i>\r\n                              </button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      {showDeleteModal && (\r\n        <div className=\"modal fade show\" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n          <div className=\"modal-dialog\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">Confirm Delete</h5>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"btn-close\" \r\n                  onClick={() => setShowDeleteModal(false)}\r\n                ></button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <p>Are you sure you want to delete <strong>{productToDelete?.name}</strong>?</p>\r\n                <p className=\"text-muted\">This action cannot be undone.</p>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"btn btn-secondary\" \r\n                  onClick={() => setShowDeleteModal(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"btn btn-danger\" \r\n                  onClick={confirmDelete}\r\n                >\r\n                  Delete Product\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* View Product Modal */}\r\n      {showViewModal && selectedProduct && (\r\n        <div className=\"modal fade show\" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n          <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">Product Details</h5>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"btn-close\" \r\n                  onClick={() => setShowViewModal(false)}\r\n                ></button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-4\">\r\n                    {selectedProduct.images && selectedProduct.images.length > 0 ? (\r\n                      <img \r\n                        src={selectedProduct.images[0]} \r\n                        alt={selectedProduct.name}\r\n                        className=\"img-fluid rounded\"\r\n                        style={{ maxHeight: '200px', width: '100%', objectFit: 'cover' }}\r\n                      />\r\n                    ) : (\r\n                      <div className=\"bg-light rounded d-flex align-items-center justify-content-center\" style={{ height: '200px' }}>\r\n                        <i className=\"bi bi-image text-muted\" style={{ fontSize: '3rem' }}></i>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"col-md-8\">\r\n                    <h4>{selectedProduct.name}</h4>\r\n                    <p className=\"text-muted\">{selectedProduct.short_description}</p>\r\n                    \r\n                    <div className=\"row mb-2\">\r\n                      <div className=\"col-sm-4\"><strong>SKU:</strong></div>\r\n                      <div className=\"col-sm-8\">{selectedProduct.sku || 'N/A'}</div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row mb-2\">\r\n                      <div className=\"col-sm-4\"><strong>Price:</strong></div>\r\n                      <div className=\"col-sm-8\">₹{selectedProduct.price ? Number(selectedProduct.price).toLocaleString('en-IN') : '0.00'}</div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row mb-2\">\r\n                      <div className=\"col-sm-4\"><strong>Stock:</strong></div>\r\n                      <div className=\"col-sm-8\">\r\n                        <span className={`badge ${selectedProduct.quantity > 10 ? 'bg-success' : selectedProduct.quantity > 0 ? 'bg-warning' : 'bg-danger'}`}>\r\n                          {selectedProduct.quantity || 0} units\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row mb-2\">\r\n                      <div className=\"col-sm-4\"><strong>Status:</strong></div>\r\n                      <div className=\"col-sm-8\">\r\n                        <span className={`badge ${selectedProduct.status ? 'bg-success' : 'bg-secondary'}`}>\r\n                          {selectedProduct.status ? 'Published' : 'Draft'}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"row mb-2\">\r\n                      <div className=\"col-sm-4\"><strong>Category:</strong></div>\r\n                      <div className=\"col-sm-8\">\r\n                        {formatCategoriesForDisplay(selectedProduct.categories)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {selectedProduct.description && (\r\n                  <div className=\"mt-3\">\r\n                    <h6>Description:</h6>\r\n                    <p>{selectedProduct.description}</p>\r\n                  </div>\r\n                )}\r\n                \r\n                {selectedProduct.images && selectedProduct.images.length > 1 && (\r\n                  <div className=\"mt-3\">\r\n                    <h6>Additional Images:</h6>\r\n                    <div className=\"row\">\r\n                      {selectedProduct.images.slice(1).map((img, index) => (\r\n                        <div key={index} className=\"col-md-3 mb-2\">\r\n                          <img \r\n                            src={img} \r\n                            alt={`${selectedProduct.name} ${index + 2}`}\r\n                            className=\"img-fluid rounded\"\r\n                            style={{ height: '80px', width: '100%', objectFit: 'cover' }}\r\n                          />\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"btn btn-primary\" \r\n                  onClick={() => {\r\n                    setShowViewModal(false)\r\n                    handleEdit(selectedProduct)\r\n                  }}\r\n                >\r\n                  Edit Product\r\n                </button>\r\n                <button \r\n                  type=\"button\" \r\n                  className=\"btn btn-secondary\" \r\n                  onClick={() => setShowViewModal(false)}\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}