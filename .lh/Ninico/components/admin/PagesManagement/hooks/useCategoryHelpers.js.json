{
    "sourceFile": "Ninico/components/admin/PagesManagement/hooks/useCategoryHelpers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753197903972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753197903972,
            "name": "Commit-0",
            "content": "import { useCallback } from 'react'\r\n\r\nexport function useCategoryHelpers({\r\n  categoryConfig,\r\n  setCategoryConfig,\r\n  availableCategories,\r\n  subcategories,\r\n  selectedMainCategory,\r\n  MAX_MAIN_CATEGORIES,\r\n  MIN_MAIN_CATEGORIES,\r\n  MAX_SUBCATEGORIES_PER_CATEGORY,\r\n  setError\r\n}) {\r\n  \r\n  // Get current counts for validation\r\n  const getCurrentCounts = useCallback(() => {\r\n    // Handle both old array structure and new object structure\r\n    let mainCategoriesCount = 0\r\n    let totalSubcategoriesCount = 0\r\n    let selectedCategorySubCount = 0\r\n    const subcategoryCounts = {}\r\n    \r\n    if (Array.isArray(categoryConfig.categories)) {\r\n      // Old structure: array of category objects\r\n      mainCategoriesCount = categoryConfig.categories.filter(cat => cat.enabled).length\r\n      \r\n      categoryConfig.categories.forEach(category => {\r\n        const subCount = category.subcategories ? category.subcategories.filter(sub => sub.enabled).length : 0\r\n        subcategoryCounts[category.categoryId] = subCount\r\n        totalSubcategoriesCount += subCount\r\n        \r\n        // Get subcategory count for currently selected main category\r\n        if (selectedMainCategory && category.categoryId === selectedMainCategory) {\r\n          selectedCategorySubCount = subCount\r\n        }\r\n      })\r\n    } else if (typeof categoryConfig.categories === 'object' && categoryConfig.categories !== null) {\r\n      // New structure: object with category IDs as keys\r\n      mainCategoriesCount = Object.keys(categoryConfig.categories).filter(\r\n        categoryId => categoryConfig.categories[categoryId]?.selected\r\n      ).length\r\n      \r\n      Object.keys(categoryConfig.categories).forEach(categoryId => {\r\n        const categoryData = categoryConfig.categories[categoryId]\r\n        let subCount = 0\r\n        \r\n        if (categoryData && categoryData.subcategories) {\r\n          subCount = Object.keys(categoryData.subcategories).filter(\r\n            subId => categoryData.subcategories[subId]?.selected\r\n          ).length\r\n        }\r\n        \r\n        subcategoryCounts[categoryId] = subCount\r\n        totalSubcategoriesCount += subCount\r\n        \r\n        // Get subcategory count for currently selected main category\r\n        if (selectedMainCategory && categoryId === selectedMainCategory) {\r\n          selectedCategorySubCount = subCount\r\n        }\r\n      })\r\n    } else {\r\n      // Fallback: use categoryIds for backward compatibility\r\n      if (availableCategories.length > 0) {\r\n        mainCategoriesCount = categoryConfig.categoryIds ? \r\n          categoryConfig.categoryIds.filter(id => \r\n            availableCategories.some(cat => cat.id === id && !cat.parent)\r\n          ).length : 0\r\n        \r\n        totalSubcategoriesCount = categoryConfig.categoryIds ? \r\n          categoryConfig.categoryIds.filter(id => \r\n            subcategories.some(sub => sub.id === id)\r\n          ).length : 0\r\n          \r\n        selectedCategorySubCount = selectedMainCategory && categoryConfig.categoryIds ? \r\n          categoryConfig.categoryIds.filter(id => \r\n            subcategories.some(sub => sub.id === id && \r\n              (sub.parent?._id === selectedMainCategory || sub.parent === selectedMainCategory)\r\n            )\r\n          ).length : 0\r\n      }\r\n    }\r\n    \r\n    return { \r\n      mainCategoriesCount, \r\n      subcategoryCounts, \r\n      totalSubcategoriesCount,\r\n      selectedCategorySubCount \r\n    }\r\n  }, [categoryConfig, availableCategories, subcategories, selectedMainCategory])\r\n\r\n  // Find which main category a subcategory belongs to\r\n  const findParentCategory = useCallback((subcategoryId) => {\r\n    const subcategory = subcategories.find(sub => sub.id === subcategoryId)\r\n    return subcategory?.parent?._id || subcategory?.parent\r\n  }, [subcategories])\r\n\r\n  // Transform hierarchical data for backend save\r\n  const transformForSave = useCallback(() => {\r\n    console.log('🔄 === TRANSFORM FOR SAVE START ===')\r\n    console.log('1. Input categoryConfig:', categoryConfig)\r\n    console.log('   - categoryConfig.enabled:', categoryConfig.enabled)\r\n    console.log('   - categoryConfig.maxCategories:', categoryConfig.maxCategories)\r\n    console.log('   - categoryConfig.layout:', categoryConfig.layout)\r\n    console.log('   - categoryConfig.showSubcategories:', categoryConfig.showSubcategories)\r\n    console.log('   - categoryConfig.categories:', categoryConfig.categories)\r\n    console.log('   - categoryConfig.categoryIds:', categoryConfig.categoryIds)\r\n    \r\n    const saveData = {\r\n      enabled: categoryConfig.enabled,\r\n      maxCategories: categoryConfig.maxCategories,\r\n      layout: categoryConfig.layout,\r\n      showSubcategories: categoryConfig.showSubcategories,\r\n      categories: []\r\n    }\r\n    \r\n    console.log('2. Base saveData structure:', saveData)\r\n    \r\n    // Since we're using the flat categoryIds array, we need to build categories from that\r\n    console.log('3. Processing categoryIds array...')\r\n    console.log('   - Available categories:', availableCategories.length)\r\n    console.log('   - Available subcategories:', subcategories.length)\r\n    \r\n    if (categoryConfig.categoryIds && categoryConfig.categoryIds.length > 0) {\r\n      categoryConfig.categoryIds.forEach((categoryId, index) => {\r\n        console.log(`   - Processing categoryId ${index + 1}:`, categoryId)\r\n        \r\n        // Check if it's a main category\r\n        const mainCategory = availableCategories.find(cat => cat.id === categoryId && !cat.parent)\r\n        if (mainCategory) {\r\n          console.log(`     ✅ Found main category:`, mainCategory.name)\r\n          saveData.categories.push({\r\n            categoryId: categoryId,\r\n            enabled: true,\r\n            order: index,\r\n            type: 'main'\r\n          })\r\n        }\r\n        \r\n        // Check if it's a subcategory\r\n        const subcategory = subcategories.find(sub => sub.id === categoryId)\r\n        if (subcategory) {\r\n          const parentId = subcategory.parent?._id || subcategory.parent\r\n          console.log(`     ✅ Found subcategory:`, subcategory.name, 'parent:', parentId)\r\n          saveData.categories.push({\r\n            categoryId: categoryId,\r\n            enabled: true,\r\n            order: index,\r\n            type: 'subcategory',\r\n            parentId: parentId\r\n          })\r\n        }\r\n        \r\n        if (!mainCategory && !subcategory) {\r\n          console.log(`     ❌ Category ID not found:`, categoryId)\r\n        }\r\n      })\r\n    } else {\r\n      console.log('   - No categoryIds to process')\r\n    }\r\n    \r\n    // Sort by order\r\n    console.log('4. Sorting categories by order...')\r\n    saveData.categories.sort((a, b) => a.order - b.order)\r\n    \r\n    console.log('5. Final saveData:')\r\n    console.log('   - enabled:', saveData.enabled)\r\n    console.log('   - maxCategories:', saveData.maxCategories)\r\n    console.log('   - layout:', saveData.layout)\r\n    console.log('   - showSubcategories:', saveData.showSubcategories)\r\n    console.log('   - categories count:', saveData.categories.length)\r\n    console.log('   - categories details:', saveData.categories)\r\n    console.log('🔚 === TRANSFORM FOR SAVE END ===')\r\n    \r\n    return saveData\r\n  }, [categoryConfig, availableCategories, subcategories])\r\n\r\n  // Handle category selection with validation - SIMPLIFIED for current structure\r\n  const handleCategoryToggle = useCallback((categoryId, parentCategoryId = null) => {\r\n    const isMainCategory = !parentCategoryId && availableCategories.some(cat => cat.id === categoryId && !cat.parent)\r\n    \r\n    console.log('🎯 Category toggle triggered:', { categoryId, parentCategoryId, isMainCategory })\r\n    \r\n    if (isMainCategory) {\r\n      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n      const currentMainCount = categoryConfig.categoryIds.filter(id => \r\n        availableCategories.some(cat => cat.id === id && !cat.parent)\r\n      ).length\r\n      \r\n      console.log('📊 Main category status:', { isCurrentlySelected, currentCount: currentMainCount })\r\n      \r\n      // Validation for main categories\r\n      if (!isCurrentlySelected) {\r\n        // Trying to select\r\n        if (currentMainCount >= MAX_MAIN_CATEGORIES) {\r\n          setError(`Cannot select more main categories. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n          return\r\n        }\r\n      } else {\r\n        // Trying to deselect\r\n        if (currentMainCount <= MIN_MAIN_CATEGORIES) {\r\n          setError(`Cannot deselect this category. At least ${MIN_MAIN_CATEGORIES} main category must be selected.`)\r\n          return\r\n        }\r\n      }\r\n      \r\n      // Clear any existing errors\r\n      setError('')\r\n      \r\n      // Update categoryIds array\r\n      setCategoryConfig(prev => {\r\n        if (!isCurrentlySelected) {\r\n          // Add to selection\r\n          return {\r\n            ...prev,\r\n            categoryIds: [...prev.categoryIds, categoryId]\r\n          }\r\n        } else {\r\n          // Remove from selection (and remove all its subcategories too)\r\n          const subcategoriesOfThisCategory = subcategories\r\n            .filter(sub => (sub.parent?._id || sub.parent) === categoryId)\r\n            .map(sub => sub.id)\r\n          \r\n          return {\r\n            ...prev,\r\n            categoryIds: prev.categoryIds.filter(id => \r\n              id !== categoryId && !subcategoriesOfThisCategory.includes(id)\r\n            )\r\n          }\r\n        }\r\n      })\r\n      \r\n    } else {\r\n      // Subcategory logic\r\n      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n      const parentId = parentCategoryId || findParentCategory(categoryId)\r\n      \r\n      console.log('📊 Subcategory status:', { isCurrentlySelected, parentId })\r\n      \r\n      if (!isCurrentlySelected && parentId) {\r\n        // Check subcategory limit for this parent\r\n        const currentSubCount = categoryConfig.categoryIds.filter(id => \r\n          subcategories.some(sub => sub.id === id && (sub.parent?._id || sub.parent) === parentId)\r\n        ).length\r\n        \r\n        if (currentSubCount >= MAX_SUBCATEGORIES_PER_CATEGORY) {\r\n          const parentName = availableCategories.find(cat => cat.id === parentId)?.name || 'this category'\r\n          setError(`Cannot select more subcategories for ${parentName}. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} per category allowed.`)\r\n          return\r\n        }\r\n      }\r\n      \r\n      // Clear any existing errors\r\n      setError('')\r\n      \r\n      // Update categoryIds array\r\n      setCategoryConfig(prev => {\r\n        if (!isCurrentlySelected) {\r\n          // Add to selection\r\n          let newIds = [...prev.categoryIds, categoryId]\r\n          \r\n          // Also ensure parent is selected\r\n          if (parentId && !prev.categoryIds.includes(parentId)) {\r\n            newIds.push(parentId)\r\n          }\r\n          \r\n          return {\r\n            ...prev,\r\n            categoryIds: newIds\r\n          }\r\n        } else {\r\n          // Remove from selection\r\n          return {\r\n            ...prev,\r\n            categoryIds: prev.categoryIds.filter(id => id !== categoryId)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }, [categoryConfig, setCategoryConfig, availableCategories, subcategories, findParentCategory, MAX_MAIN_CATEGORIES, MIN_MAIN_CATEGORIES, MAX_SUBCATEGORIES_PER_CATEGORY, setError])\r\n\r\n  // Handle max categories change\r\n  const handleMaxCategoriesChange = useCallback((value) => {\r\n    const numValue = parseInt(value) || 0\r\n    setCategoryConfig(prev => ({ ...prev, maxCategories: numValue }))\r\n  }, [setCategoryConfig])\r\n\r\n  return {\r\n    getCurrentCounts,\r\n    transformForSave,\r\n    handleCategoryToggle,\r\n    handleMaxCategoriesChange,\r\n    findParentCategory\r\n  }\r\n}\r\n"
        }
    ]
}