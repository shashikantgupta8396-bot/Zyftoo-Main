{
    "sourceFile": "Ninico/components/admin/PagesManagement/CategoryConfigSection/CategoryConfigModal/CategoryConfigLogic.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753451875015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753451875015,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { put, get } from '@/util/apiService'\r\n\r\n/**\r\n * Category Configuration Logic Component\r\n * Handles all business logic for category configuration\r\n */\r\nexport const useCategoryConfigLogic = ({\r\n  categoryConfig,\r\n  setCategoryConfig,\r\n  selectedPage,\r\n  loadPageConfig,\r\n  setError,\r\n  setSuccess,\r\n  setLoading,\r\n  ADMIN_TOKEN,\r\n  getCurrentCounts,\r\n  transformForSave,\r\n  onClose\r\n}) => {\r\n  // Business rule constants\r\n  const MAX_MAIN_CATEGORIES = 10\r\n  const MIN_MAIN_CATEGORIES = 1\r\n  const MAX_SUBCATEGORIES_PER_CATEGORY = 10\r\n\r\n  // Save category section configuration\r\n  const saveCategoryConfig = async () => {\r\n    console.log('üöÄ === SAVE CATEGORY CONFIG START ===')\r\n    console.log('1. Save function triggered')\r\n    \r\n    try {\r\n      console.log('2. Setting loading state to true')\r\n      setLoading(true)\r\n      \r\n      console.log('3. Setting auth token in localStorage')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      console.log('   - Auth token set:', ADMIN_TOKEN.substring(0, 20) + '...')\r\n      \r\n      console.log('4. Getting current counts for validation')\r\n      const { mainCategoriesCount } = getCurrentCounts()\r\n      console.log('   - Main categories count:', mainCategoriesCount)\r\n      console.log('   - MIN_MAIN_CATEGORIES:', MIN_MAIN_CATEGORIES)\r\n      console.log('   - MAX_MAIN_CATEGORIES:', MAX_MAIN_CATEGORIES)\r\n      \r\n      if (mainCategoriesCount < MIN_MAIN_CATEGORIES) {\r\n        console.log('‚ùå Validation failed: Too few main categories')\r\n        setError(`Please select at least ${MIN_MAIN_CATEGORIES} main category before saving.`)\r\n        return\r\n      }\r\n      \r\n      if (mainCategoriesCount > MAX_MAIN_CATEGORIES) {\r\n        console.log('‚ùå Validation failed: Too many main categories')\r\n        setError(`Too many main categories selected. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n        return\r\n      }\r\n      \r\n      console.log('‚úÖ Validation passed')\r\n      \r\n      console.log('5. Current categoryConfig state before transform:')\r\n      console.log('   - categoryConfig.enabled:', categoryConfig.enabled)\r\n      console.log('   - categoryConfig.maxCategories:', categoryConfig.maxCategories)\r\n      console.log('   - categoryConfig.layout:', categoryConfig.layout)\r\n      console.log('   - categoryConfig.showSubcategories:', categoryConfig.showSubcategories)\r\n      console.log('   - categoryConfig.categories:', categoryConfig.categories)\r\n      console.log('   - categoryConfig.categoryIds:', categoryConfig.categoryIds)\r\n      \r\n      // Transform hierarchical data for save\r\n      console.log('6. Transforming data for save...')\r\n      const configData = transformForSave()\r\n      console.log('7. Transformed config data:')\r\n      console.log('   - Full configData object:', JSON.stringify(configData, null, 2))\r\n      console.log('   - configData.enabled:', configData.enabled)\r\n      console.log('   - configData.categories length:', configData.categories?.length || 0)\r\n      \r\n      console.log('8. Preparing API request')\r\n      const apiEndpoint = '/pages/home/sections/category'\r\n      console.log('   - API endpoint:', apiEndpoint)\r\n      console.log('   - Request method: PUT')\r\n      console.log('   - Request data:', configData)\r\n      console.log('   - Request headers will include auth token')\r\n      \r\n      console.log('9. Making API request...')\r\n      console.log(\"------------------sending--------------------\", configData, \" ---to--:\", apiEndpoint)\r\n      const response = await put(apiEndpoint, configData)\r\n      console.log('10. API response received:')\r\n      console.log('    - Raw response:', response)\r\n      console.log('    - Response type:', typeof response)\r\n      console.log('    - Response keys:', Object.keys(response || {}))\r\n      console.log('    - Response.data:', response?.data)\r\n      console.log('    - Response.status:', response?.status)\r\n      console.log('    - Response.success:', response?.success)\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      console.log('11. Processing response data...')\r\n      const actualData = response.data // This contains the backend response\r\n      console.log('    - actualData:', actualData)\r\n      console.log('    - actualData type:', typeof actualData)\r\n      console.log('    - actualData.success:', actualData?.success)\r\n      console.log('    - actualData.message:', actualData?.message)\r\n      \r\n      if (actualData && actualData.success) {\r\n        console.log('‚úÖ Save successful!')\r\n        setSuccess('Category section configuration saved successfully!')\r\n        setTimeout(() => setSuccess(''), 3000)\r\n        onClose()\r\n        \r\n        // Trigger refresh notification (optional)\r\n        try {\r\n          console.log('12. Triggering homepage refresh...')\r\n          await get('/pages/home/refresh/categorySection')\r\n          console.log('    - Homepage refresh successful')\r\n        } catch (refreshError) {\r\n          console.log('‚ö†Ô∏è Refresh notification failed, but save was successful:', refreshError)\r\n        }\r\n        \r\n        console.log('13. Reloading page config...')\r\n        await loadPageConfig(selectedPage) // Reload to get updated config\r\n        console.log('14. Page config reloaded')\r\n      } else {\r\n        console.log('‚ùå Save failed - API returned unsuccessful response')\r\n        console.log('    - actualData:', actualData)\r\n        const errorMessage = actualData?.message || 'Unknown error'\r\n        console.log('    - Error message:', errorMessage)\r\n        setError('Failed to save configuration: ' + errorMessage)\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('‚ùå === SAVE CATEGORY CONFIG ERROR ===')\r\n      console.error('Error caught in try-catch:')\r\n      console.error('   - Error object:', err)\r\n      console.error('   - Error message:', err.message)\r\n      console.error('   - Error name:', err.name)\r\n      console.error('   - Error stack:', err.stack)\r\n      \r\n      if (err.response) {\r\n        console.error('   - HTTP Response Error Details:')\r\n        console.error('     - Status:', err.response.status)\r\n        console.error('     - Status text:', err.response.statusText)\r\n        console.error('     - Response data:', err.response.data)\r\n        console.error('     - Response headers:', err.response.headers)\r\n      }\r\n      \r\n      if (err.request) {\r\n        console.error('   - Request Error Details:')\r\n        console.error('     - Request object:', err.request)\r\n      }\r\n      \r\n      setError('Failed to save category configuration: ' + err.message)\r\n    } finally {\r\n      console.log('15. Setting loading state to false')\r\n      setLoading(false)\r\n      console.log('üîö === SAVE CATEGORY CONFIG END ===')\r\n    }\r\n  }\r\n\r\n  return {\r\n    saveCategoryConfig,\r\n    MAX_MAIN_CATEGORIES,\r\n    MIN_MAIN_CATEGORIES,\r\n    MAX_SUBCATEGORIES_PER_CATEGORY\r\n  }\r\n}\r\n"
        }
    ]
}