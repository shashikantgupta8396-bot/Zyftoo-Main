{
    "sourceFile": "Ninico/components/admin/PagesManagement/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1753197903776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753202256625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n     try {\r\n       setLoading(true)\r\n       localStorage.setItem('authToken', ADMIN_TOKEN)\r\n       \r\n-      const response = await get(`/api/pages/${pageKey}`)\r\n+      const response = await get(`/pages/${pageKey}`)\r\n       console.log('Page config response:', response)\r\n       \r\n       // Handle the double-wrapped response from apiService\r\n       const actualData = response.data\r\n"
                },
                {
                    "date": 1753281645216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     },\r\n   })\r\n \r\n   // Hardcoded admin token for testing\r\n-  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\r\n+  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MzI4MTMyMCwiZXhwIjoxNzUzODg2MTIwfQ.3wEx7ZCDvYtUQppFM9CcXjhG1zTQX9_RYY_dy3Y6MZs'\r\n \r\n   // Define sections for each page\r\n   const homeSections = [\r\n     { \r\n"
                },
                {
                    "date": 1753451436564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n 'use client'\r\n import React, { useState, useEffect } from 'react'\r\n import { get } from '@/util/apiService'\r\n import { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\n-import CategoryConfigModal from './CategoryConfigModal'\r\n+import CategoryConfigModal from './CategoryConfigModal/CategoryConfigModal'\r\n import PageSelector from './PageSelector'\r\n import SectionsList from './SectionsList'\r\n \r\n const PAGES = [\r\n"
                },
                {
                    "date": 1753451502507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n 'use client'\r\n import React, { useState, useEffect } from 'react'\r\n import { get } from '@/util/apiService'\r\n import { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\n-import CategoryConfigModal from './CategoryConfigModal/CategoryConfigModal'\r\n+import CategoryConfigModal from './CategoryConfigSection/CategoryConfigModal/CategoryConfigModal'\r\n import PageSelector from './PageSelector'\r\n import SectionsList from './SectionsList'\r\n \r\n const PAGES = [\r\n"
                }
            ],
            "date": 1753197903776,
            "name": "Commit-0",
            "content": "'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { get } from '@/util/apiService'\r\nimport { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\nimport CategoryConfigModal from './CategoryConfigModal'\r\nimport PageSelector from './PageSelector'\r\nimport SectionsList from './SectionsList'\r\n\r\nconst PAGES = [\r\n  { \r\n    key: \"home\", \r\n    label: \"Home Page\",\r\n    description: \"Manage sections displayed on the homepage\"\r\n  },\r\n  { \r\n    key: \"corporate\", \r\n    label: \"Corporate Page\",\r\n    description: \"Manage sections for corporate customers\"\r\n  }\r\n]\r\n\r\nexport default function PagesManagement({ onNavigate }) {\r\n  const [selectedPage, setSelectedPage] = useState(\"home\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const [success, setSuccess] = useState('')\r\n  const [showCategoryConfig, setShowCategoryConfig] = useState(false)\r\n  const [availableCategories, setAvailableCategories] = useState([])\r\n  const [subcategories, setSubcategories] = useState([])\r\n  const [pageConfig, setPageConfig] = useState(null)\r\n\r\n  // Category section configuration state - NEW HIERARCHICAL STRUCTURE\r\n  const [categoryConfig, setCategoryConfig] = useState({\r\n    enabled: true,\r\n    maxCategories: 10,\r\n    layout: 'grid',\r\n    showSubcategories: true,\r\n    categories: [],\r\n    categoryIds: []\r\n  })\r\n\r\n  // UI state for category selection\r\n  const [selectedMainCategory, setSelectedMainCategory] = useState(null)\r\n\r\n  // Section visibility state\r\n  const [visibleSections, setVisibleSections] = useState({\r\n    home: {\r\n      giftCategories: true,\r\n      slider: true,\r\n      services: true,\r\n      products: true,\r\n      banner: true,\r\n      dealProduct: true,\r\n    },\r\n    corporate: {\r\n      corporateBanner: true,\r\n      corporateServices: true,\r\n      corporateTestimonials: false,\r\n      corporatePartners: false,\r\n    },\r\n  })\r\n\r\n  // Hardcoded admin token for testing\r\n  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\r\n\r\n  // Define sections for each page\r\n  const homeSections = [\r\n    { \r\n      key: \"giftCategories\", \r\n      label: \"Gift Categories\", \r\n      description: \"Display category grid with gifts\",\r\n      order: 1,\r\n      hasConfig: true\r\n    },\r\n    { \r\n      key: \"slider\", \r\n      label: \"Main Slider\", \r\n      description: \"Hero banner with promotional slides\",\r\n      order: 2\r\n    },\r\n    { \r\n      key: \"services\", \r\n      label: \"Services Section\", \r\n      description: \"Highlight key services and benefits\",\r\n      order: 3\r\n    },\r\n    { \r\n      key: \"products\", \r\n      label: \"Featured Products\", \r\n      description: \"Showcase featured/trending products\",\r\n      order: 4\r\n    },\r\n    { \r\n      key: \"banner\", \r\n      label: \"Promotional Banner\", \r\n      description: \"Secondary promotional content\",\r\n      order: 5\r\n    },\r\n    { \r\n      key: \"dealProduct\", \r\n      label: \"Deal Products\", \r\n      description: \"Special offers and discounted items\",\r\n      order: 6\r\n    }\r\n  ]\r\n\r\n  const corporateSections = [\r\n    { \r\n      key: \"corporateBanner\", \r\n      label: \"Corporate Banner\", \r\n      description: \"Hero section for corporate clients\",\r\n      order: 1\r\n    },\r\n    { \r\n      key: \"corporateServices\", \r\n      label: \"Corporate Services\", \r\n      description: \"B2B services and solutions\",\r\n      order: 2\r\n    },\r\n    { \r\n      key: \"corporateTestimonials\", \r\n      label: \"Client Testimonials\", \r\n      description: \"Corporate client reviews and case studies\",\r\n      order: 3\r\n    },\r\n    { \r\n      key: \"corporatePartners\", \r\n      label: \"Partner Logos\", \r\n      description: \"Display trusted corporate partners\",\r\n      order: 4\r\n    }\r\n  ]\r\n\r\n  // Load page configuration\r\n  const loadPageConfig = async (pageKey) => {\r\n    try {\r\n      setLoading(true)\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const response = await get(`/api/pages/${pageKey}`)\r\n      console.log('Page config response:', response)\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      const actualData = response.data\r\n      \r\n      if (actualData && actualData.success) {\r\n        setPageConfig(actualData.data)\r\n        \r\n        // Extract category section config\r\n        const categorySection = actualData.data.sections.find(s => s.sectionType === 'categorySection')\r\n        if (categorySection && categorySection.config) {\r\n          // Convert the saved flat structure back to hierarchical state\r\n          const hierarchicalConfig = {\r\n            enabled: categorySection.enabled || false,\r\n            maxCategories: categorySection.config.maxCategories || 10,\r\n            layout: categorySection.config.layout || 'grid',\r\n            showSubcategories: categorySection.config.showSubcategories || true,\r\n            categories: {},\r\n            categoryIds: []\r\n          }\r\n          \r\n          // Rebuild hierarchical structure from saved config\r\n          if (categorySection.config.categories && Array.isArray(categorySection.config.categories)) {\r\n            const categoryIds = []\r\n            categorySection.config.categories.forEach(cat => {\r\n              if (cat.categoryId) {\r\n                categoryIds.push(cat.categoryId)\r\n                hierarchicalConfig.categories[cat.categoryId] = {\r\n                  selected: cat.enabled || false,\r\n                  order: cat.order || 0,\r\n                  subcategories: {}\r\n                }\r\n                \r\n                // Add subcategories if they exist\r\n                if (cat.subcategories && Array.isArray(cat.subcategories)) {\r\n                  cat.subcategories.forEach(sub => {\r\n                    if (sub.categoryId) {\r\n                      categoryIds.push(sub.categoryId)\r\n                      hierarchicalConfig.categories[cat.categoryId].subcategories[sub.categoryId] = {\r\n                        selected: sub.enabled || false,\r\n                        order: sub.order || 0,\r\n                        parentId: cat.categoryId\r\n                      }\r\n                    }\r\n                  })\r\n                }\r\n              }\r\n            })\r\n            hierarchicalConfig.categoryIds = categoryIds\r\n          }\r\n          \r\n          setCategoryConfig(hierarchicalConfig)\r\n          console.log('📂 Loaded hierarchical config:', hierarchicalConfig)\r\n          \r\n          // Update visibility state\r\n          setVisibleSections(prev => ({\r\n            ...prev,\r\n            [pageKey]: {\r\n              ...prev[pageKey],\r\n              giftCategories: categorySection.enabled\r\n            }\r\n          }))\r\n        } else {\r\n          // Initialize with default hierarchical structure if no config exists\r\n          setCategoryConfig({\r\n            enabled: false,\r\n            maxCategories: 10,\r\n            layout: 'grid',\r\n            showSubcategories: true,\r\n            categories: {},\r\n            categoryIds: []\r\n          })\r\n        }\r\n      }\r\n      \r\n      setError('')\r\n    } catch (err) {\r\n      console.error('Load page config error:', err)\r\n      setError('Failed to load page configuration: ' + err.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Load available categories\r\n  const loadCategories = async () => {\r\n    try {\r\n      console.log('🔄 === LOADING CATEGORIES DEBUG ===')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const response = await get(CATEGORY.GET_ALL)\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error || 'Failed to fetch categories')\r\n      }\r\n      \r\n      // Ensure response.data is an array\r\n      let categoriesData = []\r\n      if (Array.isArray(response.data)) {\r\n        categoriesData = response.data\r\n      } else if (response.data && typeof response.data === 'object') {\r\n        if (Array.isArray(response.data.categories)) {\r\n          categoriesData = response.data.categories\r\n        } else if (Array.isArray(response.data.data)) {\r\n          categoriesData = response.data.data\r\n        }\r\n      }\r\n      \r\n      // Transform categories for display in the admin panel\r\n      const transformedCategories = categoriesData.map((cat) => ({\r\n        id: cat.id || cat._id,\r\n        value: cat.id || cat._id,\r\n        label: cat.name,\r\n        name: cat.name,\r\n        image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n        description: cat.description || '',\r\n        parent: cat.parent\r\n      }))\r\n      \r\n      setAvailableCategories(transformedCategories)\r\n      setError('')\r\n      \r\n    } catch (err) {\r\n      console.error('Load categories error:', err)\r\n      setError('Failed to load categories: ' + err.message)\r\n      setAvailableCategories([])\r\n    }\r\n  }\r\n\r\n  // Load subcategories from separate subcategories collection\r\n  const loadSubcategories = async () => {\r\n    try {\r\n      console.log('🔄 === LOADING SUBCATEGORIES DEBUG ===')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const response = await get(SUBCATEGORY.GET_ALL)\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.error || 'Failed to fetch subcategories')\r\n      }\r\n      \r\n      let subcategoriesData = []\r\n      if (Array.isArray(response.data)) {\r\n        subcategoriesData = response.data\r\n      } else if (response.data && Array.isArray(response.data.data)) {\r\n        subcategoriesData = response.data.data\r\n      }\r\n      \r\n      // Transform subcategories for display\r\n      const transformedSubcategories = subcategoriesData.map((subcat) => ({\r\n        id: subcat.id || subcat._id,\r\n        value: subcat.id || subcat._id,\r\n        label: subcat.name,\r\n        name: subcat.name,\r\n        image: subcat.image?.url || '/assets/img/product/category/default-subcategory.svg',\r\n        description: subcat.description || '',\r\n        parent: subcat.parent,\r\n        status: subcat.status\r\n      }))\r\n      \r\n      setSubcategories(transformedSubcategories)\r\n      \r\n    } catch (err) {\r\n      console.error('Load subcategories error:', err)\r\n      setSubcategories([])\r\n    }\r\n  }\r\n\r\n  // Toggle section visibility\r\n  const handleToggleSection = async (page, section) => {\r\n    if (section === 'giftCategories') {\r\n      // For category section, update the actual config\r\n      setCategoryConfig(prev => ({ ...prev, enabled: !prev.enabled }))\r\n      return\r\n    }\r\n    \r\n    const newVisibility = {\r\n      ...visibleSections,\r\n      [page]: {\r\n        ...visibleSections[page],\r\n        [section]: !visibleSections[page][section],\r\n      }\r\n    }\r\n    \r\n    setVisibleSections(newVisibility)\r\n  }\r\n\r\n  // Open category configuration modal\r\n  const openCategoryConfig = () => {\r\n    setShowCategoryConfig(true)\r\n    // Reset to first main category when opening modal\r\n    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n    if (mainCategories.length > 0) {\r\n      setSelectedMainCategory(mainCategories[0].id)\r\n    }\r\n  }\r\n\r\n  // Load data when page changes\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      await loadPageConfig(selectedPage)\r\n      await loadCategories()\r\n      await loadSubcategories()\r\n    }\r\n    loadData()\r\n  }, [selectedPage])\r\n\r\n  // Get sections for current page\r\n  const getCurrentSections = () => {\r\n    return selectedPage === \"home\" ? homeSections : corporateSections\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n            <div>\r\n              <h1 className=\"h3 mb-2\">Pages Management</h1>\r\n              <p className=\"text-muted mb-0\">Configure and manage sections for different pages</p>\r\n            </div>\r\n            <button \r\n              className=\"btn btn-outline-secondary\"\r\n              onClick={() => onNavigate && onNavigate('dashboard')}\r\n            >\r\n              <i className=\"bi bi-arrow-left me-2\"></i>\r\n              Back to Dashboard\r\n            </button>\r\n          </div>\r\n\r\n          {/* Status Messages */}\r\n          {error && (\r\n            <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n              <i className=\"bi bi-exclamation-triangle me-2\"></i>\r\n              {error}\r\n              <button type=\"button\" className=\"btn-close\" onClick={() => setError('')}></button>\r\n            </div>\r\n          )}\r\n\r\n          {success && (\r\n            <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n              <i className=\"bi bi-check-circle me-2\"></i>\r\n              {success}\r\n              <button type=\"button\" className=\"btn-close\" onClick={() => setSuccess('')}></button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Page Selector */}\r\n          <PageSelector \r\n            pages={PAGES}\r\n            selectedPage={selectedPage}\r\n            onPageChange={setSelectedPage}\r\n            loading={loading}\r\n          />\r\n\r\n          {/* Sections List */}\r\n          <SectionsList \r\n            sections={getCurrentSections()}\r\n            visibleSections={visibleSections[selectedPage]}\r\n            selectedPage={selectedPage}\r\n            onToggleSection={handleToggleSection}\r\n            onConfigureCategory={openCategoryConfig}\r\n            loading={loading}\r\n          />\r\n\r\n          {/* Category Configuration Modal */}\r\n          {showCategoryConfig && (\r\n            <CategoryConfigModal\r\n              show={showCategoryConfig}\r\n              onClose={() => setShowCategoryConfig(false)}\r\n              categoryConfig={categoryConfig}\r\n              setCategoryConfig={setCategoryConfig}\r\n              availableCategories={availableCategories}\r\n              subcategories={subcategories}\r\n              selectedMainCategory={selectedMainCategory}\r\n              setSelectedMainCategory={setSelectedMainCategory}\r\n              selectedPage={selectedPage}\r\n              loadPageConfig={loadPageConfig}\r\n              setError={setError}\r\n              setSuccess={setSuccess}\r\n              setLoading={setLoading}\r\n              loading={loading}\r\n              ADMIN_TOKEN={ADMIN_TOKEN}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}