{
    "sourceFile": "Ninico/components/admin/ModernPagesManagement.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753441696953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753441696953,
            "name": "Commit-0",
            "content": "/**\r\n * Modern Admin Pages Management Component\r\n * \r\n * A sleek, minimalistic admin interface with curved edges\r\n * and elegant design patterns\r\n */\r\n\r\n'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { get, post, put } from '@/util/apiService'\r\nimport { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\nimport { \r\n  ModernCard, \r\n  ModernButton, \r\n  ModernInput, \r\n  ModernBadge,\r\n  ModernLoadingOverlay,\r\n  ModernSpinner\r\n} from '@/components/ui'\r\n\r\nconst PAGES = [\r\n  { \r\n    key: \"home\", \r\n    label: \"Home Page\",\r\n    description: \"Manage sections displayed on the homepage\",\r\n    icon: \"🏠\"\r\n  },\r\n  { \r\n    key: \"corporate\", \r\n    label: \"Corporate Page\",\r\n    description: \"Manage sections for corporate customers\",\r\n    icon: \"🏢\"\r\n  }\r\n]\r\n\r\nexport default function ModernPagesManagement({ onNavigate }) {\r\n  const [selectedPage, setSelectedPage] = useState(\"home\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const [success, setSuccess] = useState('')\r\n  const [showCategoryConfig, setShowCategoryConfig] = useState(false)\r\n  const [availableCategories, setAvailableCategories] = useState([])\r\n  const [subcategories, setSubcategories] = useState([])\r\n  const [pageConfig, setPageConfig] = useState(null)\r\n  const [saving, setSaving] = useState(false)\r\n\r\n  // Category section configuration state\r\n  const [categoryConfig, setCategoryConfig] = useState({\r\n    enabled: true,\r\n    maxCategories: 10,\r\n    layout: 'grid',\r\n    showSubcategories: true,\r\n    categories: [],\r\n    categoryIds: []\r\n  })\r\n\r\n  // Business rule constants\r\n  const MAX_MAIN_CATEGORIES = 10\r\n  const MIN_MAIN_CATEGORIES = 1\r\n  const MAX_SUBCATEGORIES_PER_CATEGORY = 10\r\n\r\n  useEffect(() => {\r\n    loadPageConfiguration()\r\n    loadAvailableCategories()\r\n  }, [selectedPage])\r\n\r\n  const loadPageConfiguration = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const response = await get(`/pages/${selectedPage}`)\r\n      \r\n      if (response?.data?.sections) {\r\n        const categorySection = response.data.sections.find(s => s.sectionType === 'categorySection')\r\n        if (categorySection) {\r\n          setCategoryConfig({\r\n            enabled: categorySection.enabled || true,\r\n            maxCategories: categorySection.config?.maxCategories || 10,\r\n            layout: categorySection.config?.layout || 'grid',\r\n            showSubcategories: categorySection.config?.showSubcategories !== false,\r\n            categories: categorySection.categories || [],\r\n            categoryIds: categorySection.categories?.map(c => c.categoryId) || []\r\n          })\r\n        }\r\n        setPageConfig(response.data)\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load page configuration:', error)\r\n      setError('Failed to load page configuration')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const loadAvailableCategories = async () => {\r\n    try {\r\n      const [categoriesResponse, subcategoriesResponse] = await Promise.all([\r\n        get(CATEGORY.LIST),\r\n        get(SUBCATEGORY.LIST)\r\n      ])\r\n      \r\n      setAvailableCategories(categoriesResponse?.data || [])\r\n      setSubcategories(subcategoriesResponse?.data || [])\r\n    } catch (error) {\r\n      console.error('Failed to load categories:', error)\r\n    }\r\n  }\r\n\r\n  const saveConfiguration = async () => {\r\n    try {\r\n      setSaving(true)\r\n      setError('')\r\n      setSuccess('')\r\n\r\n      const configToSave = {\r\n        ...pageConfig,\r\n        sections: [{\r\n          sectionType: 'categorySection',\r\n          enabled: categoryConfig.enabled,\r\n          order: 1,\r\n          config: {\r\n            maxCategories: categoryConfig.maxCategories,\r\n            layout: categoryConfig.layout,\r\n            showSubcategories: categoryConfig.showSubcategories\r\n          },\r\n          categories: categoryConfig.categories\r\n        }]\r\n      }\r\n\r\n      const response = await post(`/pages/${selectedPage}/save-config`, configToSave)\r\n      \r\n      if (response?.success) {\r\n        setSuccess('Configuration saved successfully!')\r\n        setTimeout(() => setSuccess(''), 3000)\r\n      }\r\n    } catch (error) {\r\n      console.error('Save failed:', error)\r\n      setError('Failed to save configuration')\r\n    } finally {\r\n      setSaving(false)\r\n    }\r\n  }\r\n\r\n  const toggleCategorySelection = (categoryId) => {\r\n    setCategoryConfig(prev => {\r\n      const isSelected = prev.categories.some(c => c.categoryId === categoryId)\r\n      \r\n      if (isSelected) {\r\n        return {\r\n          ...prev,\r\n          categories: prev.categories.filter(c => c.categoryId !== categoryId),\r\n          categoryIds: prev.categoryIds.filter(id => id !== categoryId)\r\n        }\r\n      } else {\r\n        if (prev.categories.length >= MAX_MAIN_CATEGORIES) {\r\n          setError(`Maximum ${MAX_MAIN_CATEGORIES} categories allowed`)\r\n          return prev\r\n        }\r\n        \r\n        const newCategory = {\r\n          categoryId,\r\n          enabled: true,\r\n          order: prev.categories.length + 1,\r\n          subcategories: []\r\n        }\r\n        \r\n        return {\r\n          ...prev,\r\n          categories: [...prev.categories, newCategory],\r\n          categoryIds: [...prev.categoryIds, categoryId]\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  const selectedCategoriesCount = categoryConfig.categories.length\r\n  const selectedSubcategoriesCount = categoryConfig.categories.reduce(\r\n    (total, cat) => total + (cat.subcategories?.length || 0), \r\n    0\r\n  )\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n            Page Management\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Configure content sections for your website pages\r\n          </p>\r\n        </div>\r\n        \r\n        <ModernButton\r\n          variant=\"ghost\"\r\n          onClick={() => onNavigate?.('dashboard')}\r\n          icon={\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n            </svg>\r\n          }\r\n        >\r\n          Back to Dashboard\r\n        </ModernButton>\r\n      </div>\r\n\r\n      {/* Success/Error Messages */}\r\n      {success && (\r\n        <div className=\"p-4 bg-green-50 border border-green-200 rounded-modern-lg\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n            </svg>\r\n            <p className=\"text-green-800 font-medium\">{success}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {error && (\r\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-modern-lg\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <svg className=\"w-5 h-5 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            <p className=\"text-red-800 font-medium\">{error}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Page Selection */}\r\n      <ModernCard>\r\n        <ModernCard.Header>\r\n          <h2 className=\"text-xl font-semibold text-gray-900\">Select Page</h2>\r\n          <p className=\"text-gray-600 mt-1\">Choose which page to configure</p>\r\n        </ModernCard.Header>\r\n        \r\n        <ModernCard.Body>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {PAGES.map((page) => (\r\n              <div\r\n                key={page.key}\r\n                className={`p-4 border rounded-modern-lg cursor-pointer transition-all ${\r\n                  selectedPage === page.key\r\n                    ? 'border-blue-500 bg-blue-50 shadow-modern-md'\r\n                    : 'border-gray-200 hover:border-gray-300 hover:shadow-modern-sm'\r\n                }`}\r\n                onClick={() => setSelectedPage(page.key)}\r\n              >\r\n                <div className=\"flex items-start gap-3\">\r\n                  <span className=\"text-2xl\">{page.icon}</span>\r\n                  <div>\r\n                    <h3 className=\"font-semibold text-gray-900\">{page.label}</h3>\r\n                    <p className=\"text-sm text-gray-600 mt-1\">{page.description}</p>\r\n                    {selectedPage === page.key && (\r\n                      <ModernBadge variant=\"primary\" size=\"sm\" className=\"mt-2\">\r\n                        Selected\r\n                      </ModernBadge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </ModernCard.Body>\r\n      </ModernCard>\r\n\r\n      {/* Category Configuration */}\r\n      <ModernLoadingOverlay isLoading={loading}>\r\n        <ModernCard>\r\n          <ModernCard.Header>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold text-gray-900\">Category Section</h2>\r\n                <p className=\"text-gray-600 mt-1\">Configure category display for {PAGES.find(p => p.key === selectedPage)?.label}</p>\r\n              </div>\r\n              \r\n              <div className=\"flex items-center gap-3\">\r\n                <ModernBadge variant={categoryConfig.enabled ? 'success' : 'neutral'}>\r\n                  {categoryConfig.enabled ? 'Enabled' : 'Disabled'}\r\n                </ModernBadge>\r\n                \r\n                <label className=\"flex items-center gap-2 cursor-pointer\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={categoryConfig.enabled}\r\n                    onChange={(e) => setCategoryConfig(prev => ({ ...prev, enabled: e.target.checked }))}\r\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                  />\r\n                  <span className=\"text-sm font-medium text-gray-700\">Enable Section</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </ModernCard.Header>\r\n\r\n          <ModernCard.Body>\r\n            {categoryConfig.enabled ? (\r\n              <div className=\"space-y-6\">\r\n                {/* Configuration Options */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <ModernInput\r\n                    label=\"Max Categories\"\r\n                    type=\"number\"\r\n                    value={categoryConfig.maxCategories}\r\n                    onChange={(e) => setCategoryConfig(prev => ({ \r\n                      ...prev, \r\n                      maxCategories: Math.max(1, Math.min(20, parseInt(e.target.value) || 1))\r\n                    }))}\r\n                    min=\"1\"\r\n                    max=\"20\"\r\n                  />\r\n                  \r\n                  <div className=\"form-group-modern\">\r\n                    <label className=\"form-label-modern\">Layout</label>\r\n                    <select\r\n                      value={categoryConfig.layout}\r\n                      onChange={(e) => setCategoryConfig(prev => ({ ...prev, layout: e.target.value }))}\r\n                      className=\"form-input-modern\"\r\n                    >\r\n                      <option value=\"grid\">Grid</option>\r\n                      <option value=\"list\">List</option>\r\n                      <option value=\"carousel\">Carousel</option>\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center h-full\">\r\n                    <label className=\"flex items-center gap-2 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={categoryConfig.showSubcategories}\r\n                        onChange={(e) => setCategoryConfig(prev => ({ ...prev, showSubcategories: e.target.checked }))}\r\n                        className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                      />\r\n                      <span className=\"text-sm font-medium text-gray-700\">Show Subcategories</span>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Statistics */}\r\n                <div className=\"flex items-center gap-6 p-4 bg-gray-50 rounded-modern-lg\">\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-blue-600\">{selectedCategoriesCount}</div>\r\n                    <div className=\"text-sm text-gray-600\">Selected Categories</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-green-600\">{selectedSubcategoriesCount}</div>\r\n                    <div className=\"text-sm text-gray-600\">Selected Subcategories</div>\r\n                  </div>\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-purple-600\">{availableCategories.length}</div>\r\n                    <div className=\"text-sm text-gray-600\">Available Categories</div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Category Selection */}\r\n                <div>\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Available Categories</h3>\r\n                    <ModernButton\r\n                      variant=\"secondary\"\r\n                      size=\"sm\"\r\n                      onClick={() => setShowCategoryConfig(!showCategoryConfig)}\r\n                    >\r\n                      {showCategoryConfig ? 'Hide' : 'Show'} Details\r\n                    </ModernButton>\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-64 overflow-y-auto\">\r\n                    {availableCategories.map((category) => {\r\n                      const isSelected = categoryConfig.categoryIds.includes(category._id)\r\n                      return (\r\n                        <div\r\n                          key={category._id}\r\n                          className={`p-3 border rounded-modern-lg cursor-pointer transition-all ${\r\n                            isSelected\r\n                              ? 'border-blue-500 bg-blue-50'\r\n                              : 'border-gray-200 hover:border-gray-300'\r\n                          }`}\r\n                          onClick={() => toggleCategorySelection(category._id)}\r\n                        >\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              checked={isSelected}\r\n                              onChange={() => {}}\r\n                              className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\r\n                            />\r\n                            <span className=\"font-medium text-gray-900\">{category.name}</span>\r\n                          </div>\r\n                          {category.subcategories && (\r\n                            <p className=\"text-xs text-gray-500 mt-1\">\r\n                              {category.subcategories.length} subcategories\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      )\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-12\">\r\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\r\n                  <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-lg font-medium text-gray-700 mb-2\">Section Disabled</h3>\r\n                <p className=\"text-gray-500\">Enable the section to configure category display options</p>\r\n              </div>\r\n            )}\r\n          </ModernCard.Body>\r\n\r\n          <ModernCard.Footer>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"text-sm text-gray-500\">\r\n                Last saved: {pageConfig?.updatedAt ? new Date(pageConfig.updatedAt).toLocaleString() : 'Never'}\r\n              </div>\r\n              \r\n              <div className=\"flex items-center gap-3\">\r\n                <ModernButton\r\n                  variant=\"secondary\"\r\n                  onClick={loadPageConfiguration}\r\n                  disabled={loading || saving}\r\n                >\r\n                  Reset\r\n                </ModernButton>\r\n                \r\n                <ModernButton\r\n                  variant=\"primary\"\r\n                  loading={saving}\r\n                  onClick={saveConfiguration}\r\n                  disabled={loading}\r\n                >\r\n                  Save Configuration\r\n                </ModernButton>\r\n              </div>\r\n            </div>\r\n          </ModernCard.Footer>\r\n        </ModernCard>\r\n      </ModernLoadingOverlay>\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}