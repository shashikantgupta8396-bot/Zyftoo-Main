{
    "sourceFile": "Ninico/components/admin/sections/CategorySectionManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753110070242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753113503396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,97 @@\n 'use client'\r\n import React, { useState, useEffect } from 'react'\r\n import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n+import { get, put } from '@/util/apiService'\r\n \r\n export default function CategorySectionManager({ pageKey, sectionKey, sectionData, onUpdate, onClose }) {\r\n-  const [categories, setCategories] = useState([\r\n-    { id: 'cat1', name: 'Fashion & Clothing', enabled: true, image: '/assets/img/product/category/cat-1.jpg' },\r\n-    { id: 'cat2', name: 'Electronics', enabled: true, image: '/assets/img/product/category/cat-2.jpg' },\r\n-    { id: 'cat3', name: 'Home & Living', enabled: false, image: '/assets/img/product/category/cat-3.jpg' },\r\n-    { id: 'cat4', name: 'Health & Beauty', enabled: true, image: '/assets/img/product/category/cat-4.jpg' },\r\n-    { id: 'cat5', name: 'Sports & Outdoor', enabled: false, image: '/assets/img/product/category/cat-5.jpg' },\r\n-    { id: 'cat6', name: 'Books & Media', enabled: true, image: '/assets/img/product/category/cat-6.jpg' },\r\n-  ])\r\n-  const [sectionVisible, setSectionVisible] = useState(sectionData?.visible ?? true)\r\n+  const [categories, setCategories] = useState([])\r\n+  const [availableCategories, setAvailableCategories] = useState([])\r\n+  const [sectionVisible, setSectionVisible] = useState(sectionData?.enabled ?? true)\r\n+  const [maxCategories, setMaxCategories] = useState(sectionData?.config?.maxCategories ?? 6)\r\n   const [hasChanges, setHasChanges] = useState(false)\r\n+  const [loading, setLoading] = useState(true)\r\n \r\n+  // Fetch section configuration and available categories\r\n+  useEffect(() => {\r\n+    const fetchSectionData = async () => {\r\n+      try {\r\n+        setLoading(true)\r\n+        \r\n+        // Fetch current section configuration\r\n+        const sectionResponse = await get(`/api/pages/${pageKey}/sections/${sectionKey}`)\r\n+        \r\n+        if (sectionResponse) {\r\n+          setSectionVisible(sectionResponse.enabled ?? true)\r\n+          setMaxCategories(sectionResponse.config?.maxCategories ?? 6)\r\n+          \r\n+          // Get available categories from database\r\n+          const categoriesResponse = await get('/api/categories')\r\n+          console.log('Raw categories response:', categoriesResponse)\r\n+          \r\n+          // Normalize categories to ensure consistent ID field\r\n+          const normalizedCategories = (categoriesResponse || []).map(cat => ({\r\n+            ...cat,\r\n+            id: cat.id || cat._id, // Ensure we have an id field\r\n+            _id: cat._id || cat.id  // Keep _id for compatibility\r\n+          }))\r\n+          \r\n+          setAvailableCategories(normalizedCategories)\r\n+          \r\n+          // Map configured categories with actual category data\r\n+          if (sectionResponse.config?.categories && normalizedCategories.length > 0) {\r\n+            const configuredCategories = sectionResponse.config.categories.map(configCat => {\r\n+              const actualCategory = normalizedCategories.find(cat => \r\n+                cat.id === configCat.categoryId || cat._id === configCat.categoryId\r\n+              )\r\n+              return {\r\n+                id: configCat.categoryId,\r\n+                name: actualCategory?.name || 'Unknown Category',\r\n+                enabled: configCat.enabled ?? true,\r\n+                image: actualCategory?.image?.url || actualCategory?.image || '/assets/img/product/category/default-category.svg',\r\n+                order: configCat.order ?? 0,\r\n+                subcategories: actualCategory?.subcategories || []\r\n+              }\r\n+            }).sort((a, b) => a.order - b.order)\r\n+            \r\n+            setCategories(configuredCategories)\r\n+          } else {\r\n+            // If no configuration exists, use all available categories\r\n+            const defaultCategories = normalizedCategories.slice(0, maxCategories).map((cat, index) => ({\r\n+              id: cat.id || cat._id,\r\n+              name: cat.name,\r\n+              enabled: true,\r\n+              image: cat.image || cat.icon || '/assets/img/product/category/default-category.svg',\r\n+              order: index,\r\n+              subcategories: cat.subcategories || []\r\n+            }))\r\n+            setCategories(defaultCategories)\r\n+          }\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Failed to fetch section data:', error)\r\n+      } finally {\r\n+        setLoading(false)\r\n+      }\r\n+    }\r\n+\r\n+    fetchSectionData()\r\n+  }, [pageKey, sectionKey])\r\n+\r\n   const handleDragEnd = (result) => {\r\n     if (!result.destination) return\r\n \r\n     const items = Array.from(categories)\r\n     const [reorderedItem] = items.splice(result.source.index, 1)\r\n     items.splice(result.destination.index, 0, reorderedItem)\r\n \r\n-    setCategories(items)\r\n+    // Update order values\r\n+    const reorderedItems = items.map((item, index) => ({\r\n+      ...item,\r\n+      order: index\r\n+    }))\r\n+\r\n+    setCategories(reorderedItems)\r\n     setHasChanges(true)\r\n   }\r\n \r\n   const toggleCategory = (categoryId) => {\r\n@@ -38,79 +107,115 @@\n     setSectionVisible(prev => !prev)\r\n     setHasChanges(true)\r\n   }\r\n \r\n+  const handleMaxCategoriesChange = (value) => {\r\n+    setMaxCategories(parseInt(value))\r\n+    setHasChanges(true)\r\n+  }\r\n+\r\n   const addNewCategory = () => {\r\n-    const newId = `cat${Date.now()}`\r\n-    const newCategory = {\r\n-      id: newId,\r\n-      name: 'New Category',\r\n-      enabled: true,\r\n-      image: '/assets/img/product/category/default.jpg'\r\n+    // Show modal to select from available categories not already in the list\r\n+    const usedCategoryIds = categories.map(cat => cat.id)\r\n+    const unusedCategories = availableCategories.filter(cat => !usedCategoryIds.includes(cat.id))\r\n+    \r\n+    if (unusedCategories.length > 0) {\r\n+      const newCategory = unusedCategories[0]\r\n+      const categoryToAdd = {\r\n+        id: newCategory.id,\r\n+        name: newCategory.name,\r\n+        enabled: true,\r\n+        image: newCategory.image || newCategory.icon || '/assets/img/product/category/default-category.svg',\r\n+        order: categories.length,\r\n+        subcategories: newCategory.subcategories || []\r\n+      }\r\n+      setCategories(prev => [...prev, categoryToAdd])\r\n+      setHasChanges(true)\r\n     }\r\n-    setCategories(prev => [...prev, newCategory])\r\n-    setHasChanges(true)\r\n   }\r\n \r\n   const removeCategory = (categoryId) => {\r\n     setCategories(prev => prev.filter(cat => cat.id !== categoryId))\r\n     setHasChanges(true)\r\n   }\r\n \r\n-  const editCategoryName = (categoryId, newName) => {\r\n-    setCategories(prev => prev.map(cat => \r\n-      cat.id === categoryId \r\n-        ? { ...cat, name: newName }\r\n-        : cat\r\n-    ))\r\n-    setHasChanges(true)\r\n+  const saveChanges = async () => {\r\n+    try {\r\n+      const updatedSectionData = {\r\n+        enabled: sectionVisible,\r\n+        config: {\r\n+          maxCategories: maxCategories,\r\n+          categories: categories.map(cat => ({\r\n+            categoryId: cat.id,\r\n+            enabled: cat.enabled,\r\n+            order: cat.order\r\n+          }))\r\n+        }\r\n+      }\r\n+      \r\n+      const response = await put(`/api/pages/${pageKey}/sections/${sectionKey}`, updatedSectionData)\r\n+      \r\n+      if (response.success) {\r\n+        onUpdate(pageKey, sectionKey, updatedSectionData)\r\n+        setHasChanges(false)\r\n+        \r\n+        // Show success message\r\n+        const toast = document.createElement('div')\r\n+        toast.className = 'position-fixed top-0 end-0 p-3'\r\n+        toast.style.zIndex = '9999'\r\n+        toast.innerHTML = `\r\n+          <div class=\"toast show bg-success text-white\">\r\n+            <div class=\"toast-body\">\r\n+              <i class=\"bi bi-check-circle me-2\"></i>\r\n+              Category section updated successfully!\r\n+            </div>\r\n+          </div>\r\n+        `\r\n+        document.body.appendChild(toast)\r\n+        setTimeout(() => document.body.removeChild(toast), 3000)\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Failed to save changes:', error)\r\n+      \r\n+      // Show error message\r\n+      const toast = document.createElement('div')\r\n+      toast.className = 'position-fixed top-0 end-0 p-3'\r\n+      toast.style.zIndex = '9999'\r\n+      toast.innerHTML = `\r\n+        <div class=\"toast show bg-danger text-white\">\r\n+          <div class=\"toast-body\">\r\n+            <i class=\"bi bi-x-circle me-2\"></i>\r\n+            Failed to save changes. Please try again.\r\n+          </div>\r\n+        </div>\r\n+      `\r\n+      document.body.appendChild(toast)\r\n+      setTimeout(() => document.body.removeChild(toast), 3000)\r\n+    }\r\n   }\r\n \r\n-  const saveChanges = () => {\r\n-    const updatedSectionData = {\r\n-      ...sectionData,\r\n-      visible: sectionVisible,\r\n-      categories: categories\r\n-    }\r\n-    \r\n-    onUpdate(pageKey, sectionKey, updatedSectionData)\r\n-    setHasChanges(false)\r\n-    \r\n-    // Show success message\r\n-    const toast = document.createElement('div')\r\n-    toast.className = 'position-fixed top-0 end-0 p-3'\r\n-    toast.style.zIndex = '9999'\r\n-    toast.innerHTML = `\r\n-      <div class=\"toast show bg-success text-white\">\r\n-        <div class=\"toast-body\">\r\n-          <i class=\"bi bi-check-circle me-2\"></i>\r\n-          Category section updated successfully!\r\n+  const resetChanges = () => {\r\n+    // Reload from server\r\n+    window.location.reload()\r\n+  }\r\n+\r\n+  if (loading) {\r\n+    return (\r\n+      <div className=\"container-fluid p-4\">\r\n+        <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '300px' }}>\r\n+          <div className=\"spinner-border text-primary\" role=\"status\">\r\n+            <span className=\"visually-hidden\">Loading...</span>\r\n+          </div>\r\n         </div>\r\n       </div>\r\n-    `\r\n-    document.body.appendChild(toast)\r\n-    setTimeout(() => document.body.removeChild(toast), 3000)\r\n+    )\r\n   }\r\n \r\n-  const resetChanges = () => {\r\n-    // Reset to original state\r\n-    setSectionVisible(sectionData?.visible ?? true)\r\n-    setCategories([\r\n-      { id: 'cat1', name: 'Fashion & Clothing', enabled: true, image: '/assets/img/product/category/cat-1.jpg' },\r\n-      { id: 'cat2', name: 'Electronics', enabled: true, image: '/assets/img/product/category/cat-2.jpg' },\r\n-      { id: 'cat3', name: 'Home & Living', enabled: false, image: '/assets/img/product/category/cat-3.jpg' },\r\n-      { id: 'cat4', name: 'Health & Beauty', enabled: true, image: '/assets/img/product/category/cat-4.jpg' },\r\n-      { id: 'cat5', name: 'Sports & Outdoor', enabled: false, image: '/assets/img/product/category/cat-5.jpg' },\r\n-      { id: 'cat6', name: 'Books & Media', enabled: true, image: '/assets/img/product/category/cat-6.jpg' },\r\n-    ])\r\n-    setHasChanges(false)\r\n-  }\r\n-\r\n   return (\r\n     <div className=\"container-fluid p-4\">\r\n       {/* Header Controls */}\r\n       <div className=\"row mb-4\">\r\n-        <div className=\"col-md-6\">\r\n+        <div className=\"col-md-4\">\r\n           <div className=\"card border-primary\">\r\n             <div className=\"card-body\">\r\n               <h6 className=\"card-title mb-3\">\r\n                 <i className=\"bi bi-eye me-2\"></i>\r\n@@ -130,9 +235,29 @@\n               </div>\r\n             </div>\r\n           </div>\r\n         </div>\r\n-        <div className=\"col-md-6\">\r\n+        <div className=\"col-md-4\">\r\n+          <div className=\"card border-warning\">\r\n+            <div className=\"card-body\">\r\n+              <h6 className=\"card-title mb-3\">\r\n+                <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n+                Display Settings\r\n+              </h6>\r\n+              <label htmlFor=\"maxCategories\" className=\"form-label\">Max Categories to Show</label>\r\n+              <input\r\n+                type=\"number\"\r\n+                className=\"form-control\"\r\n+                id=\"maxCategories\"\r\n+                value={maxCategories}\r\n+                onChange={(e) => handleMaxCategoriesChange(e.target.value)}\r\n+                min=\"1\"\r\n+                max=\"20\"\r\n+              />\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+        <div className=\"col-md-4\">\r\n           <div className=\"card border-success\">\r\n             <div className=\"card-body\">\r\n               <h6 className=\"card-title mb-3\">\r\n                 <i className=\"bi bi-plus-circle me-2\"></i>\r\n@@ -140,8 +265,9 @@\n               </h6>\r\n               <button \r\n                 className=\"btn btn-success btn-sm me-2\"\r\n                 onClick={addNewCategory}\r\n+                disabled={categories.length >= availableCategories.length}\r\n               >\r\n                 <i className=\"bi bi-plus me-1\"></i>\r\n                 Add Category\r\n               </button>\r\n@@ -163,9 +289,9 @@\n           <h5 className=\"card-title mb-0\">\r\n             <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n             Categories Management\r\n           </h5>\r\n-          <small className=\"text-muted\">Drag and drop to reorder categories</small>\r\n+          <small className=\"text-muted\">Drag and drop to reorder categories. Only enabled categories will show on homepage.</small>\r\n         </div>\r\n         <div className=\"card-body p-0\">\r\n           <DragDropContext onDragEnd={handleDragEnd}>\r\n             <Droppable droppableId=\"categories\">\r\n@@ -175,9 +301,9 @@\n                   ref={provided.innerRef}\r\n                   className={`list-group list-group-flush ${snapshot.isDraggingOver ? 'bg-light' : ''}`}\r\n                   style={{ minHeight: '200px' }}\r\n                 >\r\n-                  {categories.map((category, index) => (\r\n+                  {categories.slice(0, maxCategories).map((category, index) => (\r\n                     <Draggable key={category.id} draggableId={category.id} index={index}>\r\n                       {(provided, snapshot) => (\r\n                         <div\r\n                           ref={provided.innerRef}\r\n@@ -197,19 +323,16 @@\n                               src={category.image} \r\n                               alt={category.name}\r\n                               className=\"rounded me-3\"\r\n                               style={{ width: '50px', height: '50px', objectFit: 'cover' }}\r\n+                              onError={(e) => {\r\n+                                e.target.src = '/assets/img/product/category/default-category.svg'\r\n+                              }}\r\n                             />\r\n                             \r\n                             <div className=\"flex-grow-1\">\r\n-                              <input\r\n-                                type=\"text\"\r\n-                                className=\"form-control border-0 fw-bold\"\r\n-                                value={category.name}\r\n-                                onChange={(e) => editCategoryName(category.id, e.target.value)}\r\n-                                style={{ backgroundColor: 'transparent' }}\r\n-                              />\r\n-                              <small className=\"text-muted\">ID: {category.id}</small>\r\n+                              <div className=\"fw-bold\">{category.name}</div>\r\n+                              <small className=\"text-muted\">ID: {category.id} • Order: {category.order}</small>\r\n                             </div>\r\n                             \r\n                             <div className=\"d-flex align-items-center gap-2\">\r\n                               <div className=\"form-check form-switch\">\r\n@@ -227,9 +350,9 @@\n                               \r\n                               <button \r\n                                 className=\"btn btn-outline-danger btn-sm\"\r\n                                 onClick={() => removeCategory(category.id)}\r\n-                                title=\"Remove category\"\r\n+                                title=\"Remove from display\"\r\n                               >\r\n                                 <i className=\"bi bi-trash\"></i>\r\n                               </button>\r\n                             </div>\r\n@@ -242,8 +365,16 @@\n                 </div>\r\n               )}\r\n             </Droppable>\r\n           </DragDropContext>\r\n+          \r\n+          {categories.length > maxCategories && (\r\n+            <div className=\"alert alert-warning m-3\">\r\n+              <i className=\"bi bi-info-circle me-2\"></i>\r\n+              You have {categories.length} categories configured, but only {maxCategories} will be displayed. \r\n+              Increase the \"Max Categories\" setting to show more.\r\n+            </div>\r\n+          )}\r\n         </div>\r\n       </div>\r\n \r\n       {/* Stats */}\r\n@@ -251,9 +382,9 @@\n         <div className=\"col-md-3\">\r\n           <div className=\"card bg-primary text-white\">\r\n             <div className=\"card-body text-center\">\r\n               <h4>{categories.length}</h4>\r\n-              <small>Total Categories</small>\r\n+              <small>Configured Categories</small>\r\n             </div>\r\n           </div>\r\n         </div>\r\n         <div className=\"col-md-3\">\r\n@@ -266,10 +397,10 @@\n         </div>\r\n         <div className=\"col-md-3\">\r\n           <div className=\"card bg-warning text-white\">\r\n             <div className=\"card-body text-center\">\r\n-              <h4>{categories.filter(cat => !cat.enabled).length}</h4>\r\n-              <small>Hidden Categories</small>\r\n+              <h4>{Math.min(categories.filter(cat => cat.enabled).length, maxCategories)}</h4>\r\n+              <small>Will Display</small>\r\n             </div>\r\n           </div>\r\n         </div>\r\n         <div className=\"col-md-3\">\r\n@@ -293,9 +424,9 @@\n                   Unsaved Changes\r\n                 </span>\r\n               )}\r\n               <small className=\"text-muted\">\r\n-                Last updated: {new Date().toLocaleString()}\r\n+                Configuration will affect the homepage display\r\n               </small>\r\n             </div>\r\n             <div>\r\n               <button \r\n"
                }
            ],
            "date": 1753110070242,
            "name": "Commit-0",
            "content": "'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nexport default function CategorySectionManager({ pageKey, sectionKey, sectionData, onUpdate, onClose }) {\r\n  const [categories, setCategories] = useState([\r\n    { id: 'cat1', name: 'Fashion & Clothing', enabled: true, image: '/assets/img/product/category/cat-1.jpg' },\r\n    { id: 'cat2', name: 'Electronics', enabled: true, image: '/assets/img/product/category/cat-2.jpg' },\r\n    { id: 'cat3', name: 'Home & Living', enabled: false, image: '/assets/img/product/category/cat-3.jpg' },\r\n    { id: 'cat4', name: 'Health & Beauty', enabled: true, image: '/assets/img/product/category/cat-4.jpg' },\r\n    { id: 'cat5', name: 'Sports & Outdoor', enabled: false, image: '/assets/img/product/category/cat-5.jpg' },\r\n    { id: 'cat6', name: 'Books & Media', enabled: true, image: '/assets/img/product/category/cat-6.jpg' },\r\n  ])\r\n  const [sectionVisible, setSectionVisible] = useState(sectionData?.visible ?? true)\r\n  const [hasChanges, setHasChanges] = useState(false)\r\n\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) return\r\n\r\n    const items = Array.from(categories)\r\n    const [reorderedItem] = items.splice(result.source.index, 1)\r\n    items.splice(result.destination.index, 0, reorderedItem)\r\n\r\n    setCategories(items)\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const toggleCategory = (categoryId) => {\r\n    setCategories(prev => prev.map(cat => \r\n      cat.id === categoryId \r\n        ? { ...cat, enabled: !cat.enabled }\r\n        : cat\r\n    ))\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const toggleSectionVisibility = () => {\r\n    setSectionVisible(prev => !prev)\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const addNewCategory = () => {\r\n    const newId = `cat${Date.now()}`\r\n    const newCategory = {\r\n      id: newId,\r\n      name: 'New Category',\r\n      enabled: true,\r\n      image: '/assets/img/product/category/default.jpg'\r\n    }\r\n    setCategories(prev => [...prev, newCategory])\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const removeCategory = (categoryId) => {\r\n    setCategories(prev => prev.filter(cat => cat.id !== categoryId))\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const editCategoryName = (categoryId, newName) => {\r\n    setCategories(prev => prev.map(cat => \r\n      cat.id === categoryId \r\n        ? { ...cat, name: newName }\r\n        : cat\r\n    ))\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const saveChanges = () => {\r\n    const updatedSectionData = {\r\n      ...sectionData,\r\n      visible: sectionVisible,\r\n      categories: categories\r\n    }\r\n    \r\n    onUpdate(pageKey, sectionKey, updatedSectionData)\r\n    setHasChanges(false)\r\n    \r\n    // Show success message\r\n    const toast = document.createElement('div')\r\n    toast.className = 'position-fixed top-0 end-0 p-3'\r\n    toast.style.zIndex = '9999'\r\n    toast.innerHTML = `\r\n      <div class=\"toast show bg-success text-white\">\r\n        <div class=\"toast-body\">\r\n          <i class=\"bi bi-check-circle me-2\"></i>\r\n          Category section updated successfully!\r\n        </div>\r\n      </div>\r\n    `\r\n    document.body.appendChild(toast)\r\n    setTimeout(() => document.body.removeChild(toast), 3000)\r\n  }\r\n\r\n  const resetChanges = () => {\r\n    // Reset to original state\r\n    setSectionVisible(sectionData?.visible ?? true)\r\n    setCategories([\r\n      { id: 'cat1', name: 'Fashion & Clothing', enabled: true, image: '/assets/img/product/category/cat-1.jpg' },\r\n      { id: 'cat2', name: 'Electronics', enabled: true, image: '/assets/img/product/category/cat-2.jpg' },\r\n      { id: 'cat3', name: 'Home & Living', enabled: false, image: '/assets/img/product/category/cat-3.jpg' },\r\n      { id: 'cat4', name: 'Health & Beauty', enabled: true, image: '/assets/img/product/category/cat-4.jpg' },\r\n      { id: 'cat5', name: 'Sports & Outdoor', enabled: false, image: '/assets/img/product/category/cat-5.jpg' },\r\n      { id: 'cat6', name: 'Books & Media', enabled: true, image: '/assets/img/product/category/cat-6.jpg' },\r\n    ])\r\n    setHasChanges(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid p-4\">\r\n      {/* Header Controls */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"card border-primary\">\r\n            <div className=\"card-body\">\r\n              <h6 className=\"card-title mb-3\">\r\n                <i className=\"bi bi-eye me-2\"></i>\r\n                Section Visibility\r\n              </h6>\r\n              <div className=\"form-check form-switch\">\r\n                <input \r\n                  className=\"form-check-input\" \r\n                  type=\"checkbox\" \r\n                  id=\"sectionVisibility\"\r\n                  checked={sectionVisible}\r\n                  onChange={toggleSectionVisibility}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"sectionVisibility\">\r\n                  {sectionVisible ? 'Section is visible on homepage' : 'Section is hidden from homepage'}\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"card border-success\">\r\n            <div className=\"card-body\">\r\n              <h6 className=\"card-title mb-3\">\r\n                <i className=\"bi bi-plus-circle me-2\"></i>\r\n                Quick Actions\r\n              </h6>\r\n              <button \r\n                className=\"btn btn-success btn-sm me-2\"\r\n                onClick={addNewCategory}\r\n              >\r\n                <i className=\"bi bi-plus me-1\"></i>\r\n                Add Category\r\n              </button>\r\n              <button \r\n                className=\"btn btn-outline-secondary btn-sm\"\r\n                onClick={() => setCategories(prev => prev.map(cat => ({ ...cat, enabled: !cat.enabled })))}\r\n              >\r\n                <i className=\"bi bi-arrow-repeat me-1\"></i>\r\n                Toggle All\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Categories Management */}\r\n      <div className=\"card\">\r\n        <div className=\"card-header bg-light\">\r\n          <h5 className=\"card-title mb-0\">\r\n            <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n            Categories Management\r\n          </h5>\r\n          <small className=\"text-muted\">Drag and drop to reorder categories</small>\r\n        </div>\r\n        <div className=\"card-body p-0\">\r\n          <DragDropContext onDragEnd={handleDragEnd}>\r\n            <Droppable droppableId=\"categories\">\r\n              {(provided, snapshot) => (\r\n                <div\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                  className={`list-group list-group-flush ${snapshot.isDraggingOver ? 'bg-light' : ''}`}\r\n                  style={{ minHeight: '200px' }}\r\n                >\r\n                  {categories.map((category, index) => (\r\n                    <Draggable key={category.id} draggableId={category.id} index={index}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          className={`list-group-item ${snapshot.isDragging ? 'shadow-lg' : ''} ${!category.enabled ? 'opacity-50' : ''}`}\r\n                        >\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <div \r\n                              {...provided.dragHandleProps}\r\n                              className=\"me-3 text-muted\"\r\n                              style={{ cursor: 'grab' }}\r\n                            >\r\n                              <i className=\"bi bi-grip-vertical\"></i>\r\n                            </div>\r\n                            \r\n                            <img \r\n                              src={category.image} \r\n                              alt={category.name}\r\n                              className=\"rounded me-3\"\r\n                              style={{ width: '50px', height: '50px', objectFit: 'cover' }}\r\n                            />\r\n                            \r\n                            <div className=\"flex-grow-1\">\r\n                              <input\r\n                                type=\"text\"\r\n                                className=\"form-control border-0 fw-bold\"\r\n                                value={category.name}\r\n                                onChange={(e) => editCategoryName(category.id, e.target.value)}\r\n                                style={{ backgroundColor: 'transparent' }}\r\n                              />\r\n                              <small className=\"text-muted\">ID: {category.id}</small>\r\n                            </div>\r\n                            \r\n                            <div className=\"d-flex align-items-center gap-2\">\r\n                              <div className=\"form-check form-switch\">\r\n                                <input \r\n                                  className=\"form-check-input\" \r\n                                  type=\"checkbox\" \r\n                                  id={`cat-${category.id}`}\r\n                                  checked={category.enabled}\r\n                                  onChange={() => toggleCategory(category.id)}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor={`cat-${category.id}`}>\r\n                                  <small>{category.enabled ? 'Visible' : 'Hidden'}</small>\r\n                                </label>\r\n                              </div>\r\n                              \r\n                              <button \r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                                onClick={() => removeCategory(category.id)}\r\n                                title=\"Remove category\"\r\n                              >\r\n                                <i className=\"bi bi-trash\"></i>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats */}\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card bg-primary text-white\">\r\n            <div className=\"card-body text-center\">\r\n              <h4>{categories.length}</h4>\r\n              <small>Total Categories</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card bg-success text-white\">\r\n            <div className=\"card-body text-center\">\r\n              <h4>{categories.filter(cat => cat.enabled).length}</h4>\r\n              <small>Visible Categories</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card bg-warning text-white\">\r\n            <div className=\"card-body text-center\">\r\n              <h4>{categories.filter(cat => !cat.enabled).length}</h4>\r\n              <small>Hidden Categories</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <div className=\"card bg-info text-white\">\r\n            <div className=\"card-body text-center\">\r\n              <h4>{sectionVisible ? 'ON' : 'OFF'}</h4>\r\n              <small>Section Status</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Footer Actions */}\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-12\">\r\n          <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n            <div>\r\n              {hasChanges && (\r\n                <span className=\"badge bg-warning me-2\">\r\n                  <i className=\"bi bi-exclamation-triangle me-1\"></i>\r\n                  Unsaved Changes\r\n                </span>\r\n              )}\r\n              <small className=\"text-muted\">\r\n                Last updated: {new Date().toLocaleString()}\r\n              </small>\r\n            </div>\r\n            <div>\r\n              <button \r\n                className=\"btn btn-outline-secondary me-2\"\r\n                onClick={resetChanges}\r\n                disabled={!hasChanges}\r\n              >\r\n                <i className=\"bi bi-arrow-clockwise me-1\"></i>\r\n                Reset\r\n              </button>\r\n              <button \r\n                className=\"btn btn-success me-2\"\r\n                onClick={saveChanges}\r\n                disabled={!hasChanges}\r\n              >\r\n                <i className=\"bi bi-check-lg me-1\"></i>\r\n                Save Changes\r\n              </button>\r\n              <button \r\n                className=\"btn btn-secondary\"\r\n                onClick={onClose}\r\n              >\r\n                <i className=\"bi bi-x-lg me-1\"></i>\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}