{
    "sourceFile": "Ninico/components/admin/CategoriesPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1752833729959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752863702188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,543 @@\n+'use client'\n+import React, { useState, useEffect } from 'react'\n+import { get, post, put, del, uploadFile } from '@/util/apiService'\n+import { CATEGORY } from '@/util/apiEndpoints'\n+\n+export default function CategoriesPage({ onNavigate }) {\n+  const [activeView, setActiveView] = useState('list') // 'list' or 'add'\n+  const [categories, setCategories] = useState([])\n+  const [loading, setLoading] = useState(true)\n+  const [error, setError] = useState('')\n+  const [editingCategory, setEditingCategory] = useState(null)\n+\n+  const [formData, setFormData] = useState({\n+    name: '',\n+    description: '',\n+    parent: '', // For subcategories (using 'parent' to match backend schema)\n+    status: true,\n+    image: null // File object for upload\n+  })\n+\n+  // Hardcoded admin token for testing\n+  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\n+\n+  // Utility function to format hierarchical category names\n+  const formatCategoryHierarchy = (category) => {\n+    if (!category.parent || !category.parent.name) {\n+      return category.name\n+    }\n+    return `${category.parent.name} > ${category.name}`\n+  }\n+\n+  // Fetch categories from backend\n+  const fetchCategories = async () => {\n+    try {\n+      setLoading(true)\n+      \n+      // Temporarily store admin token\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\n+      \n+      const response = await get(CATEGORY.GET_ALL)\n+      console.log('Fetched categories response:', response)\n+      \n+      if (!response.success) {\n+        throw new Error(response.message || 'Failed to fetch categories')\n+      }\n+      \n+      console.log('Fetched categories:', response.data)\n+      \n+      // Sort categories to show main categories first, then subcategories\n+      const sortedCategories = response.data.sort((a, b) => {\n+        // Main categories first\n+        if (!a.parent && b.parent) return -1\n+        if (a.parent && !b.parent) return 1\n+        \n+        // Within same level, sort alphabetically\n+        if (!a.parent && !b.parent) {\n+          return a.name.localeCompare(b.name)\n+        }\n+        \n+        // For subcategories, sort by parent name first, then by subcategory name\n+        if (a.parent && b.parent) {\n+          const parentCompare = (a.parent.name || '').localeCompare(b.parent.name || '')\n+          if (parentCompare !== 0) return parentCompare\n+          return a.name.localeCompare(b.name)\n+        }\n+        \n+        return 0\n+      })\n+      \n+      console.log('Sorted categories:', sortedCategories)\n+      setCategories(sortedCategories)\n+      setError('')\n+    } catch (err) {\n+      console.error('Fetch categories error:', err)\n+      setError('Failed to load categories: ' + err.message)\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  // Create or update category\n+  const saveCategory = async (categoryData) => {\n+    try {\n+      // Create FormData for file upload\n+      const formDataToSend = new FormData()\n+      formDataToSend.append('name', categoryData.name)\n+      formDataToSend.append('description', categoryData.description || '')\n+      formDataToSend.append('status', categoryData.status)\n+      \n+      if (categoryData.parent) {\n+        formDataToSend.append('parent', categoryData.parent)\n+        formDataToSend.append('isSubcategory', 'true')\n+        \n+        // Find parent category name for proper folder structure\n+        const parentCategory = categories.find(cat => cat._id === categoryData.parent)\n+        if (parentCategory) {\n+          formDataToSend.append('parentCategoryName', parentCategory.name)\n+        }\n+      } else {\n+        formDataToSend.append('isSubcategory', 'false')\n+      }\n+      \n+      // Add category name for folder creation\n+      formDataToSend.append('categoryName', categoryData.name)\n+      \n+      // Add image file if selected\n+      if (categoryData.image) {\n+        formDataToSend.append('image', categoryData.image)\n+      }\n+      \n+      // Log all FormData key-value pairs\n+      for (let pair of formDataToSend.entries()) {\n+        console.log(pair[0]+ ':', pair[1]);\n+      }\n+      \n+      // Use appropriate endpoint and method\n+      const endpoint = editingCategory \n+        ? `${CATEGORY.UPDATE}/${editingCategory._id}`\n+        : CATEGORY.CREATE\n+      \n+      let response\n+      if (editingCategory) {\n+        // For updates with file uploads, we need to use the uploadFile method\n+        response = await uploadFile(endpoint, formDataToSend)\n+      } else {\n+        // For new categories with file uploads\n+        response = await uploadFile(endpoint, formDataToSend)\n+      }\n+\n+      if (!response.success) {\n+        throw new Error(response.message || 'Failed to save category')\n+      }\n+      \n+      // Refresh categories list\n+      fetchCategories()\n+      setActiveView('list')\n+      setEditingCategory(null)\n+      setFormData({ name: '', description: '', parent: '', status: true, image: null })\n+      \n+      return response.data\n+    } catch (err) {\n+      setError('Failed to save category: ' + err.message)\n+      throw err\n+    }\n+  }\n+\n+  // Delete category\n+  const deleteCategory = async (categoryId) => {\n+    if (!window.confirm('Are you sure you want to delete this category?')) {\n+      return\n+    }\n+\n+    try {\n+      const response = await del(`${CATEGORY.DELETE}/${categoryId}`)\n+\n+      if (!response.success) {\n+        throw new Error(response.message || 'Failed to delete category')\n+      }\n+\n+      // Refresh categories list\n+      fetchCategories()\n+    } catch (err) {\n+      setError('Failed to delete category: ' + err.message)\n+    }\n+  }\n+\n+  // Load categories on component mount\n+  useEffect(() => {\n+    fetchCategories()\n+  }, [])\n+\n+  const handleInputChange = (e) => {\n+    const { name, value, type, checked, files } = e.target\n+    setFormData(prev => ({\n+      ...prev,\n+      [name]: type === 'checkbox' ? checked : type === 'file' ? files[0] : value\n+    }))\n+  }\n+\n+  const handleSubmit = async (e) => {\n+    e.preventDefault()\n+    try {\n+      if (formData.image && formData.image.size > 5 * 1024 * 1024) {\n+        alert('Image must be less than 5MB');\n+        return;\n+      }\n+      await saveCategory(formData)\n+    } catch (err) {\n+      // Error is already handled in saveCategory\n+    }\n+  }\n+\n+  const handleEdit = (category) => {\n+    setEditingCategory(category)\n+    setFormData({\n+      name: category.name,\n+      description: category.description || '',\n+      parent: category.parent ? (category.parent._id || category.parent) : '',\n+      status: category.status\n+    })\n+    setActiveView('add')\n+  }\n+\n+  const renderCategoryList = () => {\n+    if (loading) {\n+      return (\n+        <div className=\"text-center py-5\">\n+          <div className=\"spinner-border text-primary\" role=\"status\">\n+            <span className=\"visually-hidden\">Loading...</span>\n+          </div>\n+          <p className=\"mt-2 text-muted\">Loading categories...</p>\n+        </div>\n+      )\n+    }\n+\n+    if (error) {\n+      return (\n+        <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n+          <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n+          <div>{error}</div>\n+          <button \n+            className=\"btn btn-outline-danger btn-sm ms-auto\"\n+            onClick={fetchCategories}\n+          >\n+            Retry\n+          </button>\n+        </div>\n+      )\n+    }\n+\n+    return (\n+      <div>\n+        {/* Stats Cards */}\n+        <div className=\"row mb-4\">\n+          <div className=\"col-md-4\">\n+            <div className=\"card border-0 shadow-sm\">\n+              <div className=\"card-body text-center\">\n+                <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n+                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n+                <small className=\"text-muted\">Main Categories</small>\n+              </div>\n+            </div>\n+          </div>\n+          <div className=\"col-md-4\">\n+            <div className=\"card border-0 shadow-sm\">\n+              <div className=\"card-body text-center\">\n+                <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n+                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.parent).length}</h4>\n+                <small className=\"text-muted\">Sub Categories</small>\n+              </div>\n+            </div>\n+          </div>\n+          <div className=\"col-md-4\">\n+            <div className=\"card border-0 shadow-sm\">\n+              <div className=\"card-body text-center\">\n+                <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n+                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.status).length}</h4>\n+                <small className=\"text-muted\">Active Categories</small>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+\n+        {/* Categories Table */}\n+        <div className=\"card border-0 shadow-sm\">\n+          <div className=\"card-header bg-white border-bottom\">\n+            <h5 className=\"mb-0 fw-semibold\">All Categories</h5>\n+          </div>\n+          <div className=\"card-body p-0\">\n+            {categories.length === 0 ? (\n+              <div className=\"text-center py-5\">\n+                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n+                <p className=\"mt-2 text-muted\">No categories found. Create your first category!</p>\n+                <button\n+                  className=\"btn btn-success\"\n+                  onClick={() => setActiveView('add')}\n+                >\n+                  <i className=\"bi bi-plus-circle me-2\"></i>\n+                  Add Category\n+                </button>\n+              </div>\n+            ) : (\n+              <div className=\"table-responsive\">\n+                <table className=\"table table-hover mb-0\">\n+                  <thead className=\"table-light\">\n+                    <tr>\n+                      <th className=\"ps-4\">Category Name</th>\n+                      <th>Image</th>\n+                      <th>Description</th>\n+                      <th>Type</th>\n+                      <th>Status</th>\n+                      <th className=\"text-center\">Actions</th>\n+                    </tr>\n+                  </thead>\n+                  <tbody>\n+                    {categories.map(category => (\n+                      <tr key={category._id} className={category.parent ? 'table-light' : ''}>\n+                        <td className=\"ps-4\">\n+                          <div className=\"d-flex align-items-center\">\n+                            {category.parent ? (\n+                              <>\n+                                <i className=\"bi bi-arrow-return-right text-muted me-2\"></i>\n+                                <i className=\"bi bi-tag text-secondary me-2\"></i>\n+                                <span>{formatCategoryHierarchy(category)}</span>\n+                              </>\n+                            ) : (\n+                              <>\n+                                <i className=\"bi bi-grid text-primary me-2\"></i>\n+                                <strong>{category.name}</strong>\n+                              </>\n+                            )}\n+                          </div>\n+                        </td>\n+                        <td>\n+                          {category.image?.url ? (\n+                            <img \n+                              src={category.image.url} \n+                              alt={category.name}\n+                              className=\"rounded\"\n+                              style={{ width: '40px', height: '40px', objectFit: 'cover' }}\n+                            />\n+                          ) : (\n+                            <div \n+                              className=\"bg-light rounded d-flex align-items-center justify-content-center\"\n+                              style={{ width: '40px', height: '40px' }}\n+                            >\n+                              <i className=\"bi bi-image text-muted\"></i>\n+                            </div>\n+                          )}\n+                        </td>\n+                        <td>{category.description || '-'}</td>\n+                        <td>\n+                          <span className={`badge ${category.parent ? 'bg-secondary' : 'bg-primary'}`}>\n+                            {category.parent ? 'Sub Category' : 'Main Category'}\n+                          </span>\n+                        </td>\n+                        <td>\n+                          <span className={`badge ${category.status ? 'bg-success' : 'bg-danger'}`}>\n+                            {category.status ? 'Active' : 'Inactive'}\n+                          </span>\n+                        </td>\n+                        <td className=\"text-center\">\n+                          <button \n+                            className=\"btn btn-sm btn-outline-primary me-1\"\n+                            onClick={() => handleEdit(category)}\n+                            title=\"Edit Category\"\n+                          >\n+                            <i className=\"bi bi-pencil\"></i>\n+                            <span className=\"d-none\">Edit</span>\n+                          </button>\n+                          <button \n+                            className=\"btn btn-sm btn-outline-danger\"\n+                            onClick={() => deleteCategory(category._id)}\n+                            title=\"Delete Category\"\n+                          >\n+                            <i className=\"bi bi-trash\"></i>\n+                            <span className=\"d-none\">Delete</span>\n+                          </button>\n+                        </td>\n+                      </tr>\n+                    ))}\n+                  </tbody>\n+                </table>\n+              </div>\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+    )\n+  }\n+\n+  const renderAddCategoryForm = () => (\n+    <div className=\"card border-0 shadow-sm\">\n+      <div className=\"card-header bg-white border-bottom\">\n+        <h5 className=\"mb-0 fw-semibold\">\n+          {editingCategory ? 'Edit Category' : 'Add New Category'}\n+        </h5>\n+      </div>\n+      <div className=\"card-body\">\n+        {error && (\n+          <div className=\"alert alert-danger d-flex align-items-center mb-3\" role=\"alert\">\n+            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n+            <div>{error}</div>\n+          </div>\n+        )}\n+        \n+        <form onSubmit={handleSubmit}>\n+          <div className=\"row\">\n+            <div className=\"col-md-6\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Category Name *</label>\n+                <input\n+                  type=\"text\"\n+                  className=\"form-control\"\n+                  name=\"name\"\n+                  value={formData.name}\n+                  onChange={handleInputChange}\n+                  required\n+                />\n+              </div>\n+            </div>\n+            <div className=\"col-md-6\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Parent Category</label>\n+                <select\n+                  className=\"form-select\"\n+                  name=\"parent\"\n+                  value={formData.parent}\n+                  onChange={handleInputChange}\n+                >\n+                  <option value=\"\">Main Category</option>\n+                  {categories.filter(cat => !cat.parent).map(category => (\n+                    <option key={category._id} value={category._id}>\n+                      {category.name}\n+                    </option>\n+                  ))}\n+                </select>\n+                <div className=\"form-text\">Leave empty for main category, select parent for subcategory</div>\n+              </div>\n+            </div>\n+            <div className=\"col-12\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Description</label>\n+                <textarea\n+                  className=\"form-control\"\n+                  name=\"description\"\n+                  value={formData.description}\n+                  onChange={handleInputChange}\n+                  rows=\"3\"\n+                />\n+              </div>\n+            </div>\n+            <div className=\"col-12\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Category Image</label>\n+                <input\n+                  type=\"file\"\n+                  className=\"form-control\"\n+                  name=\"image\"\n+                  onChange={handleInputChange}\n+                  accept=\"image/*\"\n+                />\n+                <div className=\"form-text\">\n+                  Upload an image for this category. Recommended size: 300x300px. \n+                  {formData.parent ? ' Will be saved in subcategories folder.' : ' Will be saved in main category folder.'}\n+                </div>\n+                {formData.image && (\n+                  <div className=\"mt-2\">\n+                    <small className=\"text-success\">\n+                      <i className=\"bi bi-check-circle me-1\"></i>\n+                      Selected: {formData.image.name}\n+                    </small>\n+                  </div>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"col-12\">\n+              <div className=\"mb-3\">\n+                <div className=\"form-check\">\n+                  <input\n+                    type=\"checkbox\"\n+                    className=\"form-check-input\"\n+                    name=\"status\"\n+                    checked={formData.status}\n+                    onChange={handleInputChange}\n+                  />\n+                  <label className=\"form-check-label\">Active Status</label>\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+          <div className=\"d-flex gap-2\">\n+            <button\n+              type=\"button\"\n+              className=\"btn btn-outline-secondary\"\n+              onClick={() => {\n+                setActiveView('list')\n+                setEditingCategory(null)\n+                setFormData({ name: '', description: '', parent: '', status: true })\n+                setError('')\n+              }}\n+            >\n+              <i className=\"bi bi-arrow-left me-2\"></i>\n+              Back to List\n+            </button>\n+            <button type=\"submit\" className=\"btn btn-success\">\n+              <i className=\"bi bi-check-circle me-2\"></i>\n+              {editingCategory ? 'Update Category' : 'Save Category'}\n+            </button>\n+          </div>\n+        </form>\n+      </div>\n+    </div>\n+  )\n+\n+  return (\n+    <>\n+      <style jsx>{`\n+        /* Fallback for when Bootstrap icons don't load */\n+        .btn i.bi-pencil:before {\n+          content: \"✏️\";\n+        }\n+        .btn i.bi-trash:before {\n+          content: \"🗑️\";\n+        }\n+        .btn i.bi-pencil:empty:before {\n+          content: \"Edit\";\n+          font-style: normal;\n+        }\n+        .btn i.bi-trash:empty:before {\n+          content: \"Delete\";\n+          font-style: normal;\n+        }\n+      `}</style>\n+      <div className=\"container-fluid\">\n+      {/* Page Header */}\n+      <div className=\"row mb-4\">\n+        <div className=\"col-12\">\n+          <div className=\"d-flex justify-content-between align-items-center\">\n+            <div>\n+              <h2 className=\"fw-bold text-dark mb-1\">Categories Management</h2>\n+              <p className=\"text-muted mb-0\">Manage product categories and subcategories</p>\n+            </div>\n+            <div className=\"d-flex gap-2\">\n+              {activeView === 'list' ? (\n+                <button\n+                  className=\"btn btn-success\"\n+                  onClick={() => setActiveView('add')}\n+                >\n+                  <i className=\"bi bi-plus-circle me-2\"></i>\n+                  Add Category\n+                </button>\n+              ) : null}\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {activeView === 'list' ? renderCategoryList() : renderAddCategoryForm()}\n+    </div>\n+    </>\n+  )\n+}\n"
                },
                {
                    "date": 1752864792997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,11 @@\n \n   // Create or update category\n   const saveCategory = async (categoryData) => {\n     try {\n+      console.log('Saving category data:', categoryData); // Debug log\n+      console.log('Editing category:', editingCategory); // Debug log\n+      \n       // Create FormData for file upload\n       const formDataToSend = new FormData()\n       formDataToSend.append('name', categoryData.name)\n       formDataToSend.append('description', categoryData.description || '')\n@@ -107,9 +110,15 @@\n       if (categoryData.image) {\n         formDataToSend.append('image', categoryData.image)\n       }\n       \n+      // For updates, add the category ID\n+      if (editingCategory) {\n+        formDataToSend.append('categoryId', editingCategory._id)\n+      }\n+      \n       // Log all FormData key-value pairs\n+      console.log('FormData contents:');\n       for (let pair of formDataToSend.entries()) {\n         console.log(pair[0]+ ':', pair[1]);\n       }\n       \n@@ -117,51 +126,111 @@\n       const endpoint = editingCategory \n         ? `${CATEGORY.UPDATE}/${editingCategory._id}`\n         : CATEGORY.CREATE\n       \n-      let response\n-      if (editingCategory) {\n-        // For updates with file uploads, we need to use the uploadFile method\n-        response = await uploadFile(endpoint, formDataToSend)\n+      const method = editingCategory ? 'PUT' : 'POST'\n+      \n+      console.log('Using endpoint:', endpoint, 'with method:', method); // Debug log\n+      \n+      // Use uploadFile with the correct method\n+      const response = await uploadFile(endpoint, formDataToSend, method)\n+      console.log('Save response:', response); // Debug log\n+\n+      // Check for success based on HTTP status and response format\n+      if (response.success || (response.status >= 200 && response.status < 300)) {\n+        // Show success message\n+        console.log(editingCategory ? 'Category updated successfully!' : 'Category created successfully!');\n+        alert(editingCategory ? 'Category updated successfully!' : 'Category created successfully!');\n+        \n+        // Reset form and go back to list\n+        setActiveView('list')\n+        setEditingCategory(null)\n+        setFormData({ name: '', description: '', parent: '', status: true, image: null })\n+        setError('')\n+        \n+        // Refresh categories list\n+        await fetchCategories()\n+        \n+        return response.data\n       } else {\n-        // For new categories with file uploads\n-        response = await uploadFile(endpoint, formDataToSend)\n+        throw new Error(response.message || response.data?.error || 'Failed to save category')\n       }\n-\n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to save category')\n-      }\n+    } catch (err) {\n+      console.error('Save category error:', err);\n+      console.error('Error details:', {\n+        message: err.message,\n+        status: err.status,\n+        data: err.data\n+      });\n       \n-      // Refresh categories list\n-      fetchCategories()\n-      setActiveView('list')\n-      setEditingCategory(null)\n-      setFormData({ name: '', description: '', parent: '', status: true, image: null })\n-      \n-      return response.data\n-    } catch (err) {\n-      setError('Failed to save category: ' + err.message)\n+      const errorMessage = err.message || 'Failed to save category'\n+      setError(errorMessage)\n+      alert(errorMessage)\n       throw err\n     }\n   }\n \n   // Delete category\n   const deleteCategory = async (categoryId) => {\n-    if (!window.confirm('Are you sure you want to delete this category?')) {\n+    // Find the category to check if it has subcategories\n+    const categoryToDelete = categories.find(cat => cat._id === categoryId)\n+    const hasSubcategories = categories.some(cat => cat.parent && cat.parent._id === categoryId)\n+    \n+    let confirmMessage = 'Are you sure you want to delete this category?'\n+    if (hasSubcategories) {\n+      confirmMessage = `This category \"${categoryToDelete?.name}\" has subcategories. All subcategories will also need to be deleted first. Are you sure you want to continue?`\n+    }\n+    \n+    if (!window.confirm(confirmMessage)) {\n       return\n     }\n \n     try {\n+      console.log('Deleting category with ID:', categoryId); // Debug log\n+      console.log('Category details:', categoryToDelete); // Debug log\n+      console.log('Has subcategories:', hasSubcategories); // Debug log\n+      \n+      // Temporarily store admin token to ensure it's available\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\n+      \n       const response = await del(`${CATEGORY.DELETE}/${categoryId}`)\n+      console.log('Delete response:', response); // Debug log\n \n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to delete category')\n+      // Check for different response formats\n+      if (response.success || (response.status >= 200 && response.status < 300) || response.data?.message) {\n+        console.log('Category deleted successfully'); // Debug log\n+        \n+        // Refresh categories list\n+        await fetchCategories()\n+        \n+        // Show success message\n+        alert('Category deleted successfully!')\n+      } else {\n+        throw new Error(response.message || response.data?.error || 'Failed to delete category')\n       }\n-\n-      // Refresh categories list\n-      fetchCategories()\n+      \n     } catch (err) {\n-      setError('Failed to delete category: ' + err.message)\n+      console.error('Delete category error:', err); // Debug log\n+      console.error('Error details:', {\n+        message: err.message,\n+        status: err.status,\n+        data: err.data\n+      }); // Debug log\n+      \n+      let errorMessage = 'Failed to delete category'\n+      \n+      if (err.status === 400) {\n+        errorMessage = err.message || err.data?.error || 'Cannot delete category with subcategories. Delete subcategories first.'\n+      } else if (err.status === 404) {\n+        errorMessage = 'Category not found'\n+      } else if (err.status === 401 || err.status === 403) {\n+        errorMessage = 'Unauthorized to delete category'\n+      } else {\n+        errorMessage = err.message || 'An unexpected error occurred'\n+      }\n+      \n+      setError(errorMessage)\n+      alert(errorMessage)\n     }\n   }\n \n   // Load categories on component mount\n@@ -190,16 +259,19 @@\n     }\n   }\n \n   const handleEdit = (category) => {\n+    console.log('Editing category:', category); // Debug log\n     setEditingCategory(category)\n     setFormData({\n       name: category.name,\n       description: category.description || '',\n       parent: category.parent ? (category.parent._id || category.parent) : '',\n-      status: category.status\n+      status: category.status,\n+      image: null // Reset image field for editing (user can upload new image if needed)\n     })\n     setActiveView('add')\n+    setError('') // Clear any previous errors\n   }\n \n   const renderCategoryList = () => {\n     if (loading) {\n@@ -540,526 +612,4 @@\n     </div>\n     </>\n   )\n }\n-'use client'\n-import React, { useState, useEffect } from 'react'\n-import { get, post, put, del, uploadFile } from '@/util/apiService'\n-import { CATEGORY } from '@/util/apiEndpoints'\n-\n-export default function CategoriesPage({ onNavigate }) {\n-  const [activeView, setActiveView] = useState('list') // 'list' or 'add'\n-  const [categories, setCategories] = useState([])\n-  const [loading, setLoading] = useState(true)\n-  const [error, setError] = useState('')\n-  const [editingCategory, setEditingCategory] = useState(null)\n-\n-  const [formData, setFormData] = useState({\n-    name: '',\n-    description: '',\n-    parent: '', // For subcategories (using 'parent' to match backend schema)\n-    status: true,\n-    image: null // File object for upload\n-  })\n-\n-  // Hardcoded admin token for testing\n-  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\n-\n-  // Utility function to format hierarchical category names\n-  const formatCategoryHierarchy = (category) => {\n-    if (!category.parent || !category.parent.name) {\n-      return category.name\n-    }\n-    return `${category.parent.name} > ${category.name}`\n-  }\n-\n-  // Fetch categories from backend\n-  const fetchCategories = async () => {\n-    try {\n-      setLoading(true)\n-      \n-      // Temporarily store admin token\n-      localStorage.setItem('authToken', ADMIN_TOKEN)\n-      \n-      const response = await get(CATEGORY.GET_ALL)\n-      console.log('Fetched categories response:', response)\n-      \n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to fetch categories')\n-      }\n-      \n-      console.log('Fetched categories:', response.data)\n-      \n-      // Sort categories to show main categories first, then subcategories\n-      const sortedCategories = response.data.sort((a, b) => {\n-        // Main categories first\n-        if (!a.parent && b.parent) return -1\n-        if (a.parent && !b.parent) return 1\n-        \n-        // Within same level, sort alphabetically\n-        if (!a.parent && !b.parent) {\n-          return a.name.localeCompare(b.name)\n-        }\n-        \n-        // For subcategories, sort by parent name first, then by subcategory name\n-        if (a.parent && b.parent) {\n-          const parentCompare = (a.parent.name || '').localeCompare(b.parent.name || '')\n-          if (parentCompare !== 0) return parentCompare\n-          return a.name.localeCompare(b.name)\n-        }\n-        \n-        return 0\n-      })\n-      \n-      console.log('Sorted categories:', sortedCategories)\n-      setCategories(sortedCategories)\n-      setError('')\n-    } catch (err) {\n-      console.error('Fetch categories error:', err)\n-      setError('Failed to load categories: ' + err.message)\n-    } finally {\n-      setLoading(false)\n-    }\n-  }\n-\n-  // Create or update category\n-  const saveCategory = async (categoryData) => {\n-    try {\n-      // Create FormData for file upload\n-      const formDataToSend = new FormData()\n-      formDataToSend.append('name', categoryData.name)\n-      formDataToSend.append('description', categoryData.description || '')\n-      formDataToSend.append('status', categoryData.status)\n-      \n-      if (categoryData.parent) {\n-        formDataToSend.append('parent', categoryData.parent)\n-        formDataToSend.append('isSubcategory', 'true')\n-        \n-        // Find parent category name for proper folder structure\n-        const parentCategory = categories.find(cat => cat._id === categoryData.parent)\n-        if (parentCategory) {\n-          formDataToSend.append('parentCategoryName', parentCategory.name)\n-        }\n-      } else {\n-        formDataToSend.append('isSubcategory', 'false')\n-      }\n-      \n-      // Add category name for folder creation\n-      formDataToSend.append('categoryName', categoryData.name)\n-      \n-      // Add image file if selected\n-      if (categoryData.image) {\n-        formDataToSend.append('image', categoryData.image)\n-      }\n-      \n-      // Log all FormData key-value pairs\n-      for (let pair of formDataToSend.entries()) {\n-        console.log(pair[0]+ ':', pair[1]);\n-      }\n-      \n-      // Use appropriate endpoint and method\n-      const endpoint = editingCategory \n-        ? `${CATEGORY.UPDATE}/${editingCategory._id}`\n-        : CATEGORY.CREATE\n-      \n-      let response\n-      if (editingCategory) {\n-        // For updates with file uploads, we need to use the uploadFile method\n-        response = await uploadFile(endpoint, formDataToSend)\n-      } else {\n-        // For new categories with file uploads\n-        response = await uploadFile(endpoint, formDataToSend)\n-      }\n-\n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to save category')\n-      }\n-      \n-      // Refresh categories list\n-      fetchCategories()\n-      setActiveView('list')\n-      setEditingCategory(null)\n-      setFormData({ name: '', description: '', parent: '', status: true, image: null })\n-      \n-      return response.data\n-    } catch (err) {\n-      setError('Failed to save category: ' + err.message)\n-      throw err\n-    }\n-  }\n-\n-  // Delete category\n-  const deleteCategory = async (categoryId) => {\n-    if (!window.confirm('Are you sure you want to delete this category?')) {\n-      return\n-    }\n-\n-    try {\n-      const response = await del(`${CATEGORY.DELETE}/${categoryId}`)\n-\n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to delete category')\n-      }\n-\n-      // Refresh categories list\n-      fetchCategories()\n-    } catch (err) {\n-      setError('Failed to delete category: ' + err.message)\n-    }\n-  }\n-\n-  // Load categories on component mount\n-  useEffect(() => {\n-    fetchCategories()\n-  }, [])\n-\n-  const handleInputChange = (e) => {\n-    const { name, value, type, checked, files } = e.target\n-    setFormData(prev => ({\n-      ...prev,\n-      [name]: type === 'checkbox' ? checked : type === 'file' ? files[0] : value\n-    }))\n-  }\n-\n-  const handleSubmit = async (e) => {\n-    e.preventDefault()\n-    try {\n-      if (formData.image && formData.image.size > 5 * 1024 * 1024) {\n-        alert('Image must be less than 5MB');\n-        return;\n-      }\n-      await saveCategory(formData)\n-    } catch (err) {\n-      // Error is already handled in saveCategory\n-    }\n-  }\n-\n-  const handleEdit = (category) => {\n-    setEditingCategory(category)\n-    setFormData({\n-      name: category.name,\n-      description: category.description || '',\n-      parent: category.parent ? (category.parent._id || category.parent) : '',\n-      status: category.status\n-    })\n-    setActiveView('add')\n-  }\n-\n-  const renderCategoryList = () => {\n-    if (loading) {\n-      return (\n-        <div className=\"text-center py-5\">\n-          <div className=\"spinner-border text-primary\" role=\"status\">\n-            <span className=\"visually-hidden\">Loading...</span>\n-          </div>\n-          <p className=\"mt-2 text-muted\">Loading categories...</p>\n-        </div>\n-      )\n-    }\n-\n-    if (error) {\n-      return (\n-        <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n-          <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n-          <div>{error}</div>\n-          <button \n-            className=\"btn btn-outline-danger btn-sm ms-auto\"\n-            onClick={fetchCategories}\n-          >\n-            Retry\n-          </button>\n-        </div>\n-      )\n-    }\n-\n-    return (\n-      <div>\n-        {/* Stats Cards */}\n-        <div className=\"row mb-4\">\n-          <div className=\"col-md-4\">\n-            <div className=\"card border-0 shadow-sm\">\n-              <div className=\"card-body text-center\">\n-                <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n-                <small className=\"text-muted\">Main Categories</small>\n-              </div>\n-            </div>\n-          </div>\n-          <div className=\"col-md-4\">\n-            <div className=\"card border-0 shadow-sm\">\n-              <div className=\"card-body text-center\">\n-                <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.parent).length}</h4>\n-                <small className=\"text-muted\">Sub Categories</small>\n-              </div>\n-            </div>\n-          </div>\n-          <div className=\"col-md-4\">\n-            <div className=\"card border-0 shadow-sm\">\n-              <div className=\"card-body text-center\">\n-                <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.status).length}</h4>\n-                <small className=\"text-muted\">Active Categories</small>\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-\n-        {/* Categories Table */}\n-        <div className=\"card border-0 shadow-sm\">\n-          <div className=\"card-header bg-white border-bottom\">\n-            <h5 className=\"mb-0 fw-semibold\">All Categories</h5>\n-          </div>\n-          <div className=\"card-body p-0\">\n-            {categories.length === 0 ? (\n-              <div className=\"text-center py-5\">\n-                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n-                <p className=\"mt-2 text-muted\">No categories found. Create your first category!</p>\n-                <button\n-                  className=\"btn btn-success\"\n-                  onClick={() => setActiveView('add')}\n-                >\n-                  <i className=\"bi bi-plus-circle me-2\"></i>\n-                  Add Category\n-                </button>\n-              </div>\n-            ) : (\n-              <div className=\"table-responsive\">\n-                <table className=\"table table-hover mb-0\">\n-                  <thead className=\"table-light\">\n-                    <tr>\n-                      <th className=\"ps-4\">Category Name</th>\n-                      <th>Image</th>\n-                      <th>Description</th>\n-                      <th>Type</th>\n-                      <th>Status</th>\n-                      <th className=\"text-center\">Actions</th>\n-                    </tr>\n-                  </thead>\n-                  <tbody>\n-                    {categories.map(category => (\n-                      <tr key={category._id} className={category.parent ? 'table-light' : ''}>\n-                        <td className=\"ps-4\">\n-                          <div className=\"d-flex align-items-center\">\n-                            {category.parent ? (\n-                              <>\n-                                <i className=\"bi bi-arrow-return-right text-muted me-2\"></i>\n-                                <i className=\"bi bi-tag text-secondary me-2\"></i>\n-                                <span>{formatCategoryHierarchy(category)}</span>\n-                              </>\n-                            ) : (\n-                              <>\n-                                <i className=\"bi bi-grid text-primary me-2\"></i>\n-                                <strong>{category.name}</strong>\n-                              </>\n-                            )}\n-                          </div>\n-                        </td>\n-                        <td>\n-                          {category.image?.url ? (\n-                            <img \n-                              src={category.image.url} \n-                              alt={category.name}\n-                              className=\"rounded\"\n-                              style={{ width: '40px', height: '40px', objectFit: 'cover' }}\n-                            />\n-                          ) : (\n-                            <div \n-                              className=\"bg-light rounded d-flex align-items-center justify-content-center\"\n-                              style={{ width: '40px', height: '40px' }}\n-                            >\n-                              <i className=\"bi bi-image text-muted\"></i>\n-                            </div>\n-                          )}\n-                        </td>\n-                        <td>{category.description || '-'}</td>\n-                        <td>\n-                          <span className={`badge ${category.parent ? 'bg-secondary' : 'bg-primary'}`}>\n-                            {category.parent ? 'Sub Category' : 'Main Category'}\n-                          </span>\n-                        </td>\n-                        <td>\n-                          <span className={`badge ${category.status ? 'bg-success' : 'bg-danger'}`}>\n-                            {category.status ? 'Active' : 'Inactive'}\n-                          </span>\n-                        </td>\n-                        <td className=\"text-center\">\n-                          <button \n-                            className=\"btn btn-sm btn-outline-primary me-1\"\n-                            onClick={() => handleEdit(category)}\n-                            title=\"Edit Category\"\n-                          >\n-                            <i className=\"bi bi-pencil\"></i>\n-                          </button>\n-                          <button \n-                            className=\"btn btn-sm btn-outline-danger\"\n-                            onClick={() => deleteCategory(category._id)}\n-                            title=\"Delete Category\"\n-                          >\n-                            <i className=\"bi bi-trash\"></i>\n-                          </button>\n-                        </td>\n-                      </tr>\n-                    ))}\n-                  </tbody>\n-                </table>\n-              </div>\n-            )}\n-          </div>\n-        </div>\n-      </div>\n-    )\n-  }\n-\n-  const renderAddCategoryForm = () => (\n-    <div className=\"card border-0 shadow-sm\">\n-      <div className=\"card-header bg-white border-bottom\">\n-        <h5 className=\"mb-0 fw-semibold\">\n-          {editingCategory ? 'Edit Category' : 'Add New Category'}\n-        </h5>\n-      </div>\n-      <div className=\"card-body\">\n-        {error && (\n-          <div className=\"alert alert-danger d-flex align-items-center mb-3\" role=\"alert\">\n-            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n-            <div>{error}</div>\n-          </div>\n-        )}\n-        \n-        <form onSubmit={handleSubmit}>\n-          <div className=\"row\">\n-            <div className=\"col-md-6\">\n-              <div className=\"mb-3\">\n-                <label className=\"form-label\">Category Name *</label>\n-                <input\n-                  type=\"text\"\n-                  className=\"form-control\"\n-                  name=\"name\"\n-                  value={formData.name}\n-                  onChange={handleInputChange}\n-                  required\n-                />\n-              </div>\n-            </div>\n-            <div className=\"col-md-6\">\n-              <div className=\"mb-3\">\n-                <label className=\"form-label\">Parent Category</label>\n-                <select\n-                  className=\"form-select\"\n-                  name=\"parent\"\n-                  value={formData.parent}\n-                  onChange={handleInputChange}\n-                >\n-                  <option value=\"\">Main Category</option>\n-                  {categories.filter(cat => !cat.parent).map(category => (\n-                    <option key={category._id} value={category._id}>\n-                      {category.name}\n-                    </option>\n-                  ))}\n-                </select>\n-                <div className=\"form-text\">Leave empty for main category, select parent for subcategory</div>\n-              </div>\n-            </div>\n-            <div className=\"col-12\">\n-              <div className=\"mb-3\">\n-                <label className=\"form-label\">Description</label>\n-                <textarea\n-                  className=\"form-control\"\n-                  name=\"description\"\n-                  value={formData.description}\n-                  onChange={handleInputChange}\n-                  rows=\"3\"\n-                />\n-              </div>\n-            </div>\n-            <div className=\"col-12\">\n-              <div className=\"mb-3\">\n-                <label className=\"form-label\">Category Image</label>\n-                <input\n-                  type=\"file\"\n-                  className=\"form-control\"\n-                  name=\"image\"\n-                  onChange={handleInputChange}\n-                  accept=\"image/*\"\n-                />\n-                <div className=\"form-text\">\n-                  Upload an image for this category. Recommended size: 300x300px. \n-                  {formData.parent ? ' Will be saved in subcategories folder.' : ' Will be saved in main category folder.'}\n-                </div>\n-                {formData.image && (\n-                  <div className=\"mt-2\">\n-                    <small className=\"text-success\">\n-                      <i className=\"bi bi-check-circle me-1\"></i>\n-                      Selected: {formData.image.name}\n-                    </small>\n-                  </div>\n-                )}\n-              </div>\n-            </div>\n-            <div className=\"col-12\">\n-              <div className=\"mb-3\">\n-                <div className=\"form-check\">\n-                  <input\n-                    type=\"checkbox\"\n-                    className=\"form-check-input\"\n-                    name=\"status\"\n-                    checked={formData.status}\n-                    onChange={handleInputChange}\n-                  />\n-                  <label className=\"form-check-label\">Active Status</label>\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-          <div className=\"d-flex gap-2\">\n-            <button\n-              type=\"button\"\n-              className=\"btn btn-outline-secondary\"\n-              onClick={() => {\n-                setActiveView('list')\n-                setEditingCategory(null)\n-                setFormData({ name: '', description: '', parent: '', status: true })\n-                setError('')\n-              }}\n-            >\n-              <i className=\"bi bi-arrow-left me-2\"></i>\n-              Back to List\n-            </button>\n-            <button type=\"submit\" className=\"btn btn-success\">\n-              <i className=\"bi bi-check-circle me-2\"></i>\n-              {editingCategory ? 'Update Category' : 'Save Category'}\n-            </button>\n-          </div>\n-        </form>\n-      </div>\n-    </div>\n-  )\n-\n-  return (\n-    <div className=\"container-fluid\">\n-      {/* Page Header */}\n-      <div className=\"row mb-4\">\n-        <div className=\"col-12\">\n-          <div className=\"d-flex justify-content-between align-items-center\">\n-            <div>\n-              <h2 className=\"fw-bold text-dark mb-1\">Categories Management</h2>\n-              <p className=\"text-muted mb-0\">Manage product categories and subcategories</p>\n-            </div>\n-            <div className=\"d-flex gap-2\">\n-              {activeView === 'list' ? (\n-                <button\n-                  className=\"btn btn-success\"\n-                  onClick={() => setActiveView('add')}\n-                >\n-                  <i className=\"bi bi-plus-circle me-2\"></i>\n-                  Add Category\n-                </button>\n-              ) : null}\n-            </div>\n-          </div>\n-        </div>\n-      </div>\n-\n-      {activeView === 'list' ? renderCategoryList() : renderAddCategoryForm()}\n-    </div>\n-  )\n-}\n"
                },
                {
                    "date": 1753116437096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,17 @@\n 'use client'\n import React, { useState, useEffect } from 'react'\n import { get, post, put, del, uploadFile } from '@/util/apiService'\n-import { CATEGORY } from '@/util/apiEndpoints'\n+import { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\n \n export default function CategoriesPage({ onNavigate }) {\n-  const [activeView, setActiveView] = useState('list') // 'list' or 'add'\n+  const [activeView, setActiveView] = useState('list') // 'list', 'add', 'subcategories', 'addSubcategory'\n   const [categories, setCategories] = useState([])\n+  const [subcategories, setSubcategories] = useState([])\n   const [loading, setLoading] = useState(true)\n   const [error, setError] = useState('')\n   const [editingCategory, setEditingCategory] = useState(null)\n+  const [editingSubcategory, setEditingSubcategory] = useState(null)\n \n   const [formData, setFormData] = useState({\n     name: '',\n     description: '',\n@@ -17,8 +19,16 @@\n     status: true,\n     image: null // File object for upload\n   })\n \n+  const [subcategoryFormData, setSubcategoryFormData] = useState({\n+    name: '',\n+    description: '',\n+    parent: '', // Required for subcategories\n+    status: true,\n+    image: null\n+  })\n+\n   // Hardcoded admin token for testing\n   const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\n \n   // Utility function to format hierarchical category names\n@@ -77,8 +87,166 @@\n       setLoading(false)\n     }\n   }\n \n+  // Fetch subcategories from backend\n+  const fetchSubcategories = async () => {\n+    try {\n+      setLoading(true)\n+      \n+      // Temporarily store admin token\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\n+      \n+      const response = await get(SUBCATEGORY.GET_ALL)\n+      console.log('Fetched subcategories response:', response)\n+      \n+      if (!response.success) {\n+        throw new Error(response.message || 'Failed to fetch subcategories')\n+      }\n+      \n+      console.log('Fetched subcategories:', response.data)\n+      setSubcategories(response.data)\n+      setError('')\n+    } catch (err) {\n+      console.error('Fetch subcategories error:', err)\n+      setError('Failed to load subcategories: ' + err.message)\n+    } finally {\n+      setLoading(false)\n+    }\n+  }\n+\n+  // Create or update subcategory\n+  const saveSubcategory = async (subcategoryData) => {\n+    try {\n+      console.log('Saving subcategory data:', subcategoryData)\n+      console.log('Editing subcategory:', editingSubcategory)\n+      \n+      // Create FormData for file upload\n+      const formDataToSend = new FormData()\n+      formDataToSend.append('name', subcategoryData.name)\n+      formDataToSend.append('description', subcategoryData.description || '')\n+      formDataToSend.append('parent', subcategoryData.parent)\n+      formDataToSend.append('status', subcategoryData.status)\n+      \n+      // Add image file if selected\n+      if (subcategoryData.image) {\n+        formDataToSend.append('image', subcategoryData.image)\n+      }\n+      \n+      // For updates, add the subcategory ID\n+      if (editingSubcategory) {\n+        formDataToSend.append('subcategoryId', editingSubcategory._id)\n+      }\n+      \n+      // Log all FormData key-value pairs\n+      console.log('Subcategory FormData contents:');\n+      for (let pair of formDataToSend.entries()) {\n+        console.log(pair[0]+ ':', pair[1]);\n+      }\n+      \n+      // Use appropriate endpoint and method\n+      const endpoint = editingSubcategory \n+        ? `${SUBCATEGORY.UPDATE}/${editingSubcategory._id}`\n+        : SUBCATEGORY.CREATE\n+      \n+      const method = editingSubcategory ? 'PUT' : 'POST'\n+      \n+      console.log('Using subcategory endpoint:', endpoint, 'with method:', method)\n+      \n+      // Use uploadFile with the correct method\n+      const response = await uploadFile(endpoint, formDataToSend, method)\n+      console.log('Save subcategory response:', response)\n+\n+      // Check for success based on HTTP status and response format\n+      if (response.success || (response.status >= 200 && response.status < 300)) {\n+        // Show success message\n+        console.log(editingSubcategory ? 'Subcategory updated successfully!' : 'Subcategory created successfully!');\n+        alert(editingSubcategory ? 'Subcategory updated successfully!' : 'Subcategory created successfully!');\n+        \n+        // Reset form and go back to subcategories list\n+        setActiveView('subcategories')\n+        setEditingSubcategory(null)\n+        setSubcategoryFormData({ name: '', description: '', parent: '', status: true, image: null })\n+        setError('')\n+        \n+        // Refresh subcategories list\n+        await fetchSubcategories()\n+        \n+        return response.data\n+      } else {\n+        throw new Error(response.message || response.data?.error || 'Failed to save subcategory')\n+      }\n+    } catch (err) {\n+      console.error('Save subcategory error:', err);\n+      console.error('Error details:', {\n+        message: err.message,\n+        status: err.status,\n+        data: err.data\n+      });\n+      \n+      const errorMessage = err.message || 'Failed to save subcategory'\n+      setError(errorMessage)\n+      alert(errorMessage)\n+      throw err\n+    }\n+  }\n+\n+  // Delete subcategory\n+  const deleteSubcategory = async (subcategoryId) => {\n+    const subcategoryToDelete = subcategories.find(subcat => subcat._id === subcategoryId)\n+    \n+    const confirmMessage = `Are you sure you want to delete the subcategory \"${subcategoryToDelete?.name}\"?`\n+    \n+    if (!window.confirm(confirmMessage)) {\n+      return\n+    }\n+\n+    try {\n+      console.log('Deleting subcategory with ID:', subcategoryId)\n+      console.log('Subcategory details:', subcategoryToDelete)\n+      \n+      // Temporarily store admin token to ensure it's available\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\n+      \n+      const response = await del(`${SUBCATEGORY.DELETE}/${subcategoryId}`)\n+      console.log('Delete subcategory response:', response)\n+\n+      // Check for different response formats\n+      if (response.success || (response.status >= 200 && response.status < 300) || response.data?.message) {\n+        console.log('Subcategory deleted successfully')\n+        \n+        // Refresh subcategories list\n+        await fetchSubcategories()\n+        \n+        // Show success message\n+        alert('Subcategory deleted successfully!')\n+      } else {\n+        throw new Error(response.message || response.data?.error || 'Failed to delete subcategory')\n+      }\n+      \n+    } catch (err) {\n+      console.error('Delete subcategory error:', err)\n+      console.error('Error details:', {\n+        message: err.message,\n+        status: err.status,\n+        data: err.data\n+      })\n+      \n+      let errorMessage = 'Failed to delete subcategory'\n+      \n+      if (err.status === 404) {\n+        errorMessage = 'Subcategory not found'\n+      } else if (err.status === 401 || err.status === 403) {\n+        errorMessage = 'Unauthorized to delete subcategory'\n+      } else {\n+        errorMessage = err.message || 'An unexpected error occurred'\n+      }\n+      \n+      setError(errorMessage)\n+      alert(errorMessage)\n+    }\n+  }\n+\n   // Create or update category\n   const saveCategory = async (categoryData) => {\n     try {\n       console.log('Saving category data:', categoryData); // Debug log\n@@ -235,9 +403,12 @@\n \n   // Load categories on component mount\n   useEffect(() => {\n     fetchCategories()\n-  }, [])\n+    if (activeView === 'subcategories' || activeView === 'addSubcategory') {\n+      fetchSubcategories()\n+    }\n+  }, [activeView])\n \n   const handleInputChange = (e) => {\n     const { name, value, type, checked, files } = e.target\n     setFormData(prev => ({\n@@ -245,8 +416,16 @@\n       [name]: type === 'checkbox' ? checked : type === 'file' ? files[0] : value\n     }))\n   }\n \n+  const handleSubcategoryInputChange = (e) => {\n+    const { name, value, type, checked, files } = e.target\n+    setSubcategoryFormData(prev => ({\n+      ...prev,\n+      [name]: type === 'checkbox' ? checked : type === 'file' ? files[0] : value\n+    }))\n+  }\n+\n   const handleSubmit = async (e) => {\n     e.preventDefault()\n     try {\n       if (formData.image && formData.image.size > 5 * 1024 * 1024) {\n@@ -258,8 +437,25 @@\n       // Error is already handled in saveCategory\n     }\n   }\n \n+  const handleSubcategorySubmit = async (e) => {\n+    e.preventDefault()\n+    try {\n+      if (!subcategoryFormData.parent) {\n+        alert('Please select a parent category');\n+        return;\n+      }\n+      if (subcategoryFormData.image && subcategoryFormData.image.size > 5 * 1024 * 1024) {\n+        alert('Image must be less than 5MB');\n+        return;\n+      }\n+      await saveSubcategory(subcategoryFormData)\n+    } catch (err) {\n+      // Error is already handled in saveSubcategory\n+    }\n+  }\n+\n   const handleEdit = (category) => {\n     console.log('Editing category:', category); // Debug log\n     setEditingCategory(category)\n     setFormData({\n@@ -272,8 +468,22 @@\n     setActiveView('add')\n     setError('') // Clear any previous errors\n   }\n \n+  const handleEditSubcategory = (subcategory) => {\n+    console.log('Editing subcategory:', subcategory); // Debug log\n+    setEditingSubcategory(subcategory)\n+    setSubcategoryFormData({\n+      name: subcategory.name,\n+      description: subcategory.description || '',\n+      parent: subcategory.parent ? (subcategory.parent._id || subcategory.parent) : '',\n+      status: subcategory.status,\n+      image: null // Reset image field for editing (user can upload new image if needed)\n+    })\n+    setActiveView('addSubcategory')\n+    setError('') // Clear any previous errors\n+  }\n+\n   const renderCategoryList = () => {\n     if (loading) {\n       return (\n         <div className=\"text-center py-5\">\n@@ -564,8 +774,301 @@\n       </div>\n     </div>\n   )\n \n+  const renderSubcategoriesList = () => {\n+    if (loading) {\n+      return (\n+        <div className=\"text-center py-5\">\n+          <div className=\"spinner-border text-primary\" role=\"status\">\n+            <span className=\"visually-hidden\">Loading...</span>\n+          </div>\n+          <p className=\"mt-2 text-muted\">Loading subcategories...</p>\n+        </div>\n+      )\n+    }\n+\n+    if (error) {\n+      return (\n+        <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n+          <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n+          <div>{error}</div>\n+          <button \n+            className=\"btn btn-outline-danger btn-sm ms-auto\"\n+            onClick={fetchSubcategories}\n+          >\n+            Retry\n+          </button>\n+        </div>\n+      )\n+    }\n+\n+    return (\n+      <div>\n+        {/* Back to Categories Button */}\n+        <div className=\"mb-3\">\n+          <button\n+            className=\"btn btn-outline-secondary\"\n+            onClick={() => setActiveView('list')}\n+          >\n+            <i className=\"bi bi-arrow-left me-2\"></i>\n+            Back to Categories\n+          </button>\n+        </div>\n+\n+        {/* Stats Cards */}\n+        <div className=\"row mb-4\">\n+          <div className=\"col-md-4\">\n+            <div className=\"card border-0 shadow-sm\">\n+              <div className=\"card-body text-center\">\n+                <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n+                <h4 className=\"mt-2 mb-0\">{subcategories.length}</h4>\n+                <small className=\"text-muted\">Total Subcategories</small>\n+              </div>\n+            </div>\n+          </div>\n+          <div className=\"col-md-4\">\n+            <div className=\"card border-0 shadow-sm\">\n+              <div className=\"card-body text-center\">\n+                <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n+                <h4 className=\"mt-2 mb-0\">{subcategories.filter(subcat => subcat.status).length}</h4>\n+                <small className=\"text-muted\">Active Subcategories</small>\n+              </div>\n+            </div>\n+          </div>\n+          <div className=\"col-md-4\">\n+            <div className=\"card border-0 shadow-sm\">\n+              <div className=\"card-body text-center\">\n+                <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n+                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n+                <small className=\"text-muted\">Parent Categories</small>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+\n+        {/* Subcategories Table */}\n+        <div className=\"card border-0 shadow-sm\">\n+          <div className=\"card-header bg-white border-bottom\">\n+            <h5 className=\"mb-0 fw-semibold\">All Subcategories</h5>\n+          </div>\n+          <div className=\"card-body p-0\">\n+            {subcategories.length === 0 ? (\n+              <div className=\"text-center py-5\">\n+                <i className=\"bi bi-diagram-3\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n+                <p className=\"mt-2 text-muted\">No subcategories found. Create your first subcategory!</p>\n+                <button\n+                  className=\"btn btn-success\"\n+                  onClick={() => setActiveView('addSubcategory')}\n+                >\n+                  <i className=\"bi bi-plus-circle me-2\"></i>\n+                  Add Subcategory\n+                </button>\n+              </div>\n+            ) : (\n+              <div className=\"table-responsive\">\n+                <table className=\"table table-hover mb-0\">\n+                  <thead className=\"table-light\">\n+                    <tr>\n+                      <th className=\"ps-4\">Subcategory Name</th>\n+                      <th>Parent Category</th>\n+                      <th>Image</th>\n+                      <th>Description</th>\n+                      <th>Status</th>\n+                      <th className=\"text-center\">Actions</th>\n+                    </tr>\n+                  </thead>\n+                  <tbody>\n+                    {subcategories.map(subcategory => (\n+                      <tr key={subcategory._id}>\n+                        <td className=\"ps-4\">\n+                          <div className=\"d-flex align-items-center\">\n+                            <i className=\"bi bi-tag text-secondary me-2\"></i>\n+                            <strong>{subcategory.name}</strong>\n+                          </div>\n+                        </td>\n+                        <td>\n+                          <span className=\"badge bg-primary\">\n+                            {subcategory.parent?.name || 'Unknown'}\n+                          </span>\n+                        </td>\n+                        <td>\n+                          {subcategory.image?.url ? (\n+                            <img \n+                              src={subcategory.image.url} \n+                              alt={subcategory.name}\n+                              className=\"rounded\"\n+                              style={{ width: '40px', height: '40px', objectFit: 'cover' }}\n+                            />\n+                          ) : (\n+                            <div \n+                              className=\"bg-light rounded d-flex align-items-center justify-content-center\"\n+                              style={{ width: '40px', height: '40px' }}\n+                            >\n+                              <i className=\"bi bi-image text-muted\"></i>\n+                            </div>\n+                          )}\n+                        </td>\n+                        <td>{subcategory.description || '-'}</td>\n+                        <td>\n+                          <span className={`badge ${subcategory.status ? 'bg-success' : 'bg-danger'}`}>\n+                            {subcategory.status ? 'Active' : 'Inactive'}\n+                          </span>\n+                        </td>\n+                        <td className=\"text-center\">\n+                          <button \n+                            className=\"btn btn-sm btn-outline-primary me-1\"\n+                            onClick={() => handleEditSubcategory(subcategory)}\n+                            title=\"Edit Subcategory\"\n+                          >\n+                            <i className=\"bi bi-pencil\"></i>\n+                            <span className=\"d-none\">Edit</span>\n+                          </button>\n+                          <button \n+                            className=\"btn btn-sm btn-outline-danger\"\n+                            onClick={() => deleteSubcategory(subcategory._id)}\n+                            title=\"Delete Subcategory\"\n+                          >\n+                            <i className=\"bi bi-trash\"></i>\n+                            <span className=\"d-none\">Delete</span>\n+                          </button>\n+                        </td>\n+                      </tr>\n+                    ))}\n+                  </tbody>\n+                </table>\n+              </div>\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+    )\n+  }\n+\n+  const renderAddSubcategoryForm = () => (\n+    <div className=\"card border-0 shadow-sm\">\n+      <div className=\"card-header bg-white border-bottom\">\n+        <h5 className=\"mb-0 fw-semibold\">\n+          {editingSubcategory ? 'Edit Subcategory' : 'Add New Subcategory'}\n+        </h5>\n+      </div>\n+      <div className=\"card-body\">\n+        {error && (\n+          <div className=\"alert alert-danger d-flex align-items-center mb-3\" role=\"alert\">\n+            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n+            <div>{error}</div>\n+          </div>\n+        )}\n+        \n+        <form onSubmit={handleSubcategorySubmit}>\n+          <div className=\"row\">\n+            <div className=\"col-md-6\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Sub-Category Name *</label>\n+                <input\n+                  type=\"text\"\n+                  className=\"form-control\"\n+                  name=\"name\"\n+                  value={subcategoryFormData.name}\n+                  onChange={handleSubcategoryInputChange}\n+                  required\n+                />\n+              </div>\n+            </div>\n+            <div className=\"col-md-6\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Parent Category *</label>\n+                <select\n+                  className=\"form-select\"\n+                  name=\"parent\"\n+                  value={subcategoryFormData.parent}\n+                  onChange={handleSubcategoryInputChange}\n+                  required\n+                >\n+                  <option value=\"\">Select Parent Category</option>\n+                  {categories.filter(cat => !cat.parent).map(category => (\n+                    <option key={category._id} value={category._id}>\n+                      {category.name}\n+                    </option>\n+                  ))}\n+                </select>\n+                <div className=\"form-text\">Select the parent category for this subcategory</div>\n+              </div>\n+            </div>\n+            <div className=\"col-12\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Description</label>\n+                <textarea\n+                  className=\"form-control\"\n+                  name=\"description\"\n+                  value={subcategoryFormData.description}\n+                  onChange={handleSubcategoryInputChange}\n+                  rows=\"3\"\n+                />\n+              </div>\n+            </div>\n+            <div className=\"col-12\">\n+              <div className=\"mb-3\">\n+                <label className=\"form-label\">Sub-Category Image</label>\n+                <input\n+                  type=\"file\"\n+                  className=\"form-control\"\n+                  name=\"image\"\n+                  onChange={handleSubcategoryInputChange}\n+                  accept=\"image/*\"\n+                />\n+                <div className=\"form-text\">\n+                  Upload an image for this subcategory. Recommended size: 300x300px.\n+                </div>\n+                {subcategoryFormData.image && (\n+                  <div className=\"mt-2\">\n+                    <small className=\"text-success\">\n+                      <i className=\"bi bi-check-circle me-1\"></i>\n+                      Selected: {subcategoryFormData.image.name}\n+                    </small>\n+                  </div>\n+                )}\n+              </div>\n+            </div>\n+            <div className=\"col-12\">\n+              <div className=\"mb-3\">\n+                <div className=\"form-check\">\n+                  <input\n+                    type=\"checkbox\"\n+                    className=\"form-check-input\"\n+                    name=\"status\"\n+                    checked={subcategoryFormData.status}\n+                    onChange={handleSubcategoryInputChange}\n+                  />\n+                  <label className=\"form-check-label\">Active Status</label>\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+          <div className=\"d-flex gap-2\">\n+            <button\n+              type=\"button\"\n+              className=\"btn btn-outline-secondary\"\n+              onClick={() => {\n+                setActiveView('subcategories')\n+                setEditingSubcategory(null)\n+                setSubcategoryFormData({ name: '', description: '', parent: '', status: true, image: null })\n+                setError('')\n+              }}\n+            >\n+              <i className=\"bi bi-arrow-left me-2\"></i>\n+              Back to List\n+            </button>\n+            <button type=\"submit\" className=\"btn btn-success\">\n+              <i className=\"bi bi-check-circle me-2\"></i>\n+              {editingSubcategory ? 'Update Subcategory' : 'Save Subcategory'}\n+            </button>\n+          </div>\n+        </form>\n+      </div>\n+    </div>\n+  )\n+\n   return (\n     <>\n       <style jsx>{`\n         /* Fallback for when Bootstrap icons don't load */\n@@ -594,14 +1097,31 @@\n               <p className=\"text-muted mb-0\">Manage product categories and subcategories</p>\n             </div>\n             <div className=\"d-flex gap-2\">\n               {activeView === 'list' ? (\n+                <>\n+                  <button\n+                    className=\"btn btn-success\"\n+                    onClick={() => setActiveView('add')}\n+                  >\n+                    <i className=\"bi bi-plus-circle me-2\"></i>\n+                    Add Category\n+                  </button>\n+                  <button\n+                    className=\"btn btn-info\"\n+                    onClick={() => setActiveView('subcategories')}\n+                  >\n+                    <i className=\"bi bi-diagram-3 me-2\"></i>\n+                    Subcategories\n+                  </button>\n+                </>\n+              ) : activeView === 'subcategories' ? (\n                 <button\n                   className=\"btn btn-success\"\n-                  onClick={() => setActiveView('add')}\n+                  onClick={() => setActiveView('addSubcategory')}\n                 >\n                   <i className=\"bi bi-plus-circle me-2\"></i>\n-                  Add Category\n+                  Add Subcategory\n                 </button>\n               ) : null}\n             </div>\n           </div>\n"
                },
                {
                    "date": 1753120388455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1127,9 +1127,12 @@\n           </div>\n         </div>\n       </div>\n \n-      {activeView === 'list' ? renderCategoryList() : renderAddCategoryForm()}\n+      {activeView === 'list' && renderCategoryList()}\n+      {activeView === 'add' && renderAddCategoryForm()}\n+      {activeView === 'subcategories' && renderSubcategoriesList()}\n+      {activeView === 'addSubcategory' && renderAddSubcategoryForm()}\n     </div>\n     </>\n   )\n }\n"
                },
                {
                    "date": 1753120585085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -431,9 +431,14 @@\n       if (formData.image && formData.image.size > 5 * 1024 * 1024) {\n         alert('Image must be less than 5MB');\n         return;\n       }\n-      await saveCategory(formData)\n+      // Ensure parent is empty for main categories\n+      const categoryDataToSave = {\n+        ...formData,\n+        parent: '' // Always set parent to empty for main categories\n+      }\n+      await saveCategory(categoryDataToSave)\n     } catch (err) {\n       // Error is already handled in saveCategory\n     }\n   }\n@@ -682,23 +687,17 @@\n               </div>\n             </div>\n             <div className=\"col-md-6\">\n               <div className=\"mb-3\">\n-                <label className=\"form-label\">Parent Category</label>\n-                <select\n-                  className=\"form-select\"\n-                  name=\"parent\"\n-                  value={formData.parent}\n-                  onChange={handleInputChange}\n-                >\n-                  <option value=\"\">Main Category</option>\n-                  {categories.filter(cat => !cat.parent).map(category => (\n-                    <option key={category._id} value={category._id}>\n-                      {category.name}\n-                    </option>\n-                  ))}\n-                </select>\n-                <div className=\"form-text\">Leave empty for main category, select parent for subcategory</div>\n+                <label className=\"form-label\">Category Type</label>\n+                <input\n+                  type=\"text\"\n+                  className=\"form-control\"\n+                  value=\"Main Category\"\n+                  disabled\n+                  readOnly\n+                />\n+                <div className=\"form-text\">All categories created here will be main categories. Use Subcategories section to create subcategories.</div>\n               </div>\n             </div>\n             <div className=\"col-12\">\n               <div className=\"mb-3\">\n@@ -723,9 +722,9 @@\n                   accept=\"image/*\"\n                 />\n                 <div className=\"form-text\">\n                   Upload an image for this category. Recommended size: 300x300px. \n-                  {formData.parent ? ' Will be saved in subcategories folder.' : ' Will be saved in main category folder.'}\n+                  Will be saved in main category folder.\n                 </div>\n                 {formData.image && (\n                   <div className=\"mt-2\">\n                     <small className=\"text-success\">\n@@ -757,9 +756,9 @@\n               className=\"btn btn-outline-secondary\"\n               onClick={() => {\n                 setActiveView('list')\n                 setEditingCategory(null)\n-                setFormData({ name: '', description: '', parent: '', status: true })\n+                setFormData({ name: '', description: '', parent: '', status: true, image: null })\n                 setError('')\n               }}\n             >\n               <i className=\"bi bi-arrow-left me-2\"></i>\n"
                },
                {
                    "date": 1753120965701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,10 @@\n   }\n \n   // Delete subcategory\n   const deleteSubcategory = async (subcategoryId) => {\n-    const subcategoryToDelete = subcategories.find(subcat => subcat._id === subcategoryId)\n+    const subcategoriesArray = Array.isArray(subcategories) ? subcategories : []\n+    const subcategoryToDelete = subcategoriesArray.find(subcat => subcat._id === subcategoryId)\n     \n     const confirmMessage = `Are you sure you want to delete the subcategory \"${subcategoryToDelete?.name}\"?`\n     \n     if (!window.confirm(confirmMessage)) {\n@@ -800,8 +801,12 @@\n         </div>\n       )\n     }\n \n+    // Ensure subcategories and categories are arrays\n+    const subcategoriesArray = Array.isArray(subcategories) ? subcategories : []\n+    const categoriesArray = Array.isArray(categories) ? categories : []\n+\n     return (\n       <div>\n         {/* Back to Categories Button */}\n         <div className=\"mb-3\">\n@@ -819,27 +824,27 @@\n           <div className=\"col-md-4\">\n             <div className=\"card border-0 shadow-sm\">\n               <div className=\"card-body text-center\">\n                 <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{subcategories.length}</h4>\n+                <h4 className=\"mt-2 mb-0\">{subcategoriesArray.length}</h4>\n                 <small className=\"text-muted\">Total Subcategories</small>\n               </div>\n             </div>\n           </div>\n           <div className=\"col-md-4\">\n             <div className=\"card border-0 shadow-sm\">\n               <div className=\"card-body text-center\">\n                 <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{subcategories.filter(subcat => subcat.status).length}</h4>\n+                <h4 className=\"mt-2 mb-0\">{subcategoriesArray.filter(subcat => subcat.status).length}</h4>\n                 <small className=\"text-muted\">Active Subcategories</small>\n               </div>\n             </div>\n           </div>\n           <div className=\"col-md-4\">\n             <div className=\"card border-0 shadow-sm\">\n               <div className=\"card-body text-center\">\n                 <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n+                <h4 className=\"mt-2 mb-0\">{categoriesArray.filter(cat => !cat.parent).length}</h4>\n                 <small className=\"text-muted\">Parent Categories</small>\n               </div>\n             </div>\n           </div>\n@@ -850,9 +855,9 @@\n           <div className=\"card-header bg-white border-bottom\">\n             <h5 className=\"mb-0 fw-semibold\">All Subcategories</h5>\n           </div>\n           <div className=\"card-body p-0\">\n-            {subcategories.length === 0 ? (\n+            {subcategoriesArray.length === 0 ? (\n               <div className=\"text-center py-5\">\n                 <i className=\"bi bi-diagram-3\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n                 <p className=\"mt-2 text-muted\">No subcategories found. Create your first subcategory!</p>\n                 <button\n@@ -876,9 +881,9 @@\n                       <th className=\"text-center\">Actions</th>\n                     </tr>\n                   </thead>\n                   <tbody>\n-                    {subcategories.map(subcategory => (\n+                    {subcategoriesArray.map(subcategory => (\n                       <tr key={subcategory._id}>\n                         <td className=\"ps-4\">\n                           <div className=\"d-flex align-items-center\">\n                             <i className=\"bi bi-tag text-secondary me-2\"></i>\n@@ -983,9 +988,9 @@\n                   onChange={handleSubcategoryInputChange}\n                   required\n                 >\n                   <option value=\"\">Select Parent Category</option>\n-                  {categories.filter(cat => !cat.parent).map(category => (\n+                  {Array.isArray(categories) && categories.filter(cat => !cat.parent).map(category => (\n                     <option key={category._id} value={category._id}>\n                       {category.name}\n                     </option>\n                   ))}\n"
                },
                {
                    "date": 1753121118038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,17 +48,31 @@\n       localStorage.setItem('authToken', ADMIN_TOKEN)\n       \n       const response = await get(CATEGORY.GET_ALL)\n       console.log('Fetched categories response:', response)\n+      console.log('Categories response type:', typeof response)\n       \n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to fetch categories')\n+      // Handle different response formats\n+      let categoriesData = []\n+      \n+      if (response.success && response.data) {\n+        categoriesData = response.data\n+      } else if (Array.isArray(response)) {\n+        categoriesData = response\n+      } else if (response.data && Array.isArray(response.data)) {\n+        categoriesData = response.data\n+      } else if (!response.success && response.message) {\n+        throw new Error(response.message)\n+      } else {\n+        // For categories, we might get direct array without success wrapper\n+        categoriesData = Array.isArray(response) ? response : []\n       }\n       \n-      console.log('Fetched categories:', response.data)\n+      console.log('Processed categories data:', categoriesData)\n+      console.log('Categories count:', categoriesData.length)\n       \n       // Sort categories to show main categories first, then subcategories\n-      const sortedCategories = response.data.sort((a, b) => {\n+      const sortedCategories = categoriesData.sort((a, b) => {\n         // Main categories first\n         if (!a.parent && b.parent) return -1\n         if (a.parent && !b.parent) return 1\n         \n@@ -82,8 +96,9 @@\n       setError('')\n     } catch (err) {\n       console.error('Fetch categories error:', err)\n       setError('Failed to load categories: ' + err.message)\n+      setCategories([]) // Ensure it's an empty array on error\n     } finally {\n       setLoading(false)\n     }\n   }\n@@ -97,19 +112,43 @@\n       localStorage.setItem('authToken', ADMIN_TOKEN)\n       \n       const response = await get(SUBCATEGORY.GET_ALL)\n       console.log('Fetched subcategories response:', response)\n+      console.log('Response type:', typeof response)\n+      console.log('Response keys:', Object.keys(response))\n       \n-      if (!response.success) {\n-        throw new Error(response.message || 'Failed to fetch subcategories')\n+      // Handle different response formats\n+      let subcategoriesData = []\n+      \n+      if (response.success && response.data) {\n+        // Standard success response\n+        subcategoriesData = response.data\n+      } else if (Array.isArray(response)) {\n+        // Direct array response\n+        subcategoriesData = response\n+      } else if (response.data && Array.isArray(response.data)) {\n+        // Data property with array\n+        subcategoriesData = response.data\n+      } else if (!response.success && response.message) {\n+        throw new Error(response.message)\n+      } else {\n+        throw new Error('Invalid response format from server')\n       }\n       \n-      console.log('Fetched subcategories:', response.data)\n-      setSubcategories(response.data)\n+      console.log('Processed subcategories data:', subcategoriesData)\n+      console.log('Subcategories count:', subcategoriesData.length)\n+      \n+      setSubcategories(subcategoriesData)\n       setError('')\n     } catch (err) {\n       console.error('Fetch subcategories error:', err)\n+      console.error('Error details:', {\n+        message: err.message,\n+        status: err.status,\n+        response: err.response\n+      })\n       setError('Failed to load subcategories: ' + err.message)\n+      setSubcategories([]) // Ensure it's an empty array on error\n     } finally {\n       setLoading(false)\n     }\n   }\n@@ -403,10 +442,16 @@\n   }\n \n   // Load categories on component mount\n   useEffect(() => {\n-    fetchCategories()\n+    console.log('useEffect triggered, activeView:', activeView)\n+    \n+    if (activeView === 'list' || activeView === 'add') {\n+      fetchCategories()\n+    }\n+    \n     if (activeView === 'subcategories' || activeView === 'addSubcategory') {\n+      fetchCategories() // Also fetch categories for the dropdown\n       fetchSubcategories()\n     }\n   }, [activeView])\n \n@@ -775,8 +820,16 @@\n     </div>\n   )\n \n   const renderSubcategoriesList = () => {\n+    console.log('Rendering subcategories list. State:')\n+    console.log('- loading:', loading)\n+    console.log('- error:', error)\n+    console.log('- subcategories:', subcategories)\n+    console.log('- subcategories type:', typeof subcategories)\n+    console.log('- subcategories is array:', Array.isArray(subcategories))\n+    console.log('- subcategories length:', subcategories?.length)\n+\n     if (loading) {\n       return (\n         <div className=\"text-center py-5\">\n           <div className=\"spinner-border text-primary\" role=\"status\">\n@@ -804,8 +857,13 @@\n \n     // Ensure subcategories and categories are arrays\n     const subcategoriesArray = Array.isArray(subcategories) ? subcategories : []\n     const categoriesArray = Array.isArray(categories) ? categories : []\n+    \n+    console.log('Arrays after safety check:')\n+    console.log('- subcategoriesArray length:', subcategoriesArray.length)\n+    console.log('- categoriesArray length:', categoriesArray.length)\n+    console.log('- subcategoriesArray:', subcategoriesArray)\n \n     return (\n       <div>\n         {/* Back to Categories Button */}\n"
                },
                {
                    "date": 1753121474623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,31 +48,17 @@\n       localStorage.setItem('authToken', ADMIN_TOKEN)\n       \n       const response = await get(CATEGORY.GET_ALL)\n       console.log('Fetched categories response:', response)\n-      console.log('Categories response type:', typeof response)\n       \n-      // Handle different response formats\n-      let categoriesData = []\n-      \n-      if (response.success && response.data) {\n-        categoriesData = response.data\n-      } else if (Array.isArray(response)) {\n-        categoriesData = response\n-      } else if (response.data && Array.isArray(response.data)) {\n-        categoriesData = response.data\n-      } else if (!response.success && response.message) {\n-        throw new Error(response.message)\n-      } else {\n-        // For categories, we might get direct array without success wrapper\n-        categoriesData = Array.isArray(response) ? response : []\n+      if (!response.success) {\n+        throw new Error(response.message || 'Failed to fetch categories')\n       }\n       \n-      console.log('Processed categories data:', categoriesData)\n-      console.log('Categories count:', categoriesData.length)\n+      console.log('Fetched categories:', response.data)\n       \n       // Sort categories to show main categories first, then subcategories\n-      const sortedCategories = categoriesData.sort((a, b) => {\n+      const sortedCategories = response.data.sort((a, b) => {\n         // Main categories first\n         if (!a.parent && b.parent) return -1\n         if (a.parent && !b.parent) return 1\n         \n@@ -96,9 +82,8 @@\n       setError('')\n     } catch (err) {\n       console.error('Fetch categories error:', err)\n       setError('Failed to load categories: ' + err.message)\n-      setCategories([]) // Ensure it's an empty array on error\n     } finally {\n       setLoading(false)\n     }\n   }\n@@ -112,43 +97,19 @@\n       localStorage.setItem('authToken', ADMIN_TOKEN)\n       \n       const response = await get(SUBCATEGORY.GET_ALL)\n       console.log('Fetched subcategories response:', response)\n-      console.log('Response type:', typeof response)\n-      console.log('Response keys:', Object.keys(response))\n       \n-      // Handle different response formats\n-      let subcategoriesData = []\n-      \n-      if (response.success && response.data) {\n-        // Standard success response\n-        subcategoriesData = response.data\n-      } else if (Array.isArray(response)) {\n-        // Direct array response\n-        subcategoriesData = response\n-      } else if (response.data && Array.isArray(response.data)) {\n-        // Data property with array\n-        subcategoriesData = response.data\n-      } else if (!response.success && response.message) {\n-        throw new Error(response.message)\n-      } else {\n-        throw new Error('Invalid response format from server')\n+      if (!response.success) {\n+        throw new Error(response.message || 'Failed to fetch subcategories')\n       }\n       \n-      console.log('Processed subcategories data:', subcategoriesData)\n-      console.log('Subcategories count:', subcategoriesData.length)\n-      \n-      setSubcategories(subcategoriesData)\n+      console.log('Fetched subcategories:', response.data)\n+      setSubcategories(response.data)\n       setError('')\n     } catch (err) {\n       console.error('Fetch subcategories error:', err)\n-      console.error('Error details:', {\n-        message: err.message,\n-        status: err.status,\n-        response: err.response\n-      })\n       setError('Failed to load subcategories: ' + err.message)\n-      setSubcategories([]) // Ensure it's an empty array on error\n     } finally {\n       setLoading(false)\n     }\n   }\n@@ -230,10 +191,9 @@\n   }\n \n   // Delete subcategory\n   const deleteSubcategory = async (subcategoryId) => {\n-    const subcategoriesArray = Array.isArray(subcategories) ? subcategories : []\n-    const subcategoryToDelete = subcategoriesArray.find(subcat => subcat._id === subcategoryId)\n+    const subcategoryToDelete = subcategories.find(subcat => subcat._id === subcategoryId)\n     \n     const confirmMessage = `Are you sure you want to delete the subcategory \"${subcategoryToDelete?.name}\"?`\n     \n     if (!window.confirm(confirmMessage)) {\n@@ -442,16 +402,10 @@\n   }\n \n   // Load categories on component mount\n   useEffect(() => {\n-    console.log('useEffect triggered, activeView:', activeView)\n-    \n-    if (activeView === 'list' || activeView === 'add') {\n-      fetchCategories()\n-    }\n-    \n+    fetchCategories()\n     if (activeView === 'subcategories' || activeView === 'addSubcategory') {\n-      fetchCategories() // Also fetch categories for the dropdown\n       fetchSubcategories()\n     }\n   }, [activeView])\n \n@@ -820,16 +774,8 @@\n     </div>\n   )\n \n   const renderSubcategoriesList = () => {\n-    console.log('Rendering subcategories list. State:')\n-    console.log('- loading:', loading)\n-    console.log('- error:', error)\n-    console.log('- subcategories:', subcategories)\n-    console.log('- subcategories type:', typeof subcategories)\n-    console.log('- subcategories is array:', Array.isArray(subcategories))\n-    console.log('- subcategories length:', subcategories?.length)\n-\n     if (loading) {\n       return (\n         <div className=\"text-center py-5\">\n           <div className=\"spinner-border text-primary\" role=\"status\">\n@@ -854,17 +800,8 @@\n         </div>\n       )\n     }\n \n-    // Ensure subcategories and categories are arrays\n-    const subcategoriesArray = Array.isArray(subcategories) ? subcategories : []\n-    const categoriesArray = Array.isArray(categories) ? categories : []\n-    \n-    console.log('Arrays after safety check:')\n-    console.log('- subcategoriesArray length:', subcategoriesArray.length)\n-    console.log('- categoriesArray length:', categoriesArray.length)\n-    console.log('- subcategoriesArray:', subcategoriesArray)\n-\n     return (\n       <div>\n         {/* Back to Categories Button */}\n         <div className=\"mb-3\">\n@@ -882,27 +819,27 @@\n           <div className=\"col-md-4\">\n             <div className=\"card border-0 shadow-sm\">\n               <div className=\"card-body text-center\">\n                 <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{subcategoriesArray.length}</h4>\n+                <h4 className=\"mt-2 mb-0\">{subcategories.length}</h4>\n                 <small className=\"text-muted\">Total Subcategories</small>\n               </div>\n             </div>\n           </div>\n           <div className=\"col-md-4\">\n             <div className=\"card border-0 shadow-sm\">\n               <div className=\"card-body text-center\">\n                 <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{subcategoriesArray.filter(subcat => subcat.status).length}</h4>\n+                <h4 className=\"mt-2 mb-0\">{subcategories.filter(subcat => subcat.status).length}</h4>\n                 <small className=\"text-muted\">Active Subcategories</small>\n               </div>\n             </div>\n           </div>\n           <div className=\"col-md-4\">\n             <div className=\"card border-0 shadow-sm\">\n               <div className=\"card-body text-center\">\n                 <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n-                <h4 className=\"mt-2 mb-0\">{categoriesArray.filter(cat => !cat.parent).length}</h4>\n+                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n                 <small className=\"text-muted\">Parent Categories</small>\n               </div>\n             </div>\n           </div>\n@@ -913,9 +850,9 @@\n           <div className=\"card-header bg-white border-bottom\">\n             <h5 className=\"mb-0 fw-semibold\">All Subcategories</h5>\n           </div>\n           <div className=\"card-body p-0\">\n-            {subcategoriesArray.length === 0 ? (\n+            {subcategories.length === 0 ? (\n               <div className=\"text-center py-5\">\n                 <i className=\"bi bi-diagram-3\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n                 <p className=\"mt-2 text-muted\">No subcategories found. Create your first subcategory!</p>\n                 <button\n@@ -939,9 +876,9 @@\n                       <th className=\"text-center\">Actions</th>\n                     </tr>\n                   </thead>\n                   <tbody>\n-                    {subcategoriesArray.map(subcategory => (\n+                    {subcategories.map(subcategory => (\n                       <tr key={subcategory._id}>\n                         <td className=\"ps-4\">\n                           <div className=\"d-flex align-items-center\">\n                             <i className=\"bi bi-tag text-secondary me-2\"></i>\n@@ -1046,9 +983,9 @@\n                   onChange={handleSubcategoryInputChange}\n                   required\n                 >\n                   <option value=\"\">Select Parent Category</option>\n-                  {Array.isArray(categories) && categories.filter(cat => !cat.parent).map(category => (\n+                  {categories.filter(cat => !cat.parent).map(category => (\n                     <option key={category._id} value={category._id}>\n                       {category.name}\n                     </option>\n                   ))}\n"
                },
                {
                    "date": 1753121911241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,30 @@\n         throw new Error(response.message || 'Failed to fetch categories')\n       }\n       \n       console.log('Fetched categories:', response.data)\n+      console.log('Categories data type:', typeof response.data, 'Is array:', Array.isArray(response.data))\n       \n+      // Ensure response.data is an array\n+      let categoriesData = []\n+      if (Array.isArray(response.data)) {\n+        categoriesData = response.data\n+      } else if (response.data && typeof response.data === 'object') {\n+        // Handle case where data might be wrapped in another object\n+        console.warn('Categories data is not an array, attempting to extract array from object:', response.data)\n+        if (Array.isArray(response.data.categories)) {\n+          categoriesData = response.data.categories\n+        } else if (Array.isArray(response.data.data)) {\n+          categoriesData = response.data.data\n+        } else {\n+          throw new Error('Categories data is not in expected format')\n+        }\n+      } else {\n+        throw new Error('Categories data is not an array or object')\n+      }\n+      \n       // Sort categories to show main categories first, then subcategories\n-      const sortedCategories = response.data.sort((a, b) => {\n+      const sortedCategories = categoriesData.sort((a, b) => {\n         // Main categories first\n         if (!a.parent && b.parent) return -1\n         if (a.parent && !b.parent) return 1\n         \n@@ -103,9 +122,30 @@\n         throw new Error(response.message || 'Failed to fetch subcategories')\n       }\n       \n       console.log('Fetched subcategories:', response.data)\n-      setSubcategories(response.data)\n+      console.log('Subcategories data type:', typeof response.data, 'Is array:', Array.isArray(response.data))\n+      \n+      // Ensure response.data is an array\n+      let subcategoriesData = []\n+      if (Array.isArray(response.data)) {\n+        subcategoriesData = response.data\n+      } else if (response.data && typeof response.data === 'object') {\n+        // Handle case where data might be wrapped in another object\n+        console.warn('Subcategories data is not an array, attempting to extract array from object:', response.data)\n+        if (Array.isArray(response.data.subcategories)) {\n+          subcategoriesData = response.data.subcategories\n+        } else if (Array.isArray(response.data.data)) {\n+          subcategoriesData = response.data.data\n+        } else {\n+          throw new Error('Subcategories data is not in expected format')\n+        }\n+      } else {\n+        throw new Error('Subcategories data is not an array or object')\n+      }\n+      \n+      console.log('Processed subcategories data:', subcategoriesData)\n+      setSubcategories(subcategoriesData)\n       setError('')\n     } catch (err) {\n       console.error('Fetch subcategories error:', err)\n       setError('Failed to load subcategories: ' + err.message)\n"
                }
            ],
            "date": 1752833729959,
            "name": "Commit-0",
            "content": "'use client'\nimport React, { useState, useEffect } from 'react'\nimport { get, post, put, del, uploadFile } from '@/util/apiService'\nimport { CATEGORY } from '@/util/apiEndpoints'\n\nexport default function CategoriesPage({ onNavigate }) {\n  const [activeView, setActiveView] = useState('list') // 'list' or 'add'\n  const [categories, setCategories] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [editingCategory, setEditingCategory] = useState(null)\n\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    parent: '', // For subcategories (using 'parent' to match backend schema)\n    status: true,\n    image: null // File object for upload\n  })\n\n  // Hardcoded admin token for testing\n  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\n\n  // Utility function to format hierarchical category names\n  const formatCategoryHierarchy = (category) => {\n    if (!category.parent || !category.parent.name) {\n      return category.name\n    }\n    return `${category.parent.name} > ${category.name}`\n  }\n\n  // Fetch categories from backend\n  const fetchCategories = async () => {\n    try {\n      setLoading(true)\n      \n      // Temporarily store admin token\n      localStorage.setItem('authToken', ADMIN_TOKEN)\n      \n      const response = await get(CATEGORY.GET_ALL)\n      console.log('Fetched categories response:', response)\n      \n      if (!response.success) {\n        throw new Error(response.message || 'Failed to fetch categories')\n      }\n      \n      console.log('Fetched categories:', response.data)\n      \n      // Sort categories to show main categories first, then subcategories\n      const sortedCategories = response.data.sort((a, b) => {\n        // Main categories first\n        if (!a.parent && b.parent) return -1\n        if (a.parent && !b.parent) return 1\n        \n        // Within same level, sort alphabetically\n        if (!a.parent && !b.parent) {\n          return a.name.localeCompare(b.name)\n        }\n        \n        // For subcategories, sort by parent name first, then by subcategory name\n        if (a.parent && b.parent) {\n          const parentCompare = (a.parent.name || '').localeCompare(b.parent.name || '')\n          if (parentCompare !== 0) return parentCompare\n          return a.name.localeCompare(b.name)\n        }\n        \n        return 0\n      })\n      \n      console.log('Sorted categories:', sortedCategories)\n      setCategories(sortedCategories)\n      setError('')\n    } catch (err) {\n      console.error('Fetch categories error:', err)\n      setError('Failed to load categories: ' + err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Create or update category\n  const saveCategory = async (categoryData) => {\n    try {\n      // Create FormData for file upload\n      const formDataToSend = new FormData()\n      formDataToSend.append('name', categoryData.name)\n      formDataToSend.append('description', categoryData.description || '')\n      formDataToSend.append('status', categoryData.status)\n      \n      if (categoryData.parent) {\n        formDataToSend.append('parent', categoryData.parent)\n        formDataToSend.append('isSubcategory', 'true')\n        \n        // Find parent category name for proper folder structure\n        const parentCategory = categories.find(cat => cat._id === categoryData.parent)\n        if (parentCategory) {\n          formDataToSend.append('parentCategoryName', parentCategory.name)\n        }\n      } else {\n        formDataToSend.append('isSubcategory', 'false')\n      }\n      \n      // Add category name for folder creation\n      formDataToSend.append('categoryName', categoryData.name)\n      \n      // Add image file if selected\n      if (categoryData.image) {\n        formDataToSend.append('image', categoryData.image)\n      }\n      \n      // Log all FormData key-value pairs\n      for (let pair of formDataToSend.entries()) {\n        console.log(pair[0]+ ':', pair[1]);\n      }\n      \n      // Use appropriate endpoint and method\n      const endpoint = editingCategory \n        ? `${CATEGORY.UPDATE}/${editingCategory._id}`\n        : CATEGORY.CREATE\n      \n      let response\n      if (editingCategory) {\n        // For updates with file uploads, we need to use the uploadFile method\n        response = await uploadFile(endpoint, formDataToSend)\n      } else {\n        // For new categories with file uploads\n        response = await uploadFile(endpoint, formDataToSend)\n      }\n\n      if (!response.success) {\n        throw new Error(response.message || 'Failed to save category')\n      }\n      \n      // Refresh categories list\n      fetchCategories()\n      setActiveView('list')\n      setEditingCategory(null)\n      setFormData({ name: '', description: '', parent: '', status: true, image: null })\n      \n      return response.data\n    } catch (err) {\n      setError('Failed to save category: ' + err.message)\n      throw err\n    }\n  }\n\n  // Delete category\n  const deleteCategory = async (categoryId) => {\n    if (!window.confirm('Are you sure you want to delete this category?')) {\n      return\n    }\n\n    try {\n      const response = await del(`${CATEGORY.DELETE}/${categoryId}`)\n\n      if (!response.success) {\n        throw new Error(response.message || 'Failed to delete category')\n      }\n\n      // Refresh categories list\n      fetchCategories()\n    } catch (err) {\n      setError('Failed to delete category: ' + err.message)\n    }\n  }\n\n  // Load categories on component mount\n  useEffect(() => {\n    fetchCategories()\n  }, [])\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked, files } = e.target\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : type === 'file' ? files[0] : value\n    }))\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      if (formData.image && formData.image.size > 5 * 1024 * 1024) {\n        alert('Image must be less than 5MB');\n        return;\n      }\n      await saveCategory(formData)\n    } catch (err) {\n      // Error is already handled in saveCategory\n    }\n  }\n\n  const handleEdit = (category) => {\n    setEditingCategory(category)\n    setFormData({\n      name: category.name,\n      description: category.description || '',\n      parent: category.parent ? (category.parent._id || category.parent) : '',\n      status: category.status\n    })\n    setActiveView('add')\n  }\n\n  const renderCategoryList = () => {\n    if (loading) {\n      return (\n        <div className=\"text-center py-5\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n          <p className=\"mt-2 text-muted\">Loading categories...</p>\n        </div>\n      )\n    }\n\n    if (error) {\n      return (\n        <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n          <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n          <div>{error}</div>\n          <button \n            className=\"btn btn-outline-danger btn-sm ms-auto\"\n            onClick={fetchCategories}\n          >\n            Retry\n          </button>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        {/* Stats Cards */}\n        <div className=\"row mb-4\">\n          <div className=\"col-md-4\">\n            <div className=\"card border-0 shadow-sm\">\n              <div className=\"card-body text-center\">\n                <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n                <small className=\"text-muted\">Main Categories</small>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"card border-0 shadow-sm\">\n              <div className=\"card-body text-center\">\n                <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.parent).length}</h4>\n                <small className=\"text-muted\">Sub Categories</small>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"card border-0 shadow-sm\">\n              <div className=\"card-body text-center\">\n                <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.status).length}</h4>\n                <small className=\"text-muted\">Active Categories</small>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Categories Table */}\n        <div className=\"card border-0 shadow-sm\">\n          <div className=\"card-header bg-white border-bottom\">\n            <h5 className=\"mb-0 fw-semibold\">All Categories</h5>\n          </div>\n          <div className=\"card-body p-0\">\n            {categories.length === 0 ? (\n              <div className=\"text-center py-5\">\n                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n                <p className=\"mt-2 text-muted\">No categories found. Create your first category!</p>\n                <button\n                  className=\"btn btn-success\"\n                  onClick={() => setActiveView('add')}\n                >\n                  <i className=\"bi bi-plus-circle me-2\"></i>\n                  Add Category\n                </button>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover mb-0\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th className=\"ps-4\">Category Name</th>\n                      <th>Image</th>\n                      <th>Description</th>\n                      <th>Type</th>\n                      <th>Status</th>\n                      <th className=\"text-center\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {categories.map(category => (\n                      <tr key={category._id} className={category.parent ? 'table-light' : ''}>\n                        <td className=\"ps-4\">\n                          <div className=\"d-flex align-items-center\">\n                            {category.parent ? (\n                              <>\n                                <i className=\"bi bi-arrow-return-right text-muted me-2\"></i>\n                                <i className=\"bi bi-tag text-secondary me-2\"></i>\n                                <span>{formatCategoryHierarchy(category)}</span>\n                              </>\n                            ) : (\n                              <>\n                                <i className=\"bi bi-grid text-primary me-2\"></i>\n                                <strong>{category.name}</strong>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                        <td>\n                          {category.image?.url ? (\n                            <img \n                              src={category.image.url} \n                              alt={category.name}\n                              className=\"rounded\"\n                              style={{ width: '40px', height: '40px', objectFit: 'cover' }}\n                            />\n                          ) : (\n                            <div \n                              className=\"bg-light rounded d-flex align-items-center justify-content-center\"\n                              style={{ width: '40px', height: '40px' }}\n                            >\n                              <i className=\"bi bi-image text-muted\"></i>\n                            </div>\n                          )}\n                        </td>\n                        <td>{category.description || '-'}</td>\n                        <td>\n                          <span className={`badge ${category.parent ? 'bg-secondary' : 'bg-primary'}`}>\n                            {category.parent ? 'Sub Category' : 'Main Category'}\n                          </span>\n                        </td>\n                        <td>\n                          <span className={`badge ${category.status ? 'bg-success' : 'bg-danger'}`}>\n                            {category.status ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td className=\"text-center\">\n                          <button \n                            className=\"btn btn-sm btn-outline-primary me-1\"\n                            onClick={() => handleEdit(category)}\n                            title=\"Edit Category\"\n                          >\n                            <i className=\"bi bi-pencil\"></i>\n                          </button>\n                          <button \n                            className=\"btn btn-sm btn-outline-danger\"\n                            onClick={() => deleteCategory(category._id)}\n                            title=\"Delete Category\"\n                          >\n                            <i className=\"bi bi-trash\"></i>\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const renderAddCategoryForm = () => (\n    <div className=\"card border-0 shadow-sm\">\n      <div className=\"card-header bg-white border-bottom\">\n        <h5 className=\"mb-0 fw-semibold\">\n          {editingCategory ? 'Edit Category' : 'Add New Category'}\n        </h5>\n      </div>\n      <div className=\"card-body\">\n        {error && (\n          <div className=\"alert alert-danger d-flex align-items-center mb-3\" role=\"alert\">\n            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n            <div>{error}</div>\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Category Name *</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Parent Category</label>\n                <select\n                  className=\"form-select\"\n                  name=\"parent\"\n                  value={formData.parent}\n                  onChange={handleInputChange}\n                >\n                  <option value=\"\">Main Category</option>\n                  {categories.filter(cat => !cat.parent).map(category => (\n                    <option key={category._id} value={category._id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"form-text\">Leave empty for main category, select parent for subcategory</div>\n              </div>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  rows=\"3\"\n                />\n              </div>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Category Image</label>\n                <input\n                  type=\"file\"\n                  className=\"form-control\"\n                  name=\"image\"\n                  onChange={handleInputChange}\n                  accept=\"image/*\"\n                />\n                <div className=\"form-text\">\n                  Upload an image for this category. Recommended size: 300x300px. \n                  {formData.parent ? ' Will be saved in subcategories folder.' : ' Will be saved in main category folder.'}\n                </div>\n                {formData.image && (\n                  <div className=\"mt-2\">\n                    <small className=\"text-success\">\n                      <i className=\"bi bi-check-circle me-1\"></i>\n                      Selected: {formData.image.name}\n                    </small>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"mb-3\">\n                <div className=\"form-check\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    name=\"status\"\n                    checked={formData.status}\n                    onChange={handleInputChange}\n                  />\n                  <label className=\"form-check-label\">Active Status</label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"d-flex gap-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-secondary\"\n              onClick={() => {\n                setActiveView('list')\n                setEditingCategory(null)\n                setFormData({ name: '', description: '', parent: '', status: true })\n                setError('')\n              }}\n            >\n              <i className=\"bi bi-arrow-left me-2\"></i>\n              Back to List\n            </button>\n            <button type=\"submit\" className=\"btn btn-success\">\n              <i className=\"bi bi-check-circle me-2\"></i>\n              {editingCategory ? 'Update Category' : 'Save Category'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"container-fluid\">\n      {/* Page Header */}\n      <div className=\"row mb-4\">\n        <div className=\"col-12\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div>\n              <h2 className=\"fw-bold text-dark mb-1\">Categories Management</h2>\n              <p className=\"text-muted mb-0\">Manage product categories and subcategories</p>\n            </div>\n            <div className=\"d-flex gap-2\">\n              {activeView === 'list' ? (\n                <button\n                  className=\"btn btn-success\"\n                  onClick={() => setActiveView('add')}\n                >\n                  <i className=\"bi bi-plus-circle me-2\"></i>\n                  Add Category\n                </button>\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {activeView === 'list' ? renderCategoryList() : renderAddCategoryForm()}\n    </div>\n  )\n}\n"
        }
    ]
}