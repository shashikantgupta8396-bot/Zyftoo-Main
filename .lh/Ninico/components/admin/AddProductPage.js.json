{
    "sourceFile": "Ninico/components/admin/AddProductPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753281683637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753722806215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,31 @@\n     name: '',\r\n     short_description: '',\r\n     description: '',\r\n \r\n-    // Pricing\r\n+    // Legacy Pricing (kept for backward compatibility)\r\n     price: '',\r\n     compare_price: '',\r\n     cost_price: '',\r\n     sale_price: '',\r\n     discount: '',\r\n \r\n+    // New Retail Pricing Structure\r\n+    retailPrice: {\r\n+      mrp: '',\r\n+      sellingPrice: '',\r\n+      discount: 0,\r\n+      currency: 'INR'\r\n+    },\r\n+\r\n+    // Corporate Pricing\r\n+    corporatePricing: {\r\n+      enabled: false,\r\n+      minimumOrderQuantity: 1,\r\n+      priceTiers: [],\r\n+      customQuoteThreshold: null\r\n+    },\r\n+\r\n     // Inventory\r\n     sku: '',\r\n     quantity: '',\r\n     stock_status: 'in_stock',\r\n@@ -30,12 +46,20 @@\n     requires_shipping: true,\r\n     available_from: '',\r\n     available_to: '',\r\n \r\n+    // Product Variations\r\n+    variations: [],\r\n+\r\n     // Categories & Tags\r\n     categories: [],\r\n     tags: [],\r\n \r\n+    // Product Relations\r\n+    related_products: [],\r\n+    cross_sell_products: [],\r\n+    is_random_related_products: false,\r\n+\r\n     // Images\r\n     images: [],\r\n     product_thumbnail_id: null,\r\n     product_galleries_id: [],\r\n@@ -57,8 +81,18 @@\n     is_popular: false,\r\n     is_trending: false,\r\n     is_return: false,\r\n     status: true,\r\n+\r\n+    // New Business Features\r\n+    safe_checkout: true,\r\n+    secure_checkout: true,\r\n+    social_share: true,\r\n+    encourage_order: false,\r\n+    encourage_view: false,\r\n+\r\n+    // Corporate Features\r\n+    is_corporate_only: false\r\n   })\r\n \r\n   // Refs for file inputs\r\n   const imageInputs = {\r\n"
                },
                {
                    "date": 1753725076251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,10 @@\n   // Fetch categories from backend\r\n   const fetchCategories = async () => {\r\n     try {\r\n       setCategoriesLoading(true)\r\n-      console.log('Fetching categories from:', `${API_BASE_URL}/categories`)\r\n-      const response = await fetch(`${API_BASE_URL}/categories`, {\r\n+      console.log('Fetching categories from:', `${API_BASE_URL}/products/categories`)\r\n+      const response = await fetch(`${API_BASE_URL}/products/categories`, {\r\n         method: 'GET',\r\n         headers: {\r\n           'Content-Type': 'application/json',\r\n           'Authorization': `Bearer ${ADMIN_TOKEN}`\r\n"
                },
                {
                    "date": 1753725402781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,10 @@\n   // Fetch categories from backend\r\n   const fetchCategories = async () => {\r\n     try {\r\n       setCategoriesLoading(true)\r\n-      console.log('Fetching categories from:', `${API_BASE_URL}/products/categories`)\r\n-      const response = await fetch(`${API_BASE_URL}/products/categories`, {\r\n+      console.log('Fetching categories from:', `${API_BASE_URL}/categories`)\r\n+      const response = await fetch(`${API_BASE_URL}/categories`, {\r\n         method: 'GET',\r\n         headers: {\r\n           'Content-Type': 'application/json',\r\n           'Authorization': `Bearer ${ADMIN_TOKEN}`\r\n"
                }
            ],
            "date": 1753281683637,
            "name": "Commit-0",
            "content": "'use client'\r\n\r\nimport { useState, useEffect, useRef } from 'react'\r\n\r\nexport default function AddProductPage({ onNavigate }) {\r\n  const [activeTab, setActiveTab] = useState('basic')\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const [uploadingImages, setUploadingImages] = useState({})\r\n  const [formData, setFormData] = useState({\r\n    // Basic Info\r\n    name: '',\r\n    short_description: '',\r\n    description: '',\r\n\r\n    // Pricing\r\n    price: '',\r\n    compare_price: '',\r\n    cost_price: '',\r\n    sale_price: '',\r\n    discount: '',\r\n\r\n    // Inventory\r\n    sku: '',\r\n    quantity: '',\r\n    stock_status: 'in_stock',\r\n    type: 'simple',\r\n    unit: '',\r\n    weight: '',\r\n    requires_shipping: true,\r\n    available_from: '',\r\n    available_to: '',\r\n\r\n    // Categories & Tags\r\n    categories: [],\r\n    tags: [],\r\n\r\n    // Images\r\n    images: [],\r\n    product_thumbnail_id: null,\r\n    product_galleries_id: [],\r\n    size_chart_image_id: null,\r\n\r\n    // SEO\r\n    meta_title: '',\r\n    meta_description: '',\r\n    product_meta_image_id: null,\r\n\r\n    // Shipping & Tax\r\n    is_free_shipping: false,\r\n    tax_id: '',\r\n    estimated_delivery_text: '',\r\n    return_policy_text: '',\r\n\r\n    // Flags\r\n    is_featured: false,\r\n    is_popular: false,\r\n    is_trending: false,\r\n    is_return: false,\r\n    status: true,\r\n  })\r\n\r\n  // Refs for file inputs\r\n  const imageInputs = {\r\n    images: useRef(),\r\n    product_thumbnail_id: useRef(),\r\n    product_galleries_id: useRef(),\r\n    size_chart_image_id: useRef(),\r\n    product_meta_image_id: useRef(),\r\n  }\r\n\r\n  // Sample categories with subcategories - will be replaced with API data\r\n  const [availableCategories, setAvailableCategories] = useState([])\r\n  const [categoriesLoading, setCategoriesLoading] = useState(true)\r\n\r\n  // API base URL - try different ports/hosts for development\r\n  const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'\r\n  \r\n  // Hardcoded admin token for testing\r\n  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MzI4MTMyMCwiZXhwIjoxNzUzODg2MTIwfQ.3wEx7ZCDvYtUQppFM9CcXjhG1zTQX9_RYY_dy3Y6MZs'\r\n\r\n  // Utility function to format hierarchical category names\r\n  const formatCategoryHierarchy = (category) => {\r\n    if (!category.parent || !category.parent.name) {\r\n      return category.name\r\n    }\r\n    return `${category.parent.name} > ${category.name}`\r\n  }\r\n\r\n  // Fetch categories from backend\r\n  const fetchCategories = async () => {\r\n    try {\r\n      setCategoriesLoading(true)\r\n      console.log('Fetching categories from:', `${API_BASE_URL}/categories`)\r\n      const response = await fetch(`${API_BASE_URL}/categories`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${ADMIN_TOKEN}`\r\n        },\r\n        credentials: 'include'\r\n      })\r\n      \r\n      console.log('Response status:', response.status)\r\n      console.log('Response ok:', response.ok)\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`)\r\n      }\r\n      \r\n      const data = await response.json()\r\n      console.log('Fetched categories:', data)\r\n      \r\n      // Sort categories to show main categories first, then subcategories\r\n      const sortedCategories = data.sort((a, b) => {\r\n        // Main categories first\r\n        if (!a.parent && b.parent) return -1\r\n        if (a.parent && !b.parent) return 1\r\n        \r\n        // Within same level, sort alphabetically\r\n        if (!a.parent && !b.parent) {\r\n          return a.name.localeCompare(b.name)\r\n        }\r\n        \r\n        // For subcategories, sort by parent name first, then by subcategory name\r\n        if (a.parent && b.parent) {\r\n          const parentCompare = (a.parent.name || '').localeCompare(b.parent.name || '')\r\n          if (parentCompare !== 0) return parentCompare\r\n          return a.name.localeCompare(b.name)\r\n        }\r\n        \r\n        return 0\r\n      })\r\n      \r\n      setAvailableCategories(sortedCategories)\r\n      setError('')\r\n    } catch (err) {\r\n      console.error('Fetch categories error:', err)\r\n      setError('Failed to load categories: ' + err.message)\r\n    } finally {\r\n      setCategoriesLoading(false)\r\n    }\r\n  }\r\n\r\n  // Load categories on component mount\r\n  useEffect(() => {\r\n    fetchCategories()\r\n  }, [])\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }))\r\n  }\r\n\r\n  const calculateDiscount = () => {\r\n    const price = parseFloat(formData.price) || 0\r\n    const comparePrice = parseFloat(formData.compare_price) || 0\r\n    if (price && comparePrice && comparePrice > price) {\r\n      const discount = ((comparePrice - price) / comparePrice * 100).toFixed(1)\r\n      return `${discount}% off`\r\n    }\r\n    return ''\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    setLoading(true)\r\n    setError('')\r\n    \r\n    try {\r\n      // Validate required fields\r\n      if (!formData.name.trim()) {\r\n        throw new Error('Product name is required')\r\n      }\r\n      if (!formData.description.trim()) {\r\n        throw new Error('Product description is required')\r\n      }\r\n      if (!formData.price || formData.price <= 0) {\r\n        throw new Error('Valid price is required')\r\n      }\r\n      if (!formData.categories || formData.categories.length === 0) {\r\n        throw new Error('Please select at least one category')\r\n      }\r\n      \r\n      // Prepare product data for backend\r\n      const productData = {\r\n        // Basic Info\r\n        name: formData.name.trim(),\r\n        description: formData.description.trim(),\r\n        short_description: formData.short_description.trim(),\r\n        \r\n        // Pricing & Inventory\r\n        price: parseFloat(formData.price),\r\n        sku: formData.sku.trim() || undefined,\r\n        quantity: formData.track_quantity ? parseInt(formData.quantity) || 0 : null,\r\n        stock_status: formData.track_quantity ? (parseInt(formData.quantity) > 0 ? 'in_stock' : 'out_of_stock') : 'in_stock',\r\n        \r\n        // Categories (MongoDB ObjectIds)\r\n        categories: formData.categories.filter(Boolean),\r\n        \r\n        // Images - include all uploaded images\r\n        images: formData.images || [],\r\n        product_thumbnail_id: formData.product_thumbnail_id || null,\r\n        product_galleries_id: formData.product_galleries_id || [],\r\n        size_chart_image_id: formData.size_chart_image_id || null,\r\n        product_meta_image_id: formData.product_meta_image_id || null,\r\n        \r\n        // Shipping & Tax\r\n        weight: formData.requires_shipping ? parseFloat(formData.weight) || null : null,\r\n        tax_id: formData.tax_id && formData.tax_id !== '' && formData.tax_id !== 'tax1' ? formData.tax_id : null,\r\n        \r\n        // SEO & Settings\r\n        meta_title: formData.meta_title.trim() || formData.name.trim(),\r\n        meta_description: formData.meta_description.trim(),\r\n        \r\n        // Product type and status\r\n        type: 'simple', // Default to simple product type\r\n        status: formData.status,\r\n        is_featured: formData.is_featured,\r\n        is_popular: formData.is_popular,\r\n        is_trending: formData.is_trending\r\n      }\r\n      \r\n      console.log('Submitting product data:', productData)\r\n      \r\n      // Send to backend API\r\n      const response = await fetch(`${API_BASE_URL}/products`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${ADMIN_TOKEN}`\r\n        },\r\n        body: JSON.stringify(productData)\r\n      })\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json()\r\n        throw new Error(errorData.message || errorData.error || 'Failed to save product')\r\n      }\r\n      \r\n      const savedProduct = await response.json()\r\n      console.log('Product saved successfully:', savedProduct)\r\n      \r\n      // Show success message\r\n      alert('Product saved successfully!')\r\n      \r\n      // Reset form or navigate back\r\n      if (onNavigate) {\r\n        onNavigate('products')\r\n      }\r\n    } catch (err) {\r\n      console.error('Product save error:', err)\r\n      setError('Failed to save product: ' + err.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const renderBasicInfoTab = () => (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Product Name *</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Short Description</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            name=\"short_description\"\r\n            value={formData.short_description}\r\n            onChange={handleInputChange}\r\n            rows=\"2\"\r\n            placeholder=\"Brief product summary for listings\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Description *</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            name=\"description\"\r\n            value={formData.description}\r\n            onChange={handleInputChange}\r\n            rows=\"5\"\r\n            placeholder=\"Detailed product description\"\r\n            required\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const renderPricingInventoryTab = () => (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Price *</label>\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">₹</span>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              className=\"form-control\"\r\n              name=\"price\"\r\n              value={formData.price}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Compare at Price</label>\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">₹</span>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              className=\"form-control\"\r\n              name=\"compare_price\"\r\n              value={formData.compare_price}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Original price\"\r\n            />\r\n          </div>\r\n          {calculateDiscount() && (\r\n            <div className=\"form-text text-success fw-bold\">{calculateDiscount()}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Cost per Item</label>\r\n          <div className=\"input-group\">\r\n            <span className=\"input-group-text\">₹</span>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              className=\"form-control\"\r\n              name=\"cost_price\"\r\n              value={formData.cost_price}\r\n              onChange={handleInputChange}\r\n              placeholder=\"Your cost\"\r\n            />\r\n          </div>\r\n          <div className=\"form-text\">Customers won't see this</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">SKU</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"sku\"\r\n            value={formData.sku}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Stock keeping unit\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name=\"track_quantity\"\r\n              checked={formData.track_quantity}\r\n              onChange={handleInputChange}\r\n            />\r\n            <label className=\"form-check-label\">Track quantity</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {formData.track_quantity && (\r\n        <div className=\"col-md-6\">\r\n          <div className=\"mb-3\">\r\n            <label className=\"form-label\">Quantity</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              name=\"quantity\"\r\n              value={formData.quantity}\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n  const renderCategoriesTab = () => (\r\n    <div className=\"row\">\r\n      {error && (\r\n        <div className=\"col-12 mb-3\">\r\n          <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\r\n            <div>{error}</div>\r\n            <button \r\n              className=\"btn btn-outline-danger btn-sm ms-auto\"\r\n              onClick={fetchCategories}\r\n            >\r\n              Retry\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {categoriesLoading ? (\r\n        <div className=\"col-12\">\r\n          <div className=\"text-center p-4\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n              <span className=\"visually-hidden\">Loading categories...</span>\r\n            </div>\r\n            <p className=\"mt-2 text-muted\">Loading categories...</p>\r\n          </div>\r\n        </div>\r\n      ) : availableCategories.length === 0 ? (\r\n        <div className=\"col-12\">\r\n          <div className=\"border rounded p-4 text-center\">\r\n            <i className=\"bi bi-grid text-muted\" style={{ fontSize: '3rem' }}></i>\r\n            <h5 className=\"mt-3 mb-2\">No Categories Available</h5>\r\n            <p className=\"text-muted mb-3\">You need to create categories before adding products.</p>\r\n            <button \r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => onNavigate && onNavigate('categories')}\r\n            >\r\n              <i className=\"bi bi-plus-circle me-2\"></i>\r\n              Create Categories\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* Category Selection */}\r\n          <div className=\"col-md-6\">\r\n            <div className=\"card border-0 shadow-sm\">\r\n              <div className=\"card-header bg-light\">\r\n                <h6 className=\"mb-0\">Select Category</h6>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <div className=\"mb-3\">\r\n                  <label className=\"form-label\">Categories *</label>\r\n                  <select\r\n                    className=\"form-select\"\r\n                    multiple\r\n                    size=\"8\"\r\n                    value={formData.categories}\r\n                    onChange={(e) => {\r\n                      const selectedOptions = Array.from(e.target.selectedOptions, option => option.value)\r\n                      setFormData(prev => ({\r\n                        ...prev,\r\n                        categories: selectedOptions\r\n                      }))\r\n                    }}\r\n                    required\r\n                  >\r\n                    {availableCategories.map(category => (\r\n                      <option key={category._id} value={category._id}>\r\n                        {formatCategoryHierarchy(category)}\r\n                        {category.description && ` - ${category.description}`}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  <div className=\"form-text\">Hold Ctrl/Cmd to select multiple categories. Main categories and subcategories are both available.</div>\r\n                  \r\n                  {formData.categories.length > 0 && (\r\n                    <div className=\"mt-2\">\r\n                      <small className=\"text-success\">\r\n                        <i className=\"bi bi-check-circle me-1\"></i>\r\n                        Selected {formData.categories.length} categories\r\n                      </small>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Selected Categories Display */}\r\n          <div className=\"col-md-6\">\r\n            <div className=\"card border-0 shadow-sm\">\r\n              <div className=\"card-header bg-light\">\r\n                <h6 className=\"mb-0\">Selected Categories</h6>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                {formData.categories.length === 0 ? (\r\n                  <div className=\"text-center py-4\">\r\n                    <i className=\"bi bi-grid text-muted\" style={{ fontSize: '2rem' }}></i>\r\n                    <p className=\"text-muted mt-2 mb-0\">No categories selected</p>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <div className=\"d-flex flex-wrap gap-2\">\r\n                      {formData.categories.map(categoryId => {\r\n                        const category = availableCategories.find(cat => cat._id === categoryId)\r\n                        if (!category) return null\r\n                        return (\r\n                          <div key={category._id} className=\"d-flex align-items-center p-2 bg-primary bg-opacity-10 rounded\">\r\n                            {category.image?.url && (\r\n                              <img \r\n                                src={category.image.url} \r\n                                alt={category.name}\r\n                                className=\"rounded me-2\"\r\n                                style={{ width: '24px', height: '24px', objectFit: 'cover' }}\r\n                              />\r\n                            )}\r\n                            <div>\r\n                              <div className=\"fw-semibold text-primary\">{formatCategoryHierarchy(category)}</div>\r\n                              {category.description && (\r\n                                <small className=\"text-muted\">{category.description}</small>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        )\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Category Management Link */}\r\n          <div className=\"col-12 mt-3\">\r\n            <div className=\"d-flex justify-content-between align-items-center p-3 bg-light rounded\">\r\n              <div>\r\n                <h6 className=\"mb-1\">Need to manage categories?</h6>\r\n                <small className=\"text-muted\">Add, edit, or organize your product categories</small>\r\n              </div>\r\n              <button \r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary btn-sm\"\r\n                onClick={() => onNavigate && onNavigate('categories')}\r\n              >\r\n                <i className=\"bi bi-gear me-2\"></i>\r\n                Manage Categories\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n\r\n  // Helper for image upload with enhanced features\r\n  const handleImageUpload = async (e, field) => {\r\n    const files = Array.from(e.target.files);\r\n    if (!files.length) return;\r\n\r\n    console.log('Uploading images for field:', field, 'Files:', files.length);\r\n    setError(''); // Clear previous errors\r\n    setUploadingImages(prev => ({ ...prev, [field]: true }));\r\n\r\n    // Validate files\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];\r\n    \r\n    for (const file of files) {\r\n      if (file.size > maxSize) {\r\n        setError(`File ${file.name} is too large. Maximum size is 10MB.`);\r\n        setUploadingImages(prev => ({ ...prev, [field]: false }));\r\n        return;\r\n      }\r\n      if (!allowedTypes.includes(file.type)) {\r\n        setError(`File ${file.name} has unsupported format. Please use JPG, PNG, WebP, or GIF.`);\r\n        setUploadingImages(prev => ({ ...prev, [field]: false }));\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      // For galleries/images, allow multiple; for others, only one\r\n      if (field === 'images' || field === 'product_galleries_id') {\r\n        let uploadedUrls = [];\r\n        for (const file of files) {\r\n          const formDataObj = new FormData();\r\n          formDataObj.append('image', file);\r\n          \r\n          console.log('Uploading file:', file.name, 'to endpoint:', `${API_BASE_URL}/upload/product-images`);\r\n          \r\n          const res = await fetch(`${API_BASE_URL}/upload/product-images`, {\r\n            method: 'POST',\r\n            headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` },\r\n            body: formDataObj\r\n          });\r\n          \r\n          if (!res.ok) {\r\n            const errorData = await res.json().catch(() => ({ message: 'Upload failed' }));\r\n            throw new Error(errorData.message || 'Upload failed');\r\n          }\r\n          \r\n          const data = await res.json();\r\n          console.log('Upload response:', data);\r\n          uploadedUrls.push(data.url);\r\n        }\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          [field]: [...(prev[field] || []), ...uploadedUrls]\r\n        }));\r\n      } else {\r\n        // Single file upload for thumbnails, size charts, meta images\r\n        const formDataObj = new FormData();\r\n        formDataObj.append('image', files[0]);\r\n        \r\n        let endpoint;\r\n        switch(field) {\r\n          case 'product_thumbnail_id':\r\n            endpoint = '/upload/product-thumbnail';\r\n            break;\r\n          case 'size_chart_image_id':\r\n            endpoint = '/upload/size-chart';\r\n            break;\r\n          case 'product_meta_image_id':\r\n            endpoint = '/upload/meta-image';\r\n            break;\r\n          default:\r\n            endpoint = '/upload/product-images';\r\n        }\r\n        \r\n        console.log('Uploading single file:', files[0].name, 'to endpoint:', `${API_BASE_URL}${endpoint}`);\r\n        \r\n        const res = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n          method: 'POST',\r\n          headers: { 'Authorization': `Bearer ${ADMIN_TOKEN}` },\r\n          body: formDataObj\r\n        });\r\n        \r\n        if (!res.ok) {\r\n          const errorData = await res.json().catch(() => ({ message: 'Upload failed' }));\r\n          throw new Error(errorData.message || 'Upload failed');\r\n        }\r\n        \r\n        const data = await res.json();\r\n        console.log('Upload response:', data);\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          [field]: data.url\r\n        }));\r\n      }\r\n      \r\n      // Clear the file input after successful upload\r\n      if (e.target) {\r\n        e.target.value = '';\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('Image upload error:', err);\r\n      setError('Image upload failed: ' + err.message);\r\n    } finally {\r\n      setUploadingImages(prev => ({ ...prev, [field]: false }));\r\n    }\r\n  };\r\n\r\n  const renderImagesTab = () => (\r\n    <div className=\"row\">\r\n      <div className=\"col-12 mb-4\">\r\n        <div className=\"alert alert-info\">\r\n          <i className=\"bi bi-info-circle me-2\"></i>\r\n          <strong>Image Guidelines:</strong> Upload high-quality images (JPG, PNG, WebP, GIF). Maximum file size: 10MB per image.\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label fw-semibold\">\r\n            <i className=\"bi bi-images me-2\"></i>\r\n            Product Images\r\n          </label>\r\n          <div className=\"upload-zone border-2 border-dashed rounded p-3 text-center\">\r\n            <input \r\n              type=\"file\" \r\n              className=\"form-control\" \r\n              accept=\"image/*\" \r\n              multiple \r\n              ref={imageInputs.images} \r\n              onChange={e => handleImageUpload(e, 'images')}\r\n              disabled={uploadingImages.images}\r\n            />\r\n            {uploadingImages.images && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\"></div>\r\n                <small className=\"text-primary\">Uploading images...</small>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-text mt-2\">\r\n            <i className=\"bi bi-upload me-1\"></i>\r\n            Upload multiple images. First image will be the main product image.\r\n          </div>\r\n          \r\n          {/* Image Previews */}\r\n          {formData.images && formData.images.length > 0 && (\r\n            <div className=\"mt-3\">\r\n              <h6 className=\"fw-semibold mb-2\">Uploaded Images ({formData.images.length})</h6>\r\n              <div className=\"row g-2\">\r\n                {formData.images.map((img, i) => (\r\n                  <div key={i} className=\"col-4\">\r\n                    <div className=\"position-relative\">\r\n                      <img \r\n                        src={img} \r\n                        alt={`Product ${i+1}`} \r\n                        className=\"w-100 rounded border\"\r\n                        style={{height: '100px', objectFit: 'cover'}}\r\n                      />\r\n                      {i === 0 && (\r\n                        <span className=\"position-absolute top-0 start-0 badge bg-primary m-1\">\r\n                          Main\r\n                        </span>\r\n                      )}\r\n                      <button \r\n                        type=\"button\"\r\n                        className=\"btn btn-sm btn-danger position-absolute top-0 end-0 m-1\"\r\n                        onClick={() => setFormData(prev => ({...prev, images: prev.images.filter((_, idx) => idx !== i)}))}\r\n                        title=\"Remove image\"\r\n                      >\r\n                        <i className=\"bi bi-x\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label fw-semibold\">\r\n            <i className=\"bi bi-image me-2\"></i>\r\n            Product Thumbnail\r\n          </label>\r\n          <div className=\"upload-zone border-2 border-dashed rounded p-3 text-center\">\r\n            <input \r\n              type=\"file\" \r\n              className=\"form-control\" \r\n              accept=\"image/*\" \r\n              ref={imageInputs.product_thumbnail_id} \r\n              onChange={e => handleImageUpload(e, 'product_thumbnail_id')}\r\n              disabled={uploadingImages.product_thumbnail_id}\r\n            />\r\n            {uploadingImages.product_thumbnail_id && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\"></div>\r\n                <small className=\"text-primary\">Uploading thumbnail...</small>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-text\">Main thumbnail for product listings</div>\r\n          {formData.product_thumbnail_id && (\r\n            <div className=\"mt-3\">\r\n              <div className=\"position-relative d-inline-block\">\r\n                <img \r\n                  src={formData.product_thumbnail_id} \r\n                  alt=\"Thumbnail\" \r\n                  className=\"rounded border\"\r\n                  style={{width: '120px', height: '120px', objectFit: 'cover'}}\r\n                />\r\n                <button \r\n                  type=\"button\"\r\n                  className=\"btn btn-sm btn-danger position-absolute top-0 end-0 m-1\"\r\n                  onClick={() => setFormData(prev => ({...prev, product_thumbnail_id: null}))}\r\n                  title=\"Remove thumbnail\"\r\n                >\r\n                  <i className=\"bi bi-x\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label fw-semibold\">\r\n            <i className=\"bi bi-collection me-2\"></i>\r\n            Product Galleries\r\n          </label>\r\n          <div className=\"upload-zone border-2 border-dashed rounded p-3 text-center\">\r\n            <input \r\n              type=\"file\" \r\n              className=\"form-control\" \r\n              accept=\"image/*\" \r\n              multiple \r\n              ref={imageInputs.product_galleries_id} \r\n              onChange={e => handleImageUpload(e, 'product_galleries_id')}\r\n              disabled={uploadingImages.product_galleries_id}\r\n            />\r\n            {uploadingImages.product_galleries_id && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\"></div>\r\n                <small className=\"text-primary\">Uploading gallery images...</small>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-text\">Additional gallery images</div>\r\n          {formData.product_galleries_id && formData.product_galleries_id.length > 0 && (\r\n            <div className=\"mt-3\">\r\n              <div className=\"row g-2\">\r\n                {formData.product_galleries_id.map((img, i) => (\r\n                  <div key={i} className=\"col-6\">\r\n                    <div className=\"position-relative\">\r\n                      <img \r\n                        src={img} \r\n                        alt={`Gallery ${i+1}`} \r\n                        className=\"w-100 rounded border\"\r\n                        style={{height: '80px', objectFit: 'cover'}}\r\n                      />\r\n                      <button \r\n                        type=\"button\"\r\n                        className=\"btn btn-sm btn-danger position-absolute top-0 end-0 m-1\"\r\n                        onClick={() => setFormData(prev => ({...prev, product_galleries_id: prev.product_galleries_id.filter((_, idx) => idx !== i)}))}\r\n                        title=\"Remove image\"\r\n                      >\r\n                        <i className=\"bi bi-x\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label fw-semibold\">\r\n            <i className=\"bi bi-rulers me-2\"></i>\r\n            Size Chart Image\r\n          </label>\r\n          <div className=\"upload-zone border-2 border-dashed rounded p-3 text-center\">\r\n            <input \r\n              type=\"file\" \r\n              className=\"form-control\" \r\n              accept=\"image/*\" \r\n              ref={imageInputs.size_chart_image_id} \r\n              onChange={e => handleImageUpload(e, 'size_chart_image_id')}\r\n              disabled={uploadingImages.size_chart_image_id}\r\n            />\r\n            {uploadingImages.size_chart_image_id && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\"></div>\r\n                <small className=\"text-primary\">Uploading size chart...</small>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-text\">Size guide for customers</div>\r\n          {formData.size_chart_image_id && (\r\n            <div className=\"mt-3\">\r\n              <div className=\"position-relative d-inline-block\">\r\n                <img \r\n                  src={formData.size_chart_image_id} \r\n                  alt=\"Size Chart\" \r\n                  className=\"rounded border\"\r\n                  style={{width: '120px', height: '120px', objectFit: 'cover'}}\r\n                />\r\n                <button \r\n                  type=\"button\"\r\n                  className=\"btn btn-sm btn-danger position-absolute top-0 end-0 m-1\"\r\n                  onClick={() => setFormData(prev => ({...prev, size_chart_image_id: null}))}\r\n                  title=\"Remove size chart\"\r\n                >\r\n                  <i className=\"bi bi-x\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label fw-semibold\">\r\n            <i className=\"bi bi-share me-2\"></i>\r\n            Meta Image\r\n          </label>\r\n          <div className=\"upload-zone border-2 border-dashed rounded p-3 text-center\">\r\n            <input \r\n              type=\"file\" \r\n              className=\"form-control\" \r\n              accept=\"image/*\" \r\n              ref={imageInputs.product_meta_image_id} \r\n              onChange={e => handleImageUpload(e, 'product_meta_image_id')}\r\n              disabled={uploadingImages.product_meta_image_id}\r\n            />\r\n            {uploadingImages.product_meta_image_id && (\r\n              <div className=\"mt-2\">\r\n                <div className=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\"></div>\r\n                <small className=\"text-primary\">Uploading meta image...</small>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-text\">Image for social media sharing</div>\r\n          {formData.product_meta_image_id && (\r\n            <div className=\"mt-3\">\r\n              <div className=\"position-relative d-inline-block\">\r\n                <img \r\n                  src={formData.product_meta_image_id} \r\n                  alt=\"Meta Image\" \r\n                  className=\"rounded border\"\r\n                  style={{width: '120px', height: '120px', objectFit: 'cover'}}\r\n                />\r\n                <button \r\n                  type=\"button\"\r\n                  className=\"btn btn-sm btn-danger position-absolute top-0 end-0 m-1\"\r\n                  onClick={() => setFormData(prev => ({...prev, product_meta_image_id: null}))}\r\n                  title=\"Remove meta image\"\r\n                >\r\n                  <i className=\"bi bi-x\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const renderShippingTab = () => (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name=\"requires_shipping\"\r\n              checked={formData.requires_shipping}\r\n              onChange={handleInputChange}\r\n            />\r\n            <label className=\"form-check-label\">This is a physical product</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {formData.requires_shipping && (\r\n        <div className=\"col-md-6\">\r\n          <div className=\"mb-3\">\r\n            <label className=\"form-label\">Weight</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                className=\"form-control\"\r\n                name=\"weight\"\r\n                value={formData.weight}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span className=\"input-group-text\">kg</span>\r\n            </div>\r\n            <div className=\"form-text\">Used to calculate shipping rates</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Tax</label>\r\n          <select\r\n            className=\"form-select\"\r\n            name=\"tax_id\"\r\n            value={formData.tax_id}\r\n            onChange={handleInputChange}\r\n          >\r\n            <option value=\"\">No tax</option>\r\n            <option value=\"tax1\">GST 18%</option>\r\n            <option value=\"tax2\">GST 12%</option>\r\n            <option value=\"tax3\">GST 5%</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const renderSeoSettingsTab = () => (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Meta Title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"meta_title\"\r\n            value={formData.meta_title}\r\n            onChange={handleInputChange}\r\n            placeholder=\"Leave blank to use product name\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-12\">\r\n        <div className=\"mb-3\">\r\n          <label className=\"form-label\">Meta Description</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            name=\"meta_description\"\r\n            value={formData.meta_description}\r\n            onChange={handleInputChange}\r\n            rows=\"3\"\r\n            placeholder=\"Brief description for search engines\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-12\">\r\n        <hr className=\"my-4\" />\r\n        <h6 className=\"fw-semibold mb-3\">Product Status</h6>\r\n      </div>\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name=\"status\"\r\n              checked={formData.status}\r\n              onChange={handleInputChange}\r\n            />\r\n            <label className=\"form-check-label\">Published</label>\r\n          </div>\r\n          <div className=\"form-text\">Uncheck to save as draft</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name=\"is_featured\"\r\n              checked={formData.is_featured}\r\n              onChange={handleInputChange}\r\n            />\r\n            <label className=\"form-check-label\">Featured Product</label>\r\n          </div>\r\n          <div className=\"form-text\">Show in featured products section</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name=\"is_popular\"\r\n              checked={formData.is_popular}\r\n              onChange={handleInputChange}\r\n            />\r\n            <label className=\"form-check-label\">Popular Product</label>\r\n          </div>\r\n          <div className=\"form-text\">Show in popular products section</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"col-md-6\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              name=\"is_trending\"\r\n              checked={formData.is_trending}\r\n              onChange={handleInputChange}\r\n            />\r\n            <label className=\"form-check-label\">Trending Product</label>\r\n          </div>\r\n          <div className=\"form-text\">Show in trending products section</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n\r\n  const tabs = [\r\n    { id: 'basic', label: 'Basic Info', icon: 'bi-info-circle' },\r\n    { id: 'pricing', label: 'Pricing & Inventory', icon: 'bi-currency-dollar' },\r\n    { id: 'categories', label: 'Categories', icon: 'bi-grid' },\r\n    { id: 'images', label: 'Images', icon: 'bi-image' },\r\n    { id: 'shipping', label: 'Shipping & Tax', icon: 'bi-truck' },\r\n    { id: 'seo', label: 'SEO & Settings', icon: 'bi-search' }\r\n  ]\r\n\r\n  const uploadEndpoints = {\r\n    images: '/upload/product-image',\r\n    product_thumbnail_id: '/upload/thumbnail-image',\r\n    product_galleries_id: '/upload/product-galleries',\r\n    size_chart_image_id: '/upload/size-chart',\r\n    product_meta_image_id: '/upload/meta-image'\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* Page Header */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-12\">\r\n          <div className=\"d-flex justify-content-between align-items-center\">\r\n            <div>\r\n              <h2 className=\"fw-bold text-dark mb-1\">Add New Product</h2>\r\n              <p className=\"text-muted mb-0\">Create a new product for your store</p>\r\n            </div>\r\n            <div className=\"d-flex gap-2\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-outline-secondary\"\r\n                onClick={() => onNavigate && onNavigate('products')}\r\n              >\r\n                <i className=\"bi bi-x-circle me-2\"></i>\r\n                Cancel\r\n              </button>\r\n              <button type=\"submit\" form=\"productForm\" className=\"btn btn-success\" disabled={loading}>\r\n                {loading ? (\r\n                  <>\r\n                    <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\r\n                    Saving...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <i className=\"bi bi-check-circle me-2\"></i>\r\n                    Save Product\r\n                  </>\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error Alert */}\r\n      {error && (\r\n        <div className=\"row mb-4\">\r\n          <div className=\"col-12\">\r\n            <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n              <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\r\n              <div>{error}</div>\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn-close ms-auto\" \r\n                onClick={() => setError('')}\r\n                aria-label=\"Close\"\r\n              ></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <form id=\"productForm\" onSubmit={handleSubmit}>\r\n        <div className=\"row\">\r\n          {/* Sidebar with tabs */}\r\n          <div className=\"col-md-3\">\r\n            <div className=\"card border-0 shadow-sm\">\r\n              <div className=\"card-header bg-white border-bottom\">\r\n                <h6 className=\"mb-0 fw-semibold\">Product Details</h6>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"nav nav-pills flex-column\">\r\n                  {tabs.map(tab => (\r\n                    <button\r\n                      key={tab.id}\r\n                      type=\"button\"\r\n                      className={`nav-link text-start border-0 rounded-0 ${activeTab === tab.id ? 'active' : ''}`}\r\n                      onClick={() => setActiveTab(tab.id)}\r\n                    >\r\n                      <i className={`${tab.icon} me-2`}></i>\r\n                      {tab.label}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Main content area */}\r\n          <div className=\"col-md-9\">\r\n            <div className=\"card border-0 shadow-sm\">\r\n              <div className=\"card-header bg-white border-bottom\">\r\n                <h6 className=\"mb-0 fw-semibold\">\r\n                  <i className={`${tabs.find(t => t.id === activeTab)?.icon} me-2`}></i>\r\n                  {tabs.find(t => t.id === activeTab)?.label}\r\n                </h6>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                {activeTab === 'basic' && renderBasicInfoTab()}\r\n                {activeTab === 'pricing' && renderPricingInventoryTab()}\r\n                {activeTab === 'categories' && renderCategoriesTab()}\r\n                {activeTab === 'images' && renderImagesTab()}\r\n                {activeTab === 'shipping' && renderShippingTab()}\r\n                {activeTab === 'seo' && renderSeoSettingsTab()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}