{
    "sourceFile": "Ninico/components/examples/MigratedLoginExample.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752832805257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752832805257,
            "name": "Commit-0",
            "content": "/**\r\n * Migration Example Component\r\n * Shows how to gradually migrate from fetch to encrypted API service\r\n * This component can be used as a reference for updating your existing components\r\n */\r\n\r\n'use client';\r\nimport React, { useState } from 'react';\r\nimport { post, get } from '@/util/apiService';\r\nimport { AUTH, OTP } from '@/util/apiEndpoints';\r\n\r\nexport default function MigratedLoginExample() {\r\n  const [phone, setPhone] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [useEncryption, setUseEncryption] = useState(false);\r\n  const [toast, setToast] = useState('');\r\n\r\n  // ============================================================================\r\n  // OLD METHOD (using fetch - still works)\r\n  // ============================================================================\r\n  const loginWithFetch = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ phone, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        setToast(data.error || 'Login failed');\r\n        return;\r\n      }\r\n\r\n      setToast('Login successful (fetch method)');\r\n      return data;\r\n    } catch (error) {\r\n      setToast('Network error');\r\n      console.error('Login error:', error);\r\n    }\r\n  };\r\n\r\n  // ============================================================================\r\n  // NEW METHOD (using encrypted API service)\r\n  // ============================================================================\r\n  const loginWithEncryptedApi = async () => {\r\n    try {\r\n      const response = await post(AUTH.LOGIN, { phone, password }, useEncryption);\r\n      \r\n      if (response.success) {\r\n        setToast('Login successful (encrypted API)');\r\n        \r\n        // Store auth token if provided\r\n        if (response.data.token) {\r\n          localStorage.setItem('authToken', response.data.token);\r\n        }\r\n        \r\n        return response.data;\r\n      } else {\r\n        setToast(response.message || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      setToast(error.message || 'Login failed');\r\n      console.error('Login error:', error);\r\n    }\r\n  };\r\n\r\n  // ============================================================================\r\n  // HYBRID METHOD (checking both old and new)\r\n  // ============================================================================\r\n  const checkUserExists = async () => {\r\n    try {\r\n      // Method 1: Using fetch (old way)\r\n      const fetchResponse = await fetch(`http://localhost:5000/api/auth/check-user/${phone}`);\r\n      const fetchData = await fetchResponse.json();\r\n      console.log('Fetch result:', fetchData);\r\n\r\n      // Method 2: Using new API service\r\n      const apiResponse = await get(`${AUTH.CHECK_USER}/${phone}`);\r\n      console.log('API service result:', apiResponse.data);\r\n\r\n      setToast(`User exists: ${fetchData.exists ? 'Yes' : 'No'}`);\r\n    } catch (error) {\r\n      setToast('Error checking user');\r\n      console.error('Check user error:', error);\r\n    }\r\n  };\r\n\r\n  // ============================================================================\r\n  // SEND OTP (showing encrypted vs unencrypted)\r\n  // ============================================================================\r\n  const sendOTP = async () => {\r\n    try {\r\n      // Send OTP with encryption based on toggle\r\n      const response = await post(OTP.SEND, \r\n        { phone, purpose: 'login' }, \r\n        useEncryption  // This will encrypt the phone number if true\r\n      );\r\n      \r\n      if (response.success) {\r\n        setToast(`OTP sent ${useEncryption ? '(encrypted)' : '(unencrypted)'}`);\r\n      } else {\r\n        setToast(response.message || 'Failed to send OTP');\r\n      }\r\n    } catch (error) {\r\n      setToast(error.message || 'Failed to send OTP');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', maxWidth: '500px', margin: '0 auto' }}>\r\n      <h2>API Migration Example</h2>\r\n      \r\n      {/* Toast notification */}\r\n      {toast && (\r\n        <div style={{\r\n          padding: '10px',\r\n          margin: '10px 0',\r\n          backgroundColor: '#f0f8ff',\r\n          border: '1px solid #0066cc',\r\n          borderRadius: '4px',\r\n          color: '#0066cc'\r\n        }}>\r\n          {toast}\r\n        </div>\r\n      )}\r\n\r\n      {/* Input fields */}\r\n      <div style={{ marginBottom: '15px' }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Phone Number\"\r\n          value={phone}\r\n          onChange={(e) => setPhone(e.target.value)}\r\n          style={{\r\n            width: '100%',\r\n            padding: '10px',\r\n            margin: '5px 0',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '4px'\r\n          }}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          style={{\r\n            width: '100%',\r\n            padding: '10px',\r\n            margin: '5px 0',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '4px'\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Encryption toggle */}\r\n      <div style={{ marginBottom: '15px' }}>\r\n        <label style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={useEncryption}\r\n            onChange={(e) => setUseEncryption(e.target.checked)}\r\n          />\r\n          Use Encryption for API calls\r\n        </label>\r\n      </div>\r\n\r\n      {/* Action buttons */}\r\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n        <button\r\n          onClick={loginWithFetch}\r\n          style={{\r\n            padding: '10px',\r\n            backgroundColor: '#6c757d',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Login with Fetch (Old Method)\r\n        </button>\r\n        \r\n        <button\r\n          onClick={loginWithEncryptedApi}\r\n          style={{\r\n            padding: '10px',\r\n            backgroundColor: useEncryption ? '#dc3545' : '#28a745',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Login with API Service {useEncryption ? '(Encrypted)' : '(Unencrypted)'}\r\n        </button>\r\n        \r\n        <button\r\n          onClick={checkUserExists}\r\n          style={{\r\n            padding: '10px',\r\n            backgroundColor: '#007bff',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Check User (Both Methods)\r\n        </button>\r\n        \r\n        <button\r\n          onClick={sendOTP}\r\n          style={{\r\n            padding: '10px',\r\n            backgroundColor: '#fd7e14',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Send OTP {useEncryption ? '(Encrypted)' : '(Unencrypted)'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Documentation */}\r\n      <div style={{ marginTop: '30px', padding: '15px', backgroundColor: '#f8f9fa', borderRadius: '4px' }}>\r\n        <h4>Migration Guide:</h4>\r\n        <ol>\r\n          <li><strong>Immediate use:</strong> All your existing fetch calls continue to work unchanged</li>\r\n          <li><strong>Gradual migration:</strong> Replace fetch calls with new API service one by one</li>\r\n          <li><strong>Encryption:</strong> Use encryption for sensitive data like login credentials</li>\r\n          <li><strong>No encryption:</strong> Use unencrypted for public data like product listings</li>\r\n          <li><strong>Error handling:</strong> New API service provides better error handling and response structure</li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}