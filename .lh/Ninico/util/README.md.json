{
    "sourceFile": "Ninico/util/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752832805258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752833729962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,11 @@\n ## 📁 Files Created\r\n \r\n ```\r\n util/\r\n-├── apiEndpoints.ts     # Centralized API endpoint definitions\r\n-├── apiService.ts       # Encrypted API service with axios\r\n-├── apiExamples.ts      # Usage examples and migration guide\r\n+├── apiEndpoints.js     # Centralized API endpoint definitions\r\n+├── apiService.js       # Encrypted API service with axios\r\n+├── apiExamples.js      # Usage examples and migration guide\r\n └── .env.local          # Environment configuration\r\n ```\r\n \r\n ## 🚀 Quick Start\r\n"
                }
            ],
            "date": 1752832805258,
            "name": "Commit-0",
            "content": "# 🔐 Encrypted API Service for Next.js\r\n\r\nA safe, encrypted API service that works alongside your existing Axios/fetch calls without breaking them.\r\n\r\n## 📁 Files Created\r\n\r\n```\r\nutil/\r\n├── apiEndpoints.ts     # Centralized API endpoint definitions\r\n├── apiService.ts       # Encrypted API service with axios\r\n├── apiExamples.ts      # Usage examples and migration guide\r\n└── .env.local          # Environment configuration\r\n```\r\n\r\n## 🚀 Quick Start\r\n\r\n### 1. Environment Setup\r\n\r\nYour `.env.local` file has been created with:\r\n\r\n```env\r\nNEXT_PUBLIC_API_BASE_URL=http://localhost:5000/api\r\nNEXT_PUBLIC_ENCRYPTION_KEY=your-32-character-secret-key-here\r\nNEXT_PUBLIC_ENCRYPTION_IV=your-16-character-iv-here\r\n```\r\n\r\n**⚠️ Important:** Replace the encryption key and IV with secure values in production!\r\n\r\n### 2. Basic Usage\r\n\r\n```javascript\r\nimport { post, get } from '@/util/apiService';\r\nimport { AUTH, USER } from '@/util/apiEndpoints';\r\n\r\n// Encrypted login\r\nconst response = await post(AUTH.LOGIN, { phone, password }, true); // encrypt=true\r\n\r\n// Regular API call (unencrypted)\r\nconst user = await get(USER.PROFILE, null, false); // decrypt=false\r\n```\r\n\r\n## 🔄 Migration Strategy\r\n\r\n### Your existing code continues to work:\r\n\r\n```javascript\r\n// OLD WAY (still works fine)\r\nconst response = await fetch('http://localhost:5000/api/auth/login', {\r\n  method: 'POST',\r\n  headers: { 'Content-Type': 'application/json' },\r\n  body: JSON.stringify({ phone, password }),\r\n});\r\n```\r\n\r\n### Gradually upgrade to new service:\r\n\r\n```javascript\r\n// NEW WAY (encrypted & secure)\r\nimport { post } from '@/util/apiService';\r\nimport { AUTH } from '@/util/apiEndpoints';\r\n\r\nconst response = await post(AUTH.LOGIN, { phone, password }, true);\r\n```\r\n\r\n## 🛡️ Security Features\r\n\r\n### Encryption\r\n- **AES encryption** for sensitive payloads\r\n- **Automatic token management** (Authorization headers)\r\n- **Request/Response interceptors** for error handling\r\n\r\n### When to encrypt:\r\n- ✅ Login credentials\r\n- ✅ Personal information\r\n- ✅ Payment details\r\n- ✅ OTP verification\r\n- ❌ Public product data\r\n- ❌ Category listings\r\n\r\n## 📚 API Endpoints\r\n\r\nAll endpoints are centralized in `apiEndpoints.ts`:\r\n\r\n```javascript\r\nimport { AUTH, USER, PRODUCT, OTP, buildUrl, withId } from '@/util/apiEndpoints';\r\n\r\n// Examples:\r\nAUTH.LOGIN           // \"/auth/login\"\r\nUSER.PROFILE         // \"/user/profile\"\r\nwithId(USER.PROFILE, \"123\")  // \"/user/profile/123\"\r\nbuildUrl(PRODUCT.SEARCH, { q: \"laptop\" })  // \"/products/search?q=laptop\"\r\n```\r\n\r\n## 🔧 API Service Methods\r\n\r\n### POST (with encryption)\r\n```javascript\r\nconst response = await post(endpoint, payload, encrypt = false);\r\n```\r\n\r\n### GET (with decryption)\r\n```javascript\r\nconst response = await get(endpoint, params?, decrypt = false);\r\n```\r\n\r\n### PUT & DELETE\r\n```javascript\r\nconst response = await put(endpoint, payload, encrypt = false);\r\nconst response = await del(endpoint);\r\n```\r\n\r\n### File Upload\r\n```javascript\r\nconst formData = new FormData();\r\nformData.append('file', file);\r\nconst response = await uploadFile('/upload/image', formData);\r\n```\r\n\r\n## 📝 Response Format\r\n\r\nAll new API calls return a consistent format:\r\n\r\n```javascript\r\n{\r\n  data: {...},          // The actual response data\r\n  success: true/false,  // Whether the request succeeded\r\n  status: 200,          // HTTP status code\r\n  message: \"Success\"    // Optional message\r\n}\r\n```\r\n\r\n## 🔐 Encryption Details\r\n\r\n### Automatic Encryption\r\n- When `encrypt=true`, payloads are encrypted before sending\r\n- Server response decryption happens automatically if `response.data.body` exists\r\n- Uses AES-256-CBC encryption with configurable key and IV\r\n\r\n### Manual Encryption\r\n```javascript\r\nimport { encryptData, decryptData } from '@/util/apiService';\r\n\r\nconst encrypted = encryptData({ sensitive: \"data\" });\r\nconst decrypted = decryptData(encryptedString);\r\n```\r\n\r\n## 🔄 Backward Compatibility\r\n\r\n### Zero Breaking Changes\r\n- All existing `fetch` calls continue to work\r\n- No need to change existing components immediately\r\n- Gradual migration path available\r\n\r\n### Example Migration\r\n```javascript\r\n// Before (still works)\r\nconst res = await fetch(`http://localhost:5000/api/auth/check-user/${phone}`);\r\nconst data = await res.json();\r\n\r\n// After (better error handling + encryption option)\r\nconst response = await get(`${AUTH.CHECK_USER}/${phone}`);\r\nconst data = response.data;\r\n```\r\n\r\n## 🎯 Use Cases\r\n\r\n### Immediate Benefits\r\n1. **Better Error Handling**: Consistent error format across all API calls\r\n2. **Automatic Auth**: Authorization headers added automatically\r\n3. **Response Interceptors**: Handle 401 errors globally\r\n4. **Type Safety**: TypeScript support for better development experience\r\n\r\n### Advanced Features\r\n1. **Selective Encryption**: Encrypt only sensitive endpoints\r\n2. **Request/Response Logging**: Built-in logging for debugging\r\n3. **Token Management**: Automatic token refresh (can be extended)\r\n4. **File Uploads**: Simplified multipart/form-data handling\r\n\r\n## 🧪 Testing\r\n\r\nUse the example component at `components/examples/MigratedLoginExample.js` to test:\r\n\r\n1. Compare old fetch vs new API service\r\n2. Toggle encryption on/off\r\n3. See error handling improvements\r\n4. Test backward compatibility\r\n\r\n## 🚀 Production Checklist\r\n\r\n- [ ] Replace default encryption keys in `.env.local`\r\n- [ ] Set up proper key management for production\r\n- [ ] Update `NEXT_PUBLIC_API_BASE_URL` for production server\r\n- [ ] Test encrypted endpoints with backend\r\n- [ ] Implement server-side decryption for encrypted payloads\r\n- [ ] Set up proper CORS headers for encrypted requests\r\n\r\n## 💡 Tips\r\n\r\n1. **Start Small**: Migrate one component at a time\r\n2. **Use Encryption Wisely**: Only for sensitive data to avoid performance overhead\r\n3. **Keep Old Code**: No rush to migrate everything immediately\r\n4. **Test Thoroughly**: Use the example component to validate changes\r\n5. **Monitor Performance**: Encryption adds slight overhead\r\n\r\n## 🐛 Troubleshooting\r\n\r\n### Common Issues\r\n\r\n1. **CORS Errors**: Make sure your backend accepts the new headers\r\n2. **Encryption Failures**: Verify key and IV are 32 and 16 characters respectively\r\n3. **Token Issues**: Check if `authToken` is properly stored in localStorage\r\n4. **TypeScript Errors**: Ensure you're importing from the correct paths\r\n\r\n### Debug Mode\r\n```javascript\r\n// Enable detailed logging\r\nconsole.log('Request:', endpoint, payload);\r\nconsole.log('Response:', response);\r\n```\r\n\r\n---\r\n\r\n🎉 **You're all set!** Your old API calls continue to work while new encrypted API service is ready for use.\r\n"
        }
    ]
}