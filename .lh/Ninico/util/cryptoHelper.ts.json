{
    "sourceFile": "Ninico/util/cryptoHelper.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752835582016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752836816060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,15 @@\n \r\n // Get encryption key from environment variables\r\n const getEncryptionKey = (): string => {\r\n     const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY;\r\n+    console.log('🔑 Frontend DEBUG: Checking encryption key...');\r\n+    console.log('🔑 Key exists:', !!key);\r\n+    console.log('🔑 Key length:', key?.length || 0);\r\n+    console.log('🔑 Key value:', key ? key.substring(0, 8) + '...' : 'UNDEFINED');\r\n+    \r\n     if (!key) {\r\n+        console.error('❌ NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n         throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n     }\r\n     return key;\r\n };\r\n@@ -14,15 +20,27 @@\n  * @param data - The data to encrypt\r\n  * @returns Encrypted string\r\n  */\r\n export const encryptData = (data: any): string => {\r\n+    console.log('🔒 Frontend DEBUG: Starting encryption...');\r\n+    console.log('📝 Input data:', data);\r\n+    console.log('📝 Data type:', typeof data);\r\n+    \r\n     try {\r\n         const key = getEncryptionKey();\r\n+        console.log('🔑 Using key for encryption (first 8 chars):', key.substring(0, 8) + '...');\r\n+        \r\n         const jsonString = JSON.stringify(data);\r\n+        console.log('📝 JSON string:', jsonString);\r\n+        console.log('📝 JSON string length:', jsonString.length);\r\n+        \r\n         const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n+        console.log('🔒 Encrypted result:', encrypted);\r\n+        console.log('🔒 Encrypted length:', encrypted.length);\r\n+        \r\n         return encrypted;\r\n     } catch (error) {\r\n-        console.error('Encryption error:', error);\r\n+        console.error('❌ Frontend encryption error:', error);\r\n         throw new Error('Failed to encrypt data');\r\n     }\r\n };\r\n \r\n"
                },
                {
                    "date": 1752855276974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,10 @@\n \r\n // Get encryption key from environment variables\r\n const getEncryptionKey = (): string => {\r\n     const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY;\r\n-    console.log('🔑 Frontend DEBUG: Checking encryption key...');\r\n-    console.log('🔑 Key exists:', !!key);\r\n-    console.log('🔑 Key length:', key?.length || 0);\r\n-    console.log('🔑 Key value:', key ? key.substring(0, 8) + '...' : 'UNDEFINED');\r\n     \r\n     if (!key) {\r\n-        console.error('❌ NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n         throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n     }\r\n     return key;\r\n };\r\n@@ -20,27 +15,14 @@\n  * @param data - The data to encrypt\r\n  * @returns Encrypted string\r\n  */\r\n export const encryptData = (data: any): string => {\r\n-    console.log('🔒 Frontend DEBUG: Starting encryption...');\r\n-    console.log('📝 Input data:', data);\r\n-    console.log('📝 Data type:', typeof data);\r\n-    \r\n     try {\r\n         const key = getEncryptionKey();\r\n-        console.log('🔑 Using key for encryption (first 8 chars):', key.substring(0, 8) + '...');\r\n-        \r\n         const jsonString = JSON.stringify(data);\r\n-        console.log('📝 JSON string:', jsonString);\r\n-        console.log('📝 JSON string length:', jsonString.length);\r\n-        \r\n         const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n-        console.log('🔒 Encrypted result:', encrypted);\r\n-        console.log('🔒 Encrypted length:', encrypted.length);\r\n-        \r\n         return encrypted;\r\n     } catch (error) {\r\n-        console.error('❌ Frontend encryption error:', error);\r\n         throw new Error('Failed to encrypt data');\r\n     }\r\n };\r\n \r\n@@ -60,9 +42,8 @@\n         }\r\n         \r\n         return JSON.parse(decryptedString);\r\n     } catch (error) {\r\n-        console.error('Decryption error:', error);\r\n         throw new Error('Failed to decrypt data');\r\n     }\r\n };\r\n \r\n"
                }
            ],
            "date": 1752835582016,
            "name": "Commit-0",
            "content": "import CryptoJS from 'crypto-js';\r\n\r\n// Get encryption key from environment variables\r\nconst getEncryptionKey = (): string => {\r\n    const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY;\r\n    if (!key) {\r\n        throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n    }\r\n    return key;\r\n};\r\n\r\n/**\r\n * Encrypts any data (object, string, number, etc.) and returns a cipher string\r\n * @param data - The data to encrypt\r\n * @returns Encrypted string\r\n */\r\nexport const encryptData = (data: any): string => {\r\n    try {\r\n        const key = getEncryptionKey();\r\n        const jsonString = JSON.stringify(data);\r\n        const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n        return encrypted;\r\n    } catch (error) {\r\n        console.error('Encryption error:', error);\r\n        throw new Error('Failed to encrypt data');\r\n    }\r\n};\r\n\r\n/**\r\n * Decrypts a cipher string and returns the parsed object\r\n * @param cipherText - The encrypted string to decrypt\r\n * @returns Decrypted and parsed data\r\n */\r\nexport const decryptData = (cipherText: string): any => {\r\n    try {\r\n        const key = getEncryptionKey();\r\n        const decryptedBytes = CryptoJS.AES.decrypt(cipherText, key);\r\n        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n        \r\n        if (!decryptedString) {\r\n            throw new Error('Failed to decrypt data - invalid cipher or key');\r\n        }\r\n        \r\n        return JSON.parse(decryptedString);\r\n    } catch (error) {\r\n        console.error('Decryption error:', error);\r\n        throw new Error('Failed to decrypt data');\r\n    }\r\n};\r\n\r\n/**\r\n * Utility function to encrypt sensitive form data before storing in localStorage\r\n * @param key - Storage key\r\n * @param data - Data to encrypt and store\r\n */\r\nexport const encryptAndStore = (key: string, data: any): void => {\r\n    try {\r\n        const encrypted = encryptData(data);\r\n        localStorage.setItem(key, encrypted);\r\n    } catch (error) {\r\n        console.error('Failed to encrypt and store data:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * Utility function to decrypt and retrieve data from localStorage\r\n * @param key - Storage key\r\n * @returns Decrypted data or null if not found/invalid\r\n */\r\nexport const decryptAndRetrieve = (key: string): any => {\r\n    try {\r\n        const encrypted = localStorage.getItem(key);\r\n        if (!encrypted) return null;\r\n        \r\n        return decryptData(encrypted);\r\n    } catch (error) {\r\n        console.error('Failed to decrypt and retrieve data:', error);\r\n        return null;\r\n    }\r\n};\r\n"
        }
    ]
}