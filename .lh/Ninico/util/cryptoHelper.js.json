{
    "sourceFile": "Ninico/util/cryptoHelper.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753962742740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753962871525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,110 @@\n import CryptoJS from 'crypto-js';\r\n \r\n-// Get encryption key from environment variables\r\n+/**\r\n+ * Get encryption key from environment variables with debug logging\r\n+ */\r\n const getEncryptionKey = () => {\r\n     const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY;\r\n+    console.log('🔑 DEBUG: Checking encryption key...');\r\n+    console.log('🔑 Key exists:', !!key);\r\n+    console.log('🔑 Key length:', key?.length || 0);\r\n+    console.log('🔑 Key value:', key ? key.substring(0, 8) + '...' : 'UNDEFINED');\r\n     \r\n     if (!key) {\r\n-        throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n+        console.error('❌ NEXT_PUBLIC_ENCRYPTION_KEY is not defined');\r\n+        throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined');\r\n     }\r\n     return key;\r\n };\r\n \r\n /**\r\n- * Encrypts any data (object, string, number, etc.) and returns a cipher string\r\n- * @param {any} data - The data to encrypt\r\n- * @returns {string} Encrypted string\r\n+ * Encrypts data using the same method as backend\r\n  */\r\n export const encryptData = (data) => {\r\n     try {\r\n+        console.log('🔒 Frontend DEBUG: Starting encryption...');\r\n+        console.log('📝 Input data:', data);\r\n+        console.log('📝 Data type:', typeof data);\r\n+        \r\n         const key = getEncryptionKey();\r\n+        console.log('🔑 Using key for encryption (first 8 chars):', key.substring(0, 8) + '...');\r\n+        \r\n         const jsonString = JSON.stringify(data);\r\n+        console.log('📝 JSON string:', jsonString);\r\n+        console.log('📝 JSON string length:', jsonString.length);\r\n+        \r\n         const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n+        console.log('🔒 Encrypted result:', encrypted);\r\n+        console.log('🔒 Encrypted length:', encrypted.length);\r\n+        \r\n         return encrypted;\r\n     } catch (error) {\r\n+        console.error('❌ Frontend encryption error:', error);\r\n         throw new Error('Failed to encrypt data');\r\n     }\r\n };\r\n \r\n /**\r\n- * Decrypts a cipher string and returns the parsed object\r\n- * @param {string} cipherText - The encrypted string to decrypt\r\n- * @returns {any} Decrypted and parsed data\r\n+ * Decrypts data using the same method as backend\r\n  */\r\n export const decryptData = (cipherText) => {\r\n+    console.log('🔓 Frontend DEBUG: Starting decryption...');\r\n+    console.log('📝 Input cipher:', cipherText);\r\n+    console.log('📝 Cipher type:', typeof cipherText);\r\n+    console.log('📝 Cipher length:', cipherText?.length || 0);\r\n+    \r\n     try {\r\n         const key = getEncryptionKey();\r\n+        console.log('🔑 Using key for decryption (first 8 chars):', key.substring(0, 8) + '...');\r\n+        \r\n         const decryptedBytes = CryptoJS.AES.decrypt(cipherText, key);\r\n         const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n         \r\n+        console.log('🔓 Decrypted string:', decryptedString);\r\n+        console.log('🔓 Decrypted string length:', decryptedString.length);\r\n+        \r\n         if (!decryptedString) {\r\n+            console.error('❌ Failed to decrypt data - empty result');\r\n             throw new Error('Failed to decrypt data - invalid cipher or key');\r\n         }\r\n         \r\n-        return JSON.parse(decryptedString);\r\n+        const parsed = JSON.parse(decryptedString);\r\n+        console.log('✅ Successfully parsed JSON:', parsed);\r\n+        return parsed;\r\n     } catch (error) {\r\n-        throw new Error('Failed to decrypt data');\r\n+        console.error('❌ Frontend decryption error details:', {\r\n+            message: error.message,\r\n+            cipher: cipherText\r\n+        });\r\n+        throw new Error('Failed to decrypt data: ' + error.message);\r\n     }\r\n };\r\n \r\n-/**\r\n- * Utility function to encrypt sensitive form data before storing in localStorage\r\n- * @param {string} key - Storage key\r\n- * @param {any} data - Data to encrypt and store\r\n- */\r\n+// Keep the storage utility functions\r\n export const encryptAndStore = (key, data) => {\r\n     try {\r\n         const encrypted = encryptData(data);\r\n         localStorage.setItem(key, encrypted);\r\n+        console.log('💾 Data encrypted and stored at key:', key);\r\n     } catch (error) {\r\n-        console.error('Failed to encrypt and store data:', error);\r\n+        console.error('❌ Failed to encrypt and store data:', error);\r\n+        throw error;\r\n     }\r\n };\r\n \r\n-/**\r\n- * Utility function to decrypt and retrieve data from localStorage\r\n- * @param {string} key - Storage key\r\n- * @returns {any} Decrypted data or null if not found/invalid\r\n- */\r\n export const decryptAndRetrieve = (key) => {\r\n     try {\r\n         const encrypted = localStorage.getItem(key);\r\n-        if (!encrypted) return null;\r\n+        if (!encrypted) {\r\n+            console.log('⚠️ No data found for key:', key);\r\n+            return null;\r\n+        }\r\n         \r\n-        return decryptData(encrypted);\r\n+        const decrypted = decryptData(encrypted);\r\n+        console.log('🔓 Successfully retrieved and decrypted data for key:', key);\r\n+        return decrypted;\r\n     } catch (error) {\r\n-        console.error('Failed to decrypt and retrieve data:', error);\r\n+        console.error('❌ Failed to decrypt and retrieve data:', error);\r\n         return null;\r\n     }\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753963133092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,75 @@\n import CryptoJS from 'crypto-js';\r\n \r\n-/**\r\n- * Get encryption key from environment variables with debug logging\r\n- */\r\n const getEncryptionKey = () => {\r\n     const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY;\r\n-    console.log('🔑 DEBUG: Checking encryption key...');\r\n-    console.log('🔑 Key exists:', !!key);\r\n-    console.log('🔑 Key length:', key?.length || 0);\r\n-    console.log('🔑 Key value:', key ? key.substring(0, 8) + '...' : 'UNDEFINED');\r\n     \r\n     if (!key) {\r\n-        console.error('❌ NEXT_PUBLIC_ENCRYPTION_KEY is not defined');\r\n-        throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined');\r\n+        console.error('❌ Encryption key not found in environment variables');\r\n+        throw new Error('Encryption key not found in environment variables');\r\n     }\r\n+\r\n+    console.log('🔑 Key validation:', {\r\n+        exists: !!key,\r\n+        length: key.length,\r\n+        preview: key.substring(0, 4) + '...'\r\n+    });\r\n+\r\n     return key;\r\n };\r\n \r\n-/**\r\n- * Encrypts data using the same method as backend\r\n- */\r\n export const encryptData = (data) => {\r\n     try {\r\n-        console.log('🔒 Frontend DEBUG: Starting encryption...');\r\n-        console.log('📝 Input data:', data);\r\n-        console.log('📝 Data type:', typeof data);\r\n+        console.log('🔒 Starting encryption process');\r\n         \r\n         const key = getEncryptionKey();\r\n-        console.log('🔑 Using key for encryption (first 8 chars):', key.substring(0, 8) + '...');\r\n-        \r\n         const jsonString = JSON.stringify(data);\r\n-        console.log('📝 JSON string:', jsonString);\r\n-        console.log('📝 JSON string length:', jsonString.length);\r\n         \r\n         const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n-        console.log('🔒 Encrypted result:', encrypted);\r\n-        console.log('🔒 Encrypted length:', encrypted.length);\r\n         \r\n+        console.log('✅ Encryption successful:', {\r\n+            inputType: typeof data,\r\n+            jsonLength: jsonString.length,\r\n+            outputLength: encrypted.length\r\n+        });\r\n+        \r\n         return encrypted;\r\n     } catch (error) {\r\n-        console.error('❌ Frontend encryption error:', error);\r\n-        throw new Error('Failed to encrypt data');\r\n+        console.error('❌ Encryption failed:', error.message);\r\n+        throw new Error(`Encryption failed: ${error.message}`);\r\n     }\r\n };\r\n \r\n-/**\r\n- * Decrypts data using the same method as backend\r\n- */\r\n export const decryptData = (cipherText) => {\r\n-    console.log('🔓 Frontend DEBUG: Starting decryption...');\r\n-    console.log('📝 Input cipher:', cipherText);\r\n-    console.log('📝 Cipher type:', typeof cipherText);\r\n-    console.log('📝 Cipher length:', cipherText?.length || 0);\r\n-    \r\n     try {\r\n+        console.log('🔓 Starting decryption process');\r\n+\r\n+        if (!cipherText || typeof cipherText !== 'string') {\r\n+            throw new Error('Invalid cipher text format');\r\n+        }\r\n+\r\n         const key = getEncryptionKey();\r\n-        console.log('🔑 Using key for decryption (first 8 chars):', key.substring(0, 8) + '...');\r\n         \r\n-        const decryptedBytes = CryptoJS.AES.decrypt(cipherText, key);\r\n-        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n+        const bytes = CryptoJS.AES.decrypt(cipherText, key);\r\n+        const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n         \r\n-        console.log('🔓 Decrypted string:', decryptedString);\r\n-        console.log('🔓 Decrypted string length:', decryptedString.length);\r\n-        \r\n-        if (!decryptedString) {\r\n-            console.error('❌ Failed to decrypt data - empty result');\r\n-            throw new Error('Failed to decrypt data - invalid cipher or key');\r\n+        if (!decrypted) {\r\n+            throw new Error('Decryption produced empty result');\r\n         }\r\n+\r\n+        const parsed = JSON.parse(decrypted);\r\n         \r\n-        const parsed = JSON.parse(decryptedString);\r\n-        console.log('✅ Successfully parsed JSON:', parsed);\r\n+        console.log('✅ Decryption successful:', {\r\n+            inputLength: cipherText.length,\r\n+            outputType: typeof parsed,\r\n+            hasData: !!parsed\r\n+        });\r\n+\r\n         return parsed;\r\n     } catch (error) {\r\n-        console.error('❌ Frontend decryption error details:', {\r\n-            message: error.message,\r\n-            cipher: cipherText\r\n+        console.error('❌ Decryption failed:', {\r\n+            error: error.message,\r\n+            cipherPreview: cipherText?.substring(0, 32) + '...'\r\n         });\r\n-        throw new Error('Failed to decrypt data: ' + error.message);\r\n+        throw new Error(`Decryption failed: ${error.message}`);\r\n     }\r\n-};\r\n-\r\n-// Keep the storage utility functions\r\n-export const encryptAndStore = (key, data) => {\r\n-    try {\r\n-        const encrypted = encryptData(data);\r\n-        localStorage.setItem(key, encrypted);\r\n-        console.log('💾 Data encrypted and stored at key:', key);\r\n-    } catch (error) {\r\n-        console.error('❌ Failed to encrypt and store data:', error);\r\n-        throw error;\r\n-    }\r\n-};\r\n-\r\n-export const decryptAndRetrieve = (key) => {\r\n-    try {\r\n-        const encrypted = localStorage.getItem(key);\r\n-        if (!encrypted) {\r\n-            console.log('⚠️ No data found for key:', key);\r\n-            return null;\r\n-        }\r\n-        \r\n-        const decrypted = decryptData(encrypted);\r\n-        console.log('🔓 Successfully retrieved and decrypted data for key:', key);\r\n-        return decrypted;\r\n-    } catch (error) {\r\n-        console.error('❌ Failed to decrypt and retrieve data:', error);\r\n-        return null;\r\n-    }\r\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753962742740,
            "name": "Commit-0",
            "content": "import CryptoJS from 'crypto-js';\r\n\r\n// Get encryption key from environment variables\r\nconst getEncryptionKey = () => {\r\n    const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY;\r\n    \r\n    if (!key) {\r\n        throw new Error('NEXT_PUBLIC_ENCRYPTION_KEY is not defined in environment variables');\r\n    }\r\n    return key;\r\n};\r\n\r\n/**\r\n * Encrypts any data (object, string, number, etc.) and returns a cipher string\r\n * @param {any} data - The data to encrypt\r\n * @returns {string} Encrypted string\r\n */\r\nexport const encryptData = (data) => {\r\n    try {\r\n        const key = getEncryptionKey();\r\n        const jsonString = JSON.stringify(data);\r\n        const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n        return encrypted;\r\n    } catch (error) {\r\n        throw new Error('Failed to encrypt data');\r\n    }\r\n};\r\n\r\n/**\r\n * Decrypts a cipher string and returns the parsed object\r\n * @param {string} cipherText - The encrypted string to decrypt\r\n * @returns {any} Decrypted and parsed data\r\n */\r\nexport const decryptData = (cipherText) => {\r\n    try {\r\n        const key = getEncryptionKey();\r\n        const decryptedBytes = CryptoJS.AES.decrypt(cipherText, key);\r\n        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n        \r\n        if (!decryptedString) {\r\n            throw new Error('Failed to decrypt data - invalid cipher or key');\r\n        }\r\n        \r\n        return JSON.parse(decryptedString);\r\n    } catch (error) {\r\n        throw new Error('Failed to decrypt data');\r\n    }\r\n};\r\n\r\n/**\r\n * Utility function to encrypt sensitive form data before storing in localStorage\r\n * @param {string} key - Storage key\r\n * @param {any} data - Data to encrypt and store\r\n */\r\nexport const encryptAndStore = (key, data) => {\r\n    try {\r\n        const encrypted = encryptData(data);\r\n        localStorage.setItem(key, encrypted);\r\n    } catch (error) {\r\n        console.error('Failed to encrypt and store data:', error);\r\n    }\r\n};\r\n\r\n/**\r\n * Utility function to decrypt and retrieve data from localStorage\r\n * @param {string} key - Storage key\r\n * @returns {any} Decrypted data or null if not found/invalid\r\n */\r\nexport const decryptAndRetrieve = (key) => {\r\n    try {\r\n        const encrypted = localStorage.getItem(key);\r\n        if (!encrypted) return null;\r\n        \r\n        return decryptData(encrypted);\r\n    } catch (error) {\r\n        console.error('Failed to decrypt and retrieve data:', error);\r\n        return null;\r\n    }\r\n};\r\n"
        }
    ]
}