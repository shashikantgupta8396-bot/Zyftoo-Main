{
    "sourceFile": "Ninico/util/productPricingHelper.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753640078106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753640078106,
            "name": "Commit-0",
            "content": "/**\r\n * Client-side Product Pricing Utilities\r\n * Safe helpers for displaying prices in React components\r\n */\r\n\r\n/**\r\n * Get product price for display based on user context\r\n * @param {Object} product - Product object\r\n * @param {Object} user - User object\r\n * @param {number} quantity - Quantity (default: 1)\r\n * @returns {Object} Price information\r\n */\r\nexport const getDisplayPrice = (product, user = null, quantity = 1) => {\r\n  // Determine user type\r\n  const userType = user?.userType === 'Corporate' ? 'corporate' : 'individual';\r\n  \r\n  // Fallback for legacy products\r\n  if (!product.retailPrice && product.price) {\r\n    return {\r\n      price: product.price,\r\n      originalPrice: product.price,\r\n      discount: 0,\r\n      currency: 'INR',\r\n      showTier: false,\r\n      isLegacy: true\r\n    };\r\n  }\r\n\r\n  // Individual users or corporate pricing disabled\r\n  if (userType === 'individual' || !product.corporatePricing?.enabled) {\r\n    const retailPrice = product.retailPrice || {};\r\n    return {\r\n      price: retailPrice.sellingPrice || product.price || 0,\r\n      originalPrice: retailPrice.mrp || product.price || 0,\r\n      discount: retailPrice.discount || 0,\r\n      currency: retailPrice.currency || 'INR',\r\n      showTier: false,\r\n      isRetail: true\r\n    };\r\n  }\r\n\r\n  // Corporate pricing\r\n  if (userType === 'corporate' && product.corporatePricing?.enabled) {\r\n    const tiers = product.corporatePricing.priceTiers || [];\r\n    const activeTier = tiers.find(tier => \r\n      quantity >= tier.minQuantity && (!tier.maxQuantity || quantity <= tier.maxQuantity)\r\n    );\r\n\r\n    if (activeTier) {\r\n      return {\r\n        price: activeTier.pricePerUnit,\r\n        originalPrice: product.retailPrice?.mrp || activeTier.pricePerUnit,\r\n        discount: activeTier.discount || 0,\r\n        currency: 'INR',\r\n        showTier: true,\r\n        tierInfo: activeTier,\r\n        isCorporate: true\r\n      };\r\n    }\r\n  }\r\n\r\n  // Fallback to retail pricing\r\n  const retailPrice = product.retailPrice || {};\r\n  return {\r\n    price: retailPrice.sellingPrice || product.price || 0,\r\n    originalPrice: retailPrice.mrp || product.price || 0,\r\n    discount: retailPrice.discount || 0,\r\n    currency: retailPrice.currency || 'INR',\r\n    showTier: false,\r\n    isRetail: true\r\n  };\r\n};\r\n\r\n/**\r\n * Format price for display\r\n * @param {number} price \r\n * @param {string} currency \r\n * @returns {string}\r\n */\r\nexport const formatPrice = (price, currency = 'INR') => {\r\n  const numPrice = parseFloat(price) || 0;\r\n  \r\n  if (currency === 'INR') {\r\n    return `â‚¹${numPrice.toLocaleString('en-IN', { minimumFractionDigits: 0, maximumFractionDigits: 2 })}`;\r\n  }\r\n  \r\n  return `${currency} ${numPrice.toFixed(2)}`;\r\n};\r\n\r\n/**\r\n * Check if user should see corporate pricing\r\n * @param {Object} user \r\n * @param {Object} product \r\n * @returns {boolean}\r\n */\r\nexport const shouldShowCorporatePricing = (user, product) => {\r\n  return user?.userType === 'Corporate' && \r\n         product?.corporatePricing?.enabled &&\r\n         product?.corporatePricing?.priceTiers?.length > 0;\r\n};\r\n\r\n/**\r\n * Get minimum corporate order quantity\r\n * @param {Object} product \r\n * @returns {number}\r\n */\r\nexport const getMinimumCorporateQuantity = (product) => {\r\n  if (!product?.corporatePricing?.enabled) return 1;\r\n  \r\n  const minFromTiers = product.corporatePricing.priceTiers?.[0]?.minQuantity || 1;\r\n  const minFromSettings = product.corporatePricing.minimumOrderQuantity || 1;\r\n  \r\n  return Math.max(minFromTiers, minFromSettings);\r\n};\r\n\r\n/**\r\n * Check if quantity requires custom quote\r\n * @param {Object} product \r\n * @param {number} quantity \r\n * @returns {boolean}\r\n */\r\nexport const requiresCustomQuote = (product, quantity) => {\r\n  return product?.corporatePricing?.enabled && \r\n         product?.corporatePricing?.customQuoteThreshold &&\r\n         quantity >= product.corporatePricing.customQuoteThreshold;\r\n};\r\n"
        }
    ]
}