{
    "sourceFile": "Ninico/services/categorySectionService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753454690894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753454690894,
            "name": "Commit-0",
            "content": "/**\r\n * Category Section API Service\r\n * \r\n * Service for handling category section configuration API calls\r\n */\r\n\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\r\n\r\nclass CategorySectionService {\r\n  \r\n  /**\r\n   * Get category section configuration for admin panel\r\n   * @param {string} pageId - Page ID (e.g., 'home', 'corporate')\r\n   * @param {string} token - Admin auth token\r\n   * @returns {Promise<Object>} API response\r\n   */\r\n  async getCategorySectionConfig(pageId, token) {\r\n    try {\r\n      console.log(`üîÑ [CategorySectionService] Fetching config for page: ${pageId}`);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/admin/category-section/config/${pageId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error(`‚ùå [CategorySectionService] API Error:`, data);\r\n        throw new Error(data.message || `HTTP ${response.status}: Failed to fetch category section config`);\r\n      }\r\n\r\n      console.log(`‚úÖ [CategorySectionService] Successfully fetched config`);\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error(`‚ùå [CategorySectionService] Error in getCategorySectionConfig:`, error);\r\n      throw new Error(`Failed to fetch category section config: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update category section configuration\r\n   * @param {string} pageId - Page ID\r\n   * @param {Object} configData - Configuration data\r\n   * @param {string} token - Admin auth token\r\n   * @returns {Promise<Object>} API response\r\n   */\r\n  async updateCategorySectionConfig(pageId, configData, token) {\r\n    try {\r\n      console.log(`üîÑ [CategorySectionService] Updating config for page: ${pageId}`, configData);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/admin/category-section/config/${pageId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(configData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error(`‚ùå [CategorySectionService] Update Error:`, data);\r\n        throw new Error(data.message || `HTTP ${response.status}: Failed to update category section config`);\r\n      }\r\n\r\n      console.log(`‚úÖ [CategorySectionService] Successfully updated config`);\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error(`‚ùå [CategorySectionService] Error in updateCategorySectionConfig:`, error);\r\n      throw new Error(`Failed to update category section config: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all available categories for selection\r\n   * @param {string} token - Admin auth token\r\n   * @returns {Promise<Object>} API response\r\n   */\r\n  async getAvailableCategories(token) {\r\n    try {\r\n      console.log(`üîÑ [CategorySectionService] Fetching available categories`);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/admin/category-section/available-categories`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error(`‚ùå [CategorySectionService] Available Categories Error:`, data);\r\n        throw new Error(data.message || `HTTP ${response.status}: Failed to fetch available categories`);\r\n      }\r\n\r\n      console.log(`‚úÖ [CategorySectionService] Successfully fetched available categories`);\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error(`‚ùå [CategorySectionService] Error in getAvailableCategories:`, error);\r\n      throw new Error(`Failed to fetch available categories: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get categories for frontend display (public endpoint)\r\n   * @param {string} pageId - Page ID\r\n   * @returns {Promise<Object>} API response\r\n   */\r\n  async getCategoriesForDisplay(pageId) {\r\n    try {\r\n      console.log(`üîÑ [CategorySectionService] Fetching categories for display - Page: ${pageId}`);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/admin/category-section/display/${pageId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error(`‚ùå [CategorySectionService] Display Categories Error:`, data);\r\n        throw new Error(data.message || `HTTP ${response.status}: Failed to fetch categories for display`);\r\n      }\r\n\r\n      console.log(`‚úÖ [CategorySectionService] Successfully fetched categories for display`);\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error(`‚ùå [CategorySectionService] Error in getCategoriesForDisplay:`, error);\r\n      \r\n      // For display purposes, we can return a fallback response\r\n      console.log(`‚ö†Ô∏è [CategorySectionService] Returning fallback data for display`);\r\n      return {\r\n        success: false,\r\n        data: {\r\n          categories: [],\r\n          metadata: {\r\n            enabled: false,\r\n            message: `API Error: ${error.message}`,\r\n            source: 'fallback'\r\n          }\r\n        },\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CategorySectionService();\r\n"
        }
    ]
}