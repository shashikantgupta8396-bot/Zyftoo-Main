{
    "sourceFile": "backend/API_DOCUMENTATION.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831493451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831493451,
            "name": "Commit-0",
            "content": "# Ninico E-commerce API - Encrypted Communication Guide\r\n\r\n## 🚀 Overview\r\n\r\nThis API implements end-to-end encryption for secure communication between frontend and backend. All sensitive endpoints support AES-256 encryption with additional security features including JWT authentication, rate limiting, input validation, and CORS protection.\r\n\r\n## 🔒 Security Features\r\n\r\n- **AES-256 Encryption**: All request/response data encrypted\r\n- **JWT Authentication**: Secure token-based auth\r\n- **Rate Limiting**: Protection against DDoS and brute force\r\n- **Input Validation**: Joi-based schema validation\r\n- **CORS Protection**: Whitelist-based origin control\r\n- **Helmet Security**: Additional HTTP security headers\r\n\r\n## 🔑 Encryption Details\r\n\r\n### Encryption Secret\r\n```\r\nENCRYPTION_SECRET=aes256-encryption-secret-key-32-chars-long!\r\n```\r\n\r\n### Request Format (Encrypted Endpoints)\r\n```json\r\n{\r\n  \"body\": \"U2FsdGVkX19encrypted_data_here...\"\r\n}\r\n```\r\n\r\n### Response Format (Encrypted Endpoints)\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"body\": \"U2FsdGVkX19encrypted_response_here...\",\r\n  \"timestamp\": \"2025-01-18T10:30:00.000Z\"\r\n}\r\n```\r\n\r\n## 📋 API Endpoints\r\n\r\n### Authentication Endpoints\r\n\r\n#### POST `/api/v1/auth/register` (Encrypted)\r\nRegister a new user with encrypted payload.\r\n\r\n**Request Body (Encrypted):**\r\n```json\r\n{\r\n  \"name\": \"John Doe\",\r\n  \"email\": \"john@example.com\",\r\n  \"phone\": \"1234567890\",\r\n  \"password\": \"password123\",\r\n  \"confirmPassword\": \"password123\",\r\n  \"otp\": \"123456\",\r\n  \"userType\": \"individual\",\r\n  \"gender\": \"male\",\r\n  \"dob\": \"1990-01-01\",\r\n  \"pincode\": \"123456\"\r\n}\r\n```\r\n\r\n**Response (Encrypted):**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"User registered successfully\",\r\n  \"token\": \"jwt_token_here\",\r\n  \"user\": {\r\n    \"id\": \"user_id\",\r\n    \"name\": \"John Doe\",\r\n    \"email\": \"john@example.com\",\r\n    \"phone\": \"1234567890\",\r\n    \"userType\": \"individual\",\r\n    \"role\": \"user\",\r\n    \"isEmailVerified\": false\r\n  }\r\n}\r\n```\r\n\r\n#### POST `/api/v1/auth/login` (Encrypted)\r\nLogin user with encrypted credentials.\r\n\r\n**Request Body (Encrypted):**\r\n```json\r\n{\r\n  \"email\": \"john@example.com\",\r\n  \"password\": \"password123\"\r\n}\r\n```\r\n\r\n**Response (Encrypted):**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"message\": \"Login successful\",\r\n  \"token\": \"jwt_token_here\",\r\n  \"user\": {\r\n    \"id\": \"user_id\",\r\n    \"name\": \"John Doe\",\r\n    \"email\": \"john@example.com\",\r\n    \"phone\": \"1234567890\",\r\n    \"userType\": \"individual\",\r\n    \"role\": \"user\",\r\n    \"isEmailVerified\": true,\r\n    \"profileComplete\": true\r\n  }\r\n}\r\n```\r\n\r\n#### POST `/api/v1/auth/forgot-password` (Encrypted)\r\nRequest password reset with encrypted email.\r\n\r\n**Request Body (Encrypted):**\r\n```json\r\n{\r\n  \"email\": \"john@example.com\"\r\n}\r\n```\r\n\r\n#### POST `/api/v1/auth/reset-password/:token` (Encrypted)\r\nReset password with token and encrypted new password.\r\n\r\n**Request Body (Encrypted):**\r\n```json\r\n{\r\n  \"password\": \"newPassword123\"\r\n}\r\n```\r\n\r\n#### GET `/api/v1/auth/profile` (Protected, Encrypted Response)\r\nGet user profile with JWT token.\r\n\r\n**Headers:**\r\n```\r\nAuthorization: Bearer jwt_token_here\r\n```\r\n\r\n**Response (Encrypted):**\r\n```json\r\n{\r\n  \"success\": true,\r\n  \"user\": {\r\n    \"id\": \"user_id\",\r\n    \"name\": \"John Doe\",\r\n    \"email\": \"john@example.com\",\r\n    \"phone\": \"1234567890\",\r\n    \"userType\": \"individual\",\r\n    \"role\": \"user\",\r\n    \"gender\": \"male\",\r\n    \"dob\": \"1990-01-01\",\r\n    \"pincode\": \"123456\",\r\n    \"isEmailVerified\": true,\r\n    \"createdAt\": \"2025-01-18T10:00:00.000Z\",\r\n    \"lastLogin\": \"2025-01-18T10:30:00.000Z\"\r\n  }\r\n}\r\n```\r\n\r\n### Utility Endpoints\r\n\r\n#### GET `/health`\r\nHealth check endpoint (no encryption).\r\n\r\n#### GET `/api/v1/auth/verify-token` (Protected)\r\nVerify JWT token validity.\r\n\r\n#### POST `/api/v1/auth/refresh-token` (Protected)\r\nRefresh JWT token.\r\n\r\n#### POST `/api/v1/auth/logout` (Protected)\r\nLogout user (client-side token removal).\r\n\r\n## 🚦 Rate Limits\r\n\r\n| Endpoint Type | Limit | Window |\r\n|---------------|-------|--------|\r\n| General API | 100 requests | 15 minutes |\r\n| Authentication | 5 requests | 15 minutes |\r\n| Password Reset | 3 requests | 1 hour |\r\n| OTP Requests | 3 requests | 5 minutes |\r\n| File Upload | 20 requests | 15 minutes |\r\n| Operations | 50 requests | 10 minutes |\r\n\r\n## 🔍 Error Responses\r\n\r\n### Validation Error\r\n```json\r\n{\r\n  \"success\": false,\r\n  \"message\": \"Validation error\",\r\n  \"errors\": [\r\n    {\r\n      \"field\": \"email\",\r\n      \"message\": \"Please provide a valid email address\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Authentication Error\r\n```json\r\n{\r\n  \"success\": false,\r\n  \"message\": \"Not authorized, no token provided\"\r\n}\r\n```\r\n\r\n### Rate Limit Error\r\n```json\r\n{\r\n  \"success\": false,\r\n  \"message\": \"Too many requests from this IP, please try again later.\",\r\n  \"retryAfter\": \"15 minutes\"\r\n}\r\n```\r\n\r\n### Encryption Error\r\n```json\r\n{\r\n  \"success\": false,\r\n  \"message\": \"Failed to decrypt request data\"\r\n}\r\n```\r\n\r\n## 🛠️ Environment Variables\r\n\r\n```env\r\n# Server\r\nPORT=5000\r\nNODE_ENV=development\r\n\r\n# Database\r\nMONGO_URI=mongodb://localhost:27017/ninico\r\n\r\n# JWT\r\nJWT_SECRET=your-jwt-secret-key\r\nJWT_EXPIRE=7d\r\n\r\n# Encryption\r\nENCRYPTION_SECRET=aes256-encryption-secret-key-32-chars-long!\r\n\r\n# CORS\r\nCLIENT_ORIGIN=http://localhost:3000,http://localhost:3001\r\n\r\n# Email\r\nEMAIL_USER=your-email@gmail.com\r\nEMAIL_PASS=your-app-password\r\n```\r\n\r\n## 📝 Frontend Integration\r\n\r\n### Install Dependencies\r\n```bash\r\nnpm install crypto-js\r\n```\r\n\r\n### Encryption Utility\r\n```javascript\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst ENCRYPTION_SECRET = process.env.NEXT_PUBLIC_ENCRYPTION_SECRET;\r\n\r\nexport const encrypt = (data) => {\r\n  const stringData = typeof data === 'string' ? data : JSON.stringify(data);\r\n  return CryptoJS.AES.encrypt(stringData, ENCRYPTION_SECRET).toString();\r\n};\r\n\r\nexport const decrypt = (encryptedData) => {\r\n  const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_SECRET);\r\n  const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n  \r\n  try {\r\n    return JSON.parse(decryptedData);\r\n  } catch {\r\n    return decryptedData;\r\n  }\r\n};\r\n```\r\n\r\n### API Call Example\r\n```javascript\r\nconst loginUser = async (credentials) => {\r\n  const encryptedBody = encrypt(credentials);\r\n  \r\n  const response = await fetch('/api/v1/auth/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ body: encryptedBody })\r\n  });\r\n  \r\n  const data = await response.json();\r\n  \r\n  if (data.body) {\r\n    return decrypt(data.body);\r\n  }\r\n  \r\n  return data;\r\n};\r\n```\r\n\r\n## 🧪 Testing\r\n\r\n### Postman Setup\r\n1. Set environment variable: `ENCRYPTION_SECRET`\r\n2. Use pre-request script to encrypt body\r\n3. Use test script to decrypt response\r\n\r\n### cURL Example\r\n```bash\r\ncurl -X POST http://localhost:5000/api/v1/auth/login \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"body\":\"encrypted_data_here\"}'\r\n```\r\n\r\n## 🔄 Backward Compatibility\r\n\r\nLegacy endpoints remain available without encryption:\r\n- `/api/auth/login`\r\n- `/api/auth/signup`\r\n- `/api/auth/reset-password`\r\n\r\n## 🚨 Security Considerations\r\n\r\n1. **Secret Management**: Store encryption secrets securely\r\n2. **HTTPS**: Always use HTTPS in production\r\n3. **Token Storage**: Store JWT tokens securely (httpOnly cookies recommended)\r\n4. **Rate Limiting**: Monitor and adjust rate limits as needed\r\n5. **Logging**: Don't log sensitive encrypted data\r\n6. **Key Rotation**: Implement encryption key rotation strategy\r\n\r\n## 📞 Support\r\n\r\nFor implementation questions or issues, refer to the frontend integration guide or contact the development team.\r\n"
        }
    ]
}