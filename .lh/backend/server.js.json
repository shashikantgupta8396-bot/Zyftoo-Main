{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1752831493450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752836816082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,13 @@\n const express = require('express');\r\n const path = require('path');\r\n const dotenv = require('dotenv');\r\n-const helmet = require('helmet');\r\n-const cors = require('cors');\r\n const connectDB = require('./src/config/db');\r\n-const { getCorsOptions } = require('./src/config/corsOptions');\r\n-const { apiLimiter } = require('./src/middleware/rateLimiter');\r\n-const { cryptoMiddleware } = require('./src/middleware/cryptoMiddleware');\r\n-\r\n-// Import routes\r\n const authRoutes = require('./src/routes/authRoutes');\r\n-const enhancedAuthRoutes = require('./src/routes/enhancedAuthRoutes');\r\n const userRoutes = require('./src/routes/userRoutes');\r\n const otpRoutes = require('./src/routes/otpRoutes');\r\n+const cors = require('cors');\r\n+\r\n const productRoutes = require('./src/routes/productRoutes');\r\n const orderRoutes = require('./src/routes/orderRoutes');\r\n const wishlistRoutes = require('./src/routes/wishlistRoutes');\r\n const cartRoutes = require('./src/routes/cartRoutes');\r\n@@ -21,78 +15,32 @@\n const corporateRoutes = require('./src/routes/corporateRoutes');\r\n const trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\n const categoryRoutes = require('./src/routes/categoryRoutes');\r\n const uploadRoutes = require('./src/routes/uploadRoutes');\r\n+const testRoutes = require('./src/routes/testRoutes');\r\n \r\n-// Load environment variables\r\n+\r\n dotenv.config();\r\n-\r\n-// Initialize Express app\r\n const app = express();\r\n-\r\n-// Connect to database\r\n connectDB();\r\n-\r\n-// Security middleware\r\n-app.use(helmet({\r\n-  contentSecurityPolicy: {\r\n-    directives: {\r\n-      defaultSrc: [\"'self'\"],\r\n-      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n-      scriptSrc: [\"'self'\"],\r\n-      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n-    },\r\n-  },\r\n-  crossOriginEmbedderPolicy: false\r\n+app.use(cors({\r\n+  origin: ['http://localhost:3000', 'http://localhost:3001', 'http://127.0.0.1:3000', 'http://127.0.0.1:3001'], \r\n+  credentials: true\r\n }));\r\n \r\n-// CORS configuration\r\n-app.use(cors(getCorsOptions()));\r\n \r\n-// Rate limiting\r\n-app.use('/api/', apiLimiter);\r\n+app.use(express.json());\r\n \r\n-// Body parser middleware\r\n-app.use(express.json({ limit: '10mb' }));\r\n-app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n-\r\n-// Crypto middleware for encryption/decryption\r\n-app.use('/api/', cryptoMiddleware);\r\n-\r\n // Serve static files from public directory\r\n app.use(express.static(path.join(__dirname, 'public')));\r\n \r\n // Request logging middleware for debugging\r\n app.use((req, res, next) => {\r\n-  console.log(`${req.method} ${req.path} - Origin: ${req.get('Origin')} - ${new Date().toISOString()}`);\r\n+  console.log(`${req.method} ${req.path} - Origin: ${req.get('Origin')}`);\r\n   next();\r\n });\r\n \r\n-// Health check endpoint (no encryption required)\r\n-app.get('/health', (req, res) => {\r\n-  res.json({ \r\n-    status: 'OK', \r\n-    timestamp: new Date().toISOString(),\r\n-    environment: process.env.NODE_ENV || 'development'\r\n-  });\r\n-});\r\n \r\n-// API Routes with versioning (Enhanced with encryption)\r\n-// app.use('/api/v1/auth', enhancedAuthRoutes); // Temporarily disabled for debugging\r\n-app.use('/api/v1/user', userRoutes);\r\n-app.use('/api/v1/otp', otpRoutes);\r\n-app.use('/api/v1/users', userRoutes);\r\n-app.use('/api/v1/products', productRoutes);\r\n-app.use('/api/v1/orders', orderRoutes);\r\n-app.use('/api/v1/wishlist', wishlistRoutes);\r\n-app.use('/api/v1/cart', cartRoutes);\r\n-app.use('/api/v1/address', addressRoutes);\r\n-app.use('/api/v1/corporate', corporateRoutes);\r\n-app.use('/api/v1/track', trackOrderRoutes);\r\n-app.use('/api/v1/categories', categoryRoutes);\r\n-app.use('/api/v1/upload', uploadRoutes);\r\n-\r\n-// Legacy API routes (backward compatibility)\r\n app.use('/api/auth', authRoutes);\r\n app.use('/api/user', userRoutes);\r\n app.use('/api/otp', otpRoutes);\r\n app.use('/api/users', userRoutes);\r\n@@ -101,66 +49,27 @@\n app.use('/api/wishlist', wishlistRoutes);\r\n app.use('/api/cart', cartRoutes);\r\n app.use('/api/address', addressRoutes);\r\n app.use('/api/corporate', corporateRoutes);\r\n-app.use('/api/track', trackOrderRoutes);\r\n+app.use('/api', trackOrderRoutes);\r\n app.use('/api/categories', categoryRoutes);\r\n app.use('/api/upload', uploadRoutes);\r\n+app.use('/api/test', testRoutes);\r\n \r\n \r\n app.get('/', (req, res) => {\r\n-  res.json({ \r\n-    message: 'Ninico E-commerce API is running...',\r\n-    version: '1.0.0',\r\n-    timestamp: new Date().toISOString()\r\n-  });\r\n+  res.send('API is running...');\r\n });\r\n \r\n-// Test route for debugging (encrypted response)\r\n+// Test route for debugging\r\n app.get('/api/test', (req, res) => {\r\n-  res.json({ \r\n-    message: 'API test successful', \r\n-    timestamp: new Date().toISOString(),\r\n-    encrypted: true\r\n-  });\r\n+  res.json({ message: 'API test successful', timestamp: new Date().toISOString() });\r\n });\r\n \r\n-// Test encrypted endpoint\r\n-app.post('/api/test-encryption', (req, res) => {\r\n-  res.json({\r\n-    message: 'Encryption test successful',\r\n-    receivedData: req.decryptedBody,\r\n-    timestamp: new Date().toISOString()\r\n-  });\r\n-});\r\n+// Routes (added later)\r\n \r\n-// Global error handler\r\n-app.use((err, req, res, next) => {\r\n-  console.error('Global error handler:', err);\r\n-  \r\n-  // Don't expose error details in production\r\n-  const errorMessage = process.env.NODE_ENV === 'production' \r\n-    ? 'Something went wrong!' \r\n-    : err.message;\r\n \r\n-  res.status(err.status || 500).json({\r\n-    success: false,\r\n-    message: errorMessage,\r\n-    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\r\n-  });\r\n-});\r\n \r\n-// 404 handler\r\n-app.use('*', (req, res) => {\r\n-  res.status(404).json({\r\n-    success: false,\r\n-    message: `Route ${req.originalUrl} not found`\r\n-  });\r\n-});\r\n-\r\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => {\r\n-  console.log(`🚀 Server running on port ${PORT}`);\r\n-  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n-  console.log(`🔒 Encryption: Enabled`);\r\n-  console.log(`🛡️  Security: Rate limiting, CORS, Helmet enabled`);\r\n+  console.log(`Server running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1752837698969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,23 @@\n const testRoutes = require('./src/routes/testRoutes');\r\n \r\n \r\n dotenv.config();\r\n+\r\n+// Test crypto utility at startup\r\n+console.log('🧪 Testing crypto utility at startup...');\r\n+try {\r\n+  const { encryptData, decryptData } = require('./src/utils/cryptoUtil');\r\n+  const testData = { test: 'startup' };\r\n+  const encrypted = encryptData(testData);\r\n+  const decrypted = decryptData(encrypted);\r\n+  console.log('✅ Crypto utility working at startup');\r\n+  console.log('🔑 Environment key available:', !!process.env.ENCRYPTION_KEY);\r\n+  console.log('🔑 Environment key length:', process.env.ENCRYPTION_KEY?.length || 0);\r\n+} catch (startupError) {\r\n+  console.error('❌ Crypto utility failed at startup:', startupError.message);\r\n+}\r\n+\r\n const app = express();\r\n connectDB();\r\n app.use(cors({\r\n   origin: ['http://localhost:3000', 'http://localhost:3001', 'http://127.0.0.1:3000', 'http://127.0.0.1:3001'], \r\n@@ -34,9 +49,13 @@\n app.use(express.static(path.join(__dirname, 'public')));\r\n \r\n // Request logging middleware for debugging\r\n app.use((req, res, next) => {\r\n-  console.log(`${req.method} ${req.path} - Origin: ${req.get('Origin')}`);\r\n+  console.log(`🌐 REQUEST: ${req.method} ${req.path} - Origin: ${req.get('Origin')}`);\r\n+  console.log(`🌐 Body size:`, JSON.stringify(req.body).length);\r\n+  if (req.path.includes('/auth/')) {\r\n+    console.log('🔐 AUTH REQUEST DETECTED:', req.body);\r\n+  }\r\n   next();\r\n });\r\n \r\n \r\n"
                },
                {
                    "date": 1752860259285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \r\n // Request logging middleware for debugging\r\n app.use((req, res, next) => {\r\n   console.log(`🌐 REQUEST: ${req.method} ${req.path} - Origin: ${req.get('Origin')}`);\r\n-  console.log(`🌐 Body size:`, JSON.stringify(req.body).length);\r\n+  console.log(`🌐 Body size:`, req.body ? JSON.stringify(req.body).length : 0);\r\n   if (req.path.includes('/auth/')) {\r\n     console.log('🔐 AUTH REQUEST DETECTED:', req.body);\r\n   }\r\n   next();\r\n"
                },
                {
                    "date": 1753110070265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n const trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\n const categoryRoutes = require('./src/routes/categoryRoutes');\r\n const uploadRoutes = require('./src/routes/uploadRoutes');\r\n const testRoutes = require('./src/routes/testRoutes');\r\n+const pageRoutes = require('./src/routes/pageRoutes');\r\n \r\n \r\n dotenv.config();\r\n \r\n@@ -72,8 +73,9 @@\n app.use('/api', trackOrderRoutes);\r\n app.use('/api/categories', categoryRoutes);\r\n app.use('/api/upload', uploadRoutes);\r\n app.use('/api/test', testRoutes);\r\n+app.use('/api', pageRoutes);\r\n \r\n \r\n app.get('/', (req, res) => {\r\n   res.send('API is running...');\r\n"
                },
                {
                    "date": 1753116436703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n const addressRoutes = require('./src/routes/addressRoutes');\r\n const corporateRoutes = require('./src/routes/corporateRoutes');\r\n const trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\n const categoryRoutes = require('./src/routes/categoryRoutes');\r\n+const subcategoryRoutes = require('./src/routes/subcategoryRoutes');\r\n const uploadRoutes = require('./src/routes/uploadRoutes');\r\n const testRoutes = require('./src/routes/testRoutes');\r\n const pageRoutes = require('./src/routes/pageRoutes');\r\n \r\n@@ -71,8 +72,9 @@\n app.use('/api/address', addressRoutes);\r\n app.use('/api/corporate', corporateRoutes);\r\n app.use('/api', trackOrderRoutes);\r\n app.use('/api/categories', categoryRoutes);\r\n+app.use('/api/subcategories', subcategoryRoutes);\r\n app.use('/api/upload', uploadRoutes);\r\n app.use('/api/test', testRoutes);\r\n app.use('/api', pageRoutes);\r\n \r\n"
                },
                {
                    "date": 1753440030152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,12 @@\n const uploadRoutes = require('./src/routes/uploadRoutes');\r\n const testRoutes = require('./src/routes/testRoutes');\r\n const pageRoutes = require('./src/routes/pageRoutes');\r\n \r\n+// Import new admin module\r\n+const Admin = require('./src/admin');\r\n \r\n+\r\n dotenv.config();\r\n \r\n // Test crypto utility at startup\r\n console.log('🧪 Testing crypto utility at startup...');\r\n@@ -77,9 +80,16 @@\n app.use('/api/upload', uploadRoutes);\r\n app.use('/api/test', testRoutes);\r\n app.use('/api', pageRoutes);\r\n \r\n+// Initialize new admin module\r\n+Admin.initializeAdmin(app);\r\n+console.log('🔧 New admin module initialized');\r\n \r\n+// Legacy admin routes (if still needed)\r\n+// app.use('/api/admin', require('./src/routes/admin/adminRoutes'));\r\n+\r\n+\r\n app.get('/', (req, res) => {\r\n   res.send('API is running...');\r\n });\r\n \r\n"
                },
                {
                    "date": 1753615500747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+const express = require('express');\r\n+const path = require('path');\r\n+const dotenv = require('dotenv');\r\n+const connectDB = require('./src/config/db');\r\n+const authRoutes = require('./src/routes/authRoutes');\r\n+const userRoutes = require('./src/routes/userRoutes');\r\n+const otpRoutes = require('./src/routes/otpRoutes');\r\n+const cors = require('cors');\r\n+\r\n+const productRoutes = require('./src/routes/productRoutes');\r\n+const orderRoutes = require('./src/routes/orderRoutes');\r\n+const wishlistRoutes = require('./src/routes/wishlistRoutes');\r\n+const cartRoutes = require('./src/routes/cartRoutes');\r\n+const addressRoutes = require('./src/routes/addressRoutes');\r\n+const corporateRoutes = require('./src/routes/corporateRoutes');\r\n+const trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\n+const categoryRoutes = require('./src/routes/categoryRoutes');\r\n+const subcategoryRoutes = require('./src/routes/subcategoryRoutes');\r\n+const uploadRoutes = require('./src/routes/uploadRoutes');\r\n+const testRoutes = require('./src/routes/testRoutes');\r\n+const pageRoutes = require('./src/routes/pageRoutes');\r\n+\r\n+// Import new admin module\r\n+const Admin = require('./src/admin');\r\n+\r\n+\r\n+dotenv.config();\r\n+\r\n+// Test crypto utility at startup\r\n+console.log('🧪 Testing crypto utility at startup...');\r\n+try {\r\n+  const { encryptData, decryptData } = require('./src/utils/cryptoUtil');\r\n+  const testData = { test: 'startup' };\r\n+  const encrypted = encryptData(testData);\r\n+  const decrypted = decryptData(encrypted);\r\n+  console.log('✅ Crypto utility working at startup');\r\n+  console.log('🔑 Environment key available:', !!process.env.ENCRYPTION_KEY);\r\n+  console.log('🔑 Environment key length:', process.env.ENCRYPTION_KEY?.length || 0);\r\n+} catch (startupError) {\r\n+  console.error('❌ Crypto utility failed at startup:', startupError.message);\r\n+}\r\n+\r\n+const app = express();\r\n+connectDB();\r\n+app.use(cors({\r\n+  origin: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:3002', 'http://127.0.0.1:3000', 'http://127.0.0.1:3001', 'http://127.0.0.1:3002'], \r\n+  credentials: true\r\n+}));\r\n+\r\n+\r\n+app.use(express.json());\r\n+\r\n+// Serve static files from public directory\r\n+app.use(express.static(path.join(__dirname, 'public')));\r\n+\r\n+// Request logging middleware for debugging\r\n+app.use((req, res, next) => {\r\n+  console.log(`🌐 REQUEST: ${req.method} ${req.path} - Origin: ${req.get('Origin')}`);\r\n+  console.log(`🌐 Body size:`, req.body ? JSON.stringify(req.body).length : 0);\r\n+  if (req.path.includes('/auth/')) {\r\n+    console.log('🔐 AUTH REQUEST DETECTED:', req.body);\r\n+  }\r\n+  next();\r\n+});\r\n+\r\n+\r\n+app.use('/api/auth', authRoutes);\r\n+app.use('/api/user', userRoutes);\r\n+app.use('/api/otp', otpRoutes);\r\n+app.use('/api/users', userRoutes);\r\n+app.use('/api/products', productRoutes);\r\n+app.use('/api/orders', orderRoutes);\r\n+app.use('/api/wishlist', wishlistRoutes);\r\n+app.use('/api/cart', cartRoutes);\r\n+app.use('/api/address', addressRoutes);\r\n+app.use('/api/corporate', corporateRoutes);\r\n+app.use('/api', trackOrderRoutes);\r\n+app.use('/api/categories', categoryRoutes);\r\n+app.use('/api/subcategories', subcategoryRoutes);\r\n+app.use('/api/upload', uploadRoutes);\r\n+app.use('/api/test', testRoutes);\r\n+app.use('/api', pageRoutes);\r\n+\r\n+// Initialize new admin module\r\n+Admin.initializeAdmin(app);\r\n+console.log('🔧 New admin module initialized');\r\n+\r\n+// Legacy admin routes (if still needed)\r\n+// app.use('/api/admin', require('./src/routes/admin/adminRoutes'));\r\n+\r\n+\r\n+app.get('/', (req, res) => {\r\n+  res.send('API is running...');\r\n+});\r\n+\r\n+// Test route for debugging\r\n+app.get('/api/test', (req, res) => {\r\n+  res.json({ message: 'API test successful', timestamp: new Date().toISOString() });\r\n+});\r\n+\r\n+// Routes (added later)\r\n+\r\n+\r\n+\r\n+const PORT = process.env.PORT || 5000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1753711237053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n const subcategoryRoutes = require('./src/routes/subcategoryRoutes');\r\n const uploadRoutes = require('./src/routes/uploadRoutes');\r\n const testRoutes = require('./src/routes/testRoutes');\r\n const pageRoutes = require('./src/routes/pageRoutes');\r\n+const analyticsRoutes = require('./src/routes/analytics');\r\n \r\n // Import new admin module\r\n const Admin = require('./src/admin');\r\n \r\n@@ -79,8 +80,9 @@\n app.use('/api/subcategories', subcategoryRoutes);\r\n app.use('/api/upload', uploadRoutes);\r\n app.use('/api/test', testRoutes);\r\n app.use('/api', pageRoutes);\r\n+app.use('/api/analytics', analyticsRoutes);\r\n \r\n // Initialize new admin module\r\n Admin.initializeAdmin(app);\r\n console.log('🔧 New admin module initialized');\r\n@@ -105,112 +107,4 @@\n const PORT = process.env.PORT || 5000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server running on port ${PORT}`);\r\n });\r\n-const express = require('express');\r\n-const path = require('path');\r\n-const dotenv = require('dotenv');\r\n-const connectDB = require('./src/config/db');\r\n-const authRoutes = require('./src/routes/authRoutes');\r\n-const userRoutes = require('./src/routes/userRoutes');\r\n-const otpRoutes = require('./src/routes/otpRoutes');\r\n-const cors = require('cors');\r\n-\r\n-const productRoutes = require('./src/routes/productRoutes');\r\n-const orderRoutes = require('./src/routes/orderRoutes');\r\n-const wishlistRoutes = require('./src/routes/wishlistRoutes');\r\n-const cartRoutes = require('./src/routes/cartRoutes');\r\n-const addressRoutes = require('./src/routes/addressRoutes');\r\n-const corporateRoutes = require('./src/routes/corporateRoutes');\r\n-const trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\n-const categoryRoutes = require('./src/routes/categoryRoutes');\r\n-const subcategoryRoutes = require('./src/routes/subcategoryRoutes');\r\n-const uploadRoutes = require('./src/routes/uploadRoutes');\r\n-const testRoutes = require('./src/routes/testRoutes');\r\n-const pageRoutes = require('./src/routes/pageRoutes');\r\n-\r\n-// Import new admin module\r\n-const Admin = require('./src/admin');\r\n-\r\n-\r\n-dotenv.config();\r\n-\r\n-// Test crypto utility at startup\r\n-console.log('🧪 Testing crypto utility at startup...');\r\n-try {\r\n-  const { encryptData, decryptData } = require('./src/utils/cryptoUtil');\r\n-  const testData = { test: 'startup' };\r\n-  const encrypted = encryptData(testData);\r\n-  const decrypted = decryptData(encrypted);\r\n-  console.log('✅ Crypto utility working at startup');\r\n-  console.log('🔑 Environment key available:', !!process.env.ENCRYPTION_KEY);\r\n-  console.log('🔑 Environment key length:', process.env.ENCRYPTION_KEY?.length || 0);\r\n-} catch (startupError) {\r\n-  console.error('❌ Crypto utility failed at startup:', startupError.message);\r\n-}\r\n-\r\n-const app = express();\r\n-connectDB();\r\n-app.use(cors({\r\n-  origin: ['http://localhost:3000', 'http://localhost:3001', 'http://127.0.0.1:3000', 'http://127.0.0.1:3001'], \r\n-  credentials: true\r\n-}));\r\n-\r\n-\r\n-app.use(express.json());\r\n-\r\n-// Serve static files from public directory\r\n-app.use(express.static(path.join(__dirname, 'public')));\r\n-\r\n-// Request logging middleware for debugging\r\n-app.use((req, res, next) => {\r\n-  console.log(`🌐 REQUEST: ${req.method} ${req.path} - Origin: ${req.get('Origin')}`);\r\n-  console.log(`🌐 Body size:`, req.body ? JSON.stringify(req.body).length : 0);\r\n-  if (req.path.includes('/auth/')) {\r\n-    console.log('🔐 AUTH REQUEST DETECTED:', req.body);\r\n-  }\r\n-  next();\r\n-});\r\n-\r\n-\r\n-app.use('/api/auth', authRoutes);\r\n-app.use('/api/user', userRoutes);\r\n-app.use('/api/otp', otpRoutes);\r\n-app.use('/api/users', userRoutes);\r\n-app.use('/api/products', productRoutes);\r\n-app.use('/api/orders', orderRoutes);\r\n-app.use('/api/wishlist', wishlistRoutes);\r\n-app.use('/api/cart', cartRoutes);\r\n-app.use('/api/address', addressRoutes);\r\n-app.use('/api/corporate', corporateRoutes);\r\n-app.use('/api', trackOrderRoutes);\r\n-app.use('/api/categories', categoryRoutes);\r\n-app.use('/api/subcategories', subcategoryRoutes);\r\n-app.use('/api/upload', uploadRoutes);\r\n-app.use('/api/test', testRoutes);\r\n-app.use('/api', pageRoutes);\r\n-\r\n-// Initialize new admin module\r\n-Admin.initializeAdmin(app);\r\n-console.log('🔧 New admin module initialized');\r\n-\r\n-// Legacy admin routes (if still needed)\r\n-// app.use('/api/admin', require('./src/routes/admin/adminRoutes'));\r\n-\r\n-\r\n-app.get('/', (req, res) => {\r\n-  res.send('API is running...');\r\n-});\r\n-\r\n-// Test route for debugging\r\n-app.get('/api/test', (req, res) => {\r\n-  res.json({ message: 'API test successful', timestamp: new Date().toISOString() });\r\n-});\r\n-\r\n-// Routes (added later)\r\n-\r\n-\r\n-\r\n-const PORT = process.env.PORT || 5000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server running on port ${PORT}`);\r\n-});\r\n"
                },
                {
                    "date": 1753729761020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,10 +86,11 @@\n // Initialize new admin module\r\n Admin.initializeAdmin(app);\r\n console.log('🔧 New admin module initialized');\r\n \r\n-// Legacy admin routes (if still needed)\r\n-// app.use('/api/admin', require('./src/routes/admin/adminRoutes'));\r\n+// Admin routes\r\n+app.use('/api/admin', require('./src/routes/admin/adminRoutes'));\r\n+console.log('🔧 Admin routes registered at /api/admin');\r\n \r\n \r\n app.get('/', (req, res) => {\r\n   res.send('API is running...');\r\n"
                }
            ],
            "date": 1752831493450,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst path = require('path');\r\nconst dotenv = require('dotenv');\r\nconst helmet = require('helmet');\r\nconst cors = require('cors');\r\nconst connectDB = require('./src/config/db');\r\nconst { getCorsOptions } = require('./src/config/corsOptions');\r\nconst { apiLimiter } = require('./src/middleware/rateLimiter');\r\nconst { cryptoMiddleware } = require('./src/middleware/cryptoMiddleware');\r\n\r\n// Import routes\r\nconst authRoutes = require('./src/routes/authRoutes');\r\nconst enhancedAuthRoutes = require('./src/routes/enhancedAuthRoutes');\r\nconst userRoutes = require('./src/routes/userRoutes');\r\nconst otpRoutes = require('./src/routes/otpRoutes');\r\nconst productRoutes = require('./src/routes/productRoutes');\r\nconst orderRoutes = require('./src/routes/orderRoutes');\r\nconst wishlistRoutes = require('./src/routes/wishlistRoutes');\r\nconst cartRoutes = require('./src/routes/cartRoutes');\r\nconst addressRoutes = require('./src/routes/addressRoutes');\r\nconst corporateRoutes = require('./src/routes/corporateRoutes');\r\nconst trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\nconst categoryRoutes = require('./src/routes/categoryRoutes');\r\nconst uploadRoutes = require('./src/routes/uploadRoutes');\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Initialize Express app\r\nconst app = express();\r\n\r\n// Connect to database\r\nconnectDB();\r\n\r\n// Security middleware\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n      scriptSrc: [\"'self'\"],\r\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n    },\r\n  },\r\n  crossOriginEmbedderPolicy: false\r\n}));\r\n\r\n// CORS configuration\r\napp.use(cors(getCorsOptions()));\r\n\r\n// Rate limiting\r\napp.use('/api/', apiLimiter);\r\n\r\n// Body parser middleware\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// Crypto middleware for encryption/decryption\r\napp.use('/api/', cryptoMiddleware);\r\n\r\n// Serve static files from public directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Request logging middleware for debugging\r\napp.use((req, res, next) => {\r\n  console.log(`${req.method} ${req.path} - Origin: ${req.get('Origin')} - ${new Date().toISOString()}`);\r\n  next();\r\n});\r\n\r\n// Health check endpoint (no encryption required)\r\napp.get('/health', (req, res) => {\r\n  res.json({ \r\n    status: 'OK', \r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV || 'development'\r\n  });\r\n});\r\n\r\n// API Routes with versioning (Enhanced with encryption)\r\n// app.use('/api/v1/auth', enhancedAuthRoutes); // Temporarily disabled for debugging\r\napp.use('/api/v1/user', userRoutes);\r\napp.use('/api/v1/otp', otpRoutes);\r\napp.use('/api/v1/users', userRoutes);\r\napp.use('/api/v1/products', productRoutes);\r\napp.use('/api/v1/orders', orderRoutes);\r\napp.use('/api/v1/wishlist', wishlistRoutes);\r\napp.use('/api/v1/cart', cartRoutes);\r\napp.use('/api/v1/address', addressRoutes);\r\napp.use('/api/v1/corporate', corporateRoutes);\r\napp.use('/api/v1/track', trackOrderRoutes);\r\napp.use('/api/v1/categories', categoryRoutes);\r\napp.use('/api/v1/upload', uploadRoutes);\r\n\r\n// Legacy API routes (backward compatibility)\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/user', userRoutes);\r\napp.use('/api/otp', otpRoutes);\r\napp.use('/api/users', userRoutes);\r\napp.use('/api/products', productRoutes);\r\napp.use('/api/orders', orderRoutes);\r\napp.use('/api/wishlist', wishlistRoutes);\r\napp.use('/api/cart', cartRoutes);\r\napp.use('/api/address', addressRoutes);\r\napp.use('/api/corporate', corporateRoutes);\r\napp.use('/api/track', trackOrderRoutes);\r\napp.use('/api/categories', categoryRoutes);\r\napp.use('/api/upload', uploadRoutes);\r\n\r\n\r\napp.get('/', (req, res) => {\r\n  res.json({ \r\n    message: 'Ninico E-commerce API is running...',\r\n    version: '1.0.0',\r\n    timestamp: new Date().toISOString()\r\n  });\r\n});\r\n\r\n// Test route for debugging (encrypted response)\r\napp.get('/api/test', (req, res) => {\r\n  res.json({ \r\n    message: 'API test successful', \r\n    timestamp: new Date().toISOString(),\r\n    encrypted: true\r\n  });\r\n});\r\n\r\n// Test encrypted endpoint\r\napp.post('/api/test-encryption', (req, res) => {\r\n  res.json({\r\n    message: 'Encryption test successful',\r\n    receivedData: req.decryptedBody,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n});\r\n\r\n// Global error handler\r\napp.use((err, req, res, next) => {\r\n  console.error('Global error handler:', err);\r\n  \r\n  // Don't expose error details in production\r\n  const errorMessage = process.env.NODE_ENV === 'production' \r\n    ? 'Something went wrong!' \r\n    : err.message;\r\n\r\n  res.status(err.status || 500).json({\r\n    success: false,\r\n    message: errorMessage,\r\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\r\n  });\r\n});\r\n\r\n// 404 handler\r\napp.use('*', (req, res) => {\r\n  res.status(404).json({\r\n    success: false,\r\n    message: `Route ${req.originalUrl} not found`\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Server running on port ${PORT}`);\r\n  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n  console.log(`🔒 Encryption: Enabled`);\r\n  console.log(`🛡️  Security: Rate limiting, CORS, Helmet enabled`);\r\n});\r\n"
        }
    ]
}