{
    "sourceFile": "backend/server-debug.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831493452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831493452,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst path = require('path');\r\nconst dotenv = require('dotenv');\r\nconst cors = require('cors');\r\n\r\n// Load environment variables first\r\ndotenv.config();\r\n\r\n// Initialize Express app\r\nconst app = express();\r\n\r\n// Basic middleware setup\r\napp.use(cors({\r\n  origin: ['http://localhost:3000', 'http://localhost:3001', 'http://127.0.0.1:3000', 'http://127.0.0.1:3001'], \r\n  credentials: true\r\n}));\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Serve static files from public directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Request logging middleware for debugging\r\napp.use((req, res, next) => {\r\n  console.log(`${req.method} ${req.path} - Origin: ${req.get('Origin')} - ${new Date().toISOString()}`);\r\n  next();\r\n});\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.json({ \r\n    status: 'OK', \r\n    timestamp: new Date().toISOString(),\r\n    environment: process.env.NODE_ENV || 'development'\r\n  });\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n  res.json({ \r\n    message: 'Ninico E-commerce API is running...',\r\n    version: '1.0.0',\r\n    timestamp: new Date().toISOString()\r\n  });\r\n});\r\n\r\n// Test route\r\napp.get('/api/test', (req, res) => {\r\n  res.json({ \r\n    message: 'API test successful', \r\n    timestamp: new Date().toISOString()\r\n  });\r\n});\r\n\r\nconsole.log('Setting up database connection...');\r\n// Connect to database\r\ntry {\r\n  const connectDB = require('./src/config/db');\r\n  connectDB();\r\n  console.log('✅ Database connection setup complete');\r\n} catch (error) {\r\n  console.error('❌ Database connection error:', error.message);\r\n}\r\n\r\n// Import and setup routes one by one with error handling\r\nconsole.log('Setting up routes...');\r\n\r\n// Auth Routes\r\ntry {\r\n  const authRoutes = require('./src/routes/authRoutes');\r\n  app.use('/api/auth', authRoutes);\r\n  console.log('✅ Auth routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Auth routes error:', error.message);\r\n}\r\n\r\n// User Routes\r\ntry {\r\n  const userRoutes = require('./src/routes/userRoutes');\r\n  app.use('/api/user', userRoutes);\r\n  app.use('/api/users', userRoutes);\r\n  console.log('✅ User routes loaded');\r\n} catch (error) {\r\n  console.error('❌ User routes error:', error.message);\r\n}\r\n\r\n// OTP Routes\r\ntry {\r\n  const otpRoutes = require('./src/routes/otpRoutes');\r\n  app.use('/api/otp', otpRoutes);\r\n  console.log('✅ OTP routes loaded');\r\n} catch (error) {\r\n  console.error('❌ OTP routes error:', error.message);\r\n}\r\n\r\n// Product Routes\r\ntry {\r\n  const productRoutes = require('./src/routes/productRoutes');\r\n  app.use('/api/products', productRoutes);\r\n  console.log('✅ Product routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Product routes error:', error.message);\r\n}\r\n\r\n// Category Routes\r\ntry {\r\n  const categoryRoutes = require('./src/routes/categoryRoutes');\r\n  app.use('/api/categories', categoryRoutes);\r\n  console.log('✅ Category routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Category routes error:', error.message);\r\n}\r\n\r\n// Order Routes\r\ntry {\r\n  const orderRoutes = require('./src/routes/orderRoutes');\r\n  app.use('/api/orders', orderRoutes);\r\n  console.log('✅ Order routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Order routes error:', error.message);\r\n}\r\n\r\n// Cart Routes\r\ntry {\r\n  const cartRoutes = require('./src/routes/cartRoutes');\r\n  app.use('/api/cart', cartRoutes);\r\n  console.log('✅ Cart routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Cart routes error:', error.message);\r\n}\r\n\r\n// Wishlist Routes\r\ntry {\r\n  const wishlistRoutes = require('./src/routes/wishlistRoutes');\r\n  app.use('/api/wishlist', wishlistRoutes);\r\n  console.log('✅ Wishlist routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Wishlist routes error:', error.message);\r\n}\r\n\r\n// Address Routes\r\ntry {\r\n  const addressRoutes = require('./src/routes/addressRoutes');\r\n  app.use('/api/address', addressRoutes);\r\n  console.log('✅ Address routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Address routes error:', error.message);\r\n}\r\n\r\n// Corporate Routes\r\ntry {\r\n  const corporateRoutes = require('./src/routes/corporateRoutes');\r\n  app.use('/api/corporate', corporateRoutes);\r\n  console.log('✅ Corporate routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Corporate routes error:', error.message);\r\n}\r\n\r\n// Track Order Routes\r\ntry {\r\n  const trackOrderRoutes = require('./src/routes/trackOrderRoutes');\r\n  app.use('/api/track', trackOrderRoutes);\r\n  console.log('✅ Track order routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Track order routes error:', error.message);\r\n}\r\n\r\n// Upload Routes\r\ntry {\r\n  const uploadRoutes = require('./src/routes/uploadRoutes');\r\n  app.use('/api/upload', uploadRoutes);\r\n  console.log('✅ Upload routes loaded');\r\n} catch (error) {\r\n  console.error('❌ Upload routes error:', error.message);\r\n}\r\n\r\n// Global error handler\r\napp.use((err, req, res, next) => {\r\n  console.error('Global error handler:', err);\r\n  res.status(err.status || 500).json({\r\n    success: false,\r\n    message: process.env.NODE_ENV === 'production' ? 'Something went wrong!' : err.message,\r\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\r\n  });\r\n});\r\n\r\n// 404 handler\r\napp.use('*', (req, res) => {\r\n  res.status(404).json({\r\n    success: false,\r\n    message: `Route ${req.originalUrl} not found`\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`🚀 Server running on port ${PORT}`);\r\n  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n  console.log('📋 Routes setup complete');\r\n});\r\n"
        }
    ]
}