{
    "sourceFile": "backend/src/routes/analytics.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753711237032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753711237032,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\nconst {\r\n  trackProductView,\r\n  getProductAnalytics,\r\n  getPopularProducts,\r\n  resetProductAnalytics\r\n} = require('../controllers/analyticsController');\r\n\r\n// Middleware imports (adjust paths as needed)\r\nconst { protect, adminAccess } = require('../middleware/authMiddleware'); // For authenticated requests\r\n\r\n/**\r\n * @route   POST /api/analytics/products/:productId/view\r\n * @desc    Track a product view (public endpoint)\r\n * @access  Public\r\n */\r\nrouter.post('/products/:productId/view', trackProductView);\r\n\r\n/**\r\n * @route   GET /api/analytics/products/:productId\r\n * @desc    Get analytics for a specific product\r\n * @access  Private (Admin only)\r\n */\r\nrouter.get('/products/:productId', protect, adminAccess, getProductAnalytics);\r\n\r\n/**\r\n * @route   GET /api/analytics/products/popular\r\n * @desc    Get popular products based on analytics\r\n * @access  Public\r\n */\r\nrouter.get('/products/popular', getPopularProducts);\r\n\r\n/**\r\n * @route   POST /api/analytics/products/:productId/reset\r\n * @desc    Reset analytics for a product (admin only)\r\n * @access  Private (Admin only)\r\n */\r\nrouter.post('/products/:productId/reset', protect, adminAccess, resetProductAnalytics);\r\n\r\n/**\r\n * @route   GET /api/analytics/dashboard\r\n * @desc    Get analytics dashboard data (admin only)\r\n * @access  Private (Admin only)\r\n */\r\nrouter.get('/dashboard', protect, adminAccess, async (req, res) => {\r\n  try {\r\n    const Product = require('../models/Product');\r\n    \r\n    // Get overall statistics\r\n    const totalProducts = await Product.countDocuments();\r\n    const productsWithAnalytics = await Product.countDocuments({\r\n      'analytics.views.total': { $gt: 0 }\r\n    });\r\n    \r\n    // Get top performing products\r\n    const topProducts = await Product.find({\r\n      'analytics.views.total': { $gt: 0 }\r\n    })\r\n      .select('name analytics')\r\n      .sort({ 'analytics.popularityScore': -1 })\r\n      .limit(5)\r\n      .lean();\r\n\r\n    // Get view distribution\r\n    const viewStats = await Product.aggregate([\r\n      {\r\n        $match: { 'analytics.views.total': { $gt: 0 } }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: null,\r\n          totalViews: { $sum: '$analytics.views.total' },\r\n          totalIndividualViews: { $sum: '$analytics.views.individual' },\r\n          totalCorporateViews: { $sum: '$analytics.views.corporate' },\r\n          avgViewsPerProduct: { $avg: '$analytics.views.total' }\r\n        }\r\n      }\r\n    ]);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        overview: {\r\n          totalProducts,\r\n          productsWithAnalytics,\r\n          viewedProductsPercentage: totalProducts > 0 ? \r\n            ((productsWithAnalytics / totalProducts) * 100).toFixed(2) : 0\r\n        },\r\n        topProducts,\r\n        viewStats: viewStats[0] || {\r\n          totalViews: 0,\r\n          totalIndividualViews: 0,\r\n          totalCorporateViews: 0,\r\n          avgViewsPerProduct: 0\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching analytics dashboard:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Failed to fetch analytics dashboard',\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}