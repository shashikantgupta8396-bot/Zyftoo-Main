{
    "sourceFile": "backend/src/routes/pageRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1753110070242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753113503368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,181 @@\n const express = require('express');\r\n const router = express.Router();\r\n+const PageConfig = require('../models/PageConfig');\r\n+const Category = require('../models/Category');\r\n \r\n-// Mock data for demonstration - replace with actual database queries\r\n-const mockSectionConfig = {\r\n-  home: {\r\n-    giftCategories: {\r\n-      visible: true,\r\n-      order: 1,\r\n-      label: \"Gift Categories\",\r\n-      categories: [\r\n-        { id: 'cat1', name: 'Fashion & Clothing', enabled: true, image: '/assets/img/product/category/cat-1.jpg' },\r\n-        { id: 'cat2', name: 'Electronics', enabled: true, image: '/assets/img/product/category/cat-2.jpg' },\r\n-        { id: 'cat3', name: 'Home & Living', enabled: false, image: '/assets/img/product/category/cat-3.jpg' },\r\n-        { id: 'cat4', name: 'Health & Beauty', enabled: true, image: '/assets/img/product/category/cat-4.jpg' },\r\n-        { id: 'cat5', name: 'Sports & Outdoor', enabled: false, image: '/assets/img/product/category/cat-5.jpg' },\r\n-        { id: 'cat6', name: 'Books & Media', enabled: true, image: '/assets/img/product/category/cat-6.jpg' },\r\n+// Initialize default page configuration if not exists\r\n+const initializePageConfig = async (pageId) => {\r\n+  let pageConfig = await PageConfig.findById(pageId);\r\n+  \r\n+  if (!pageConfig) {\r\n+    // Create default configuration for home page\r\n+    const defaultConfig = {\r\n+      _id: pageId,\r\n+      name: pageId === 'home' ? 'Home Page' : 'Corporate Page',\r\n+      slug: pageId === 'home' ? '/' : '/corporate',\r\n+      sections: [\r\n+        {\r\n+          sectionType: 'categorySection',\r\n+          enabled: true,\r\n+          order: 1,\r\n+          config: {\r\n+            maxCategories: 6,\r\n+            layout: 'grid',\r\n+            showSubcategories: true,\r\n+            categories: [] // Will be populated from actual categories\r\n+          }\r\n+        },\r\n+        {\r\n+          sectionType: 'sliderSection',\r\n+          enabled: true,\r\n+          order: 2,\r\n+          config: {\r\n+            autoplay: true,\r\n+            duration: 5000,\r\n+            slides: []\r\n+          }\r\n+        },\r\n+        {\r\n+          sectionType: 'productSection',\r\n+          enabled: true,\r\n+          order: 3,\r\n+          config: {\r\n+            title: 'Featured Products',\r\n+            maxProducts: 8,\r\n+            category: null\r\n+          }\r\n+        }\r\n       ]\r\n-    }\r\n+    };\r\n+    \r\n+    pageConfig = new PageConfig(defaultConfig);\r\n+    await pageConfig.save();\r\n   }\r\n+  \r\n+  return pageConfig;\r\n };\r\n \r\n // Get page section configuration\r\n-router.get('/pages/:pageKey/sections/:sectionKey', (req, res) => {\r\n+router.get('/pages/:pageKey/sections/:sectionKey', async (req, res) => {\r\n   try {\r\n     const { pageKey, sectionKey } = req.params;\r\n     \r\n-    const sectionConfig = mockSectionConfig[pageKey]?.[sectionKey];\r\n+    const pageConfig = await initializePageConfig(pageKey);\r\n+    const section = pageConfig.sections.find(s => s.sectionType === `${sectionKey}Section`);\r\n     \r\n-    if (!sectionConfig) {\r\n+    if (!section) {\r\n       return res.status(404).json({ \r\n         error: 'Section not found',\r\n         page: pageKey,\r\n         section: sectionKey \r\n       });\r\n     }\r\n \r\n-    res.json(sectionConfig);\r\n+    // For category section, also fetch actual categories\r\n+    if (sectionKey === 'giftCategories' || sectionKey === 'category') {\r\n+      const categories = await Category.find({ status: true }).lean();\r\n+      section.config.availableCategories = categories;\r\n+    }\r\n+\r\n+    res.json(section);\r\n   } catch (error) {\r\n     console.error('Error fetching section config:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n // Update page section configuration\r\n-router.put('/pages/:pageKey/sections/:sectionKey', (req, res) => {\r\n+router.put('/pages/:pageKey/sections/:sectionKey', async (req, res) => {\r\n   try {\r\n     const { pageKey, sectionKey } = req.params;\r\n     const updateData = req.body;\r\n     \r\n-    if (!mockSectionConfig[pageKey]) {\r\n-      mockSectionConfig[pageKey] = {};\r\n+    let pageConfig = await PageConfig.findById(pageKey);\r\n+    if (!pageConfig) {\r\n+      pageConfig = await initializePageConfig(pageKey);\r\n     }\r\n     \r\n+    // Find and update the specific section\r\n+    const sectionIndex = pageConfig.sections.findIndex(s => s.sectionType === `${sectionKey}Section`);\r\n+    \r\n+    if (sectionIndex === -1) {\r\n+      return res.status(404).json({ error: 'Section not found' });\r\n+    }\r\n+    \r\n     // Update the section configuration\r\n-    mockSectionConfig[pageKey][sectionKey] = {\r\n-      ...mockSectionConfig[pageKey][sectionKey],\r\n-      ...updateData\r\n+    pageConfig.sections[sectionIndex] = {\r\n+      ...pageConfig.sections[sectionIndex].toObject(),\r\n+      ...updateData,\r\n+      sectionType: `${sectionKey}Section` // Ensure sectionType doesn't change\r\n     };\r\n \r\n+    await pageConfig.save();\r\n+\r\n     console.log(`Updated ${pageKey}.${sectionKey}:`, updateData);\r\n     \r\n     res.json({ \r\n       success: true, \r\n       message: 'Section updated successfully',\r\n-      data: mockSectionConfig[pageKey][sectionKey]\r\n+      data: pageConfig.sections[sectionIndex]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error updating section config:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Get categories (filtered by enabled status)\r\n-router.get('/categories', (req, res) => {\r\n+// Get all categories for the category section\r\n+router.get('/categories', async (req, res) => {\r\n   try {\r\n-    // Get categories from the gift categories section\r\n-    const giftCategoriesSection = mockSectionConfig.home?.giftCategories;\r\n+    const categories = await Category.find({ status: true })\r\n+      .select('name image parent')\r\n+      .lean();\r\n     \r\n-    if (!giftCategoriesSection || !giftCategoriesSection.categories) {\r\n-      return res.json([]);\r\n-    }\r\n+    // Transform to match frontend expectations\r\n+    const transformedCategories = categories.map(cat => ({\r\n+      id: cat._id,\r\n+      name: cat.name,\r\n+      icon: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n+      image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n+      enabled: true, // All fetched categories are enabled by default\r\n+      subcategories: [] // TODO: Populate subcategories if needed\r\n+    }));\r\n     \r\n-    // Return all categories (frontend will filter enabled ones)\r\n-    res.json(giftCategoriesSection.categories);\r\n+    res.json(transformedCategories);\r\n   } catch (error) {\r\n     console.error('Error fetching categories:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Get complete page configuration\r\n+router.get('/pages/:pageKey', async (req, res) => {\r\n+  try {\r\n+    const { pageKey } = req.params;\r\n+    const pageConfig = await initializePageConfig(pageKey);\r\n+    \r\n+    // For each category section, populate with actual categories\r\n+    for (let section of pageConfig.sections) {\r\n+      if (section.sectionType === 'categorySection') {\r\n+        const categories = await Category.find({ status: true }).lean();\r\n+        section.config.availableCategories = categories;\r\n+        \r\n+        // If no categories are configured, use all available categories\r\n+        if (!section.config.categories || section.config.categories.length === 0) {\r\n+          section.config.categories = categories.map(cat => ({\r\n+            categoryId: cat._id,\r\n+            enabled: true,\r\n+            order: 0\r\n+          }));\r\n+        }\r\n+      }\r\n+    }\r\n+    \r\n+    res.json(pageConfig);\r\n+  } catch (error) {\r\n+    console.error('Error fetching page config:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753126463794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,181 +1,17 @@\n const express = require('express');\r\n const router = express.Router();\r\n-const PageConfig = require('../models/PageConfig');\r\n-const Category = require('../models/Category');\r\n+const pageController = require('../controllers/pageController');\r\n \r\n-// Initialize default page configuration if not exists\r\n-const initializePageConfig = async (pageId) => {\r\n-  let pageConfig = await PageConfig.findById(pageId);\r\n-  \r\n-  if (!pageConfig) {\r\n-    // Create default configuration for home page\r\n-    const defaultConfig = {\r\n-      _id: pageId,\r\n-      name: pageId === 'home' ? 'Home Page' : 'Corporate Page',\r\n-      slug: pageId === 'home' ? '/' : '/corporate',\r\n-      sections: [\r\n-        {\r\n-          sectionType: 'categorySection',\r\n-          enabled: true,\r\n-          order: 1,\r\n-          config: {\r\n-            maxCategories: 6,\r\n-            layout: 'grid',\r\n-            showSubcategories: true,\r\n-            categories: [] // Will be populated from actual categories\r\n-          }\r\n-        },\r\n-        {\r\n-          sectionType: 'sliderSection',\r\n-          enabled: true,\r\n-          order: 2,\r\n-          config: {\r\n-            autoplay: true,\r\n-            duration: 5000,\r\n-            slides: []\r\n-          }\r\n-        },\r\n-        {\r\n-          sectionType: 'productSection',\r\n-          enabled: true,\r\n-          order: 3,\r\n-          config: {\r\n-            title: 'Featured Products',\r\n-            maxProducts: 8,\r\n-            category: null\r\n-          }\r\n-        }\r\n-      ]\r\n-    };\r\n-    \r\n-    pageConfig = new PageConfig(defaultConfig);\r\n-    await pageConfig.save();\r\n-  }\r\n-  \r\n-  return pageConfig;\r\n-};\r\n+// Page configuration routes\r\n+router.get('/pages/:pageKey', pageController.getPageConfig);\r\n+router.put('/pages/:pageKey', pageController.updatePageConfig);\r\n \r\n-// Get page section configuration\r\n-router.get('/pages/:pageKey/sections/:sectionKey', async (req, res) => {\r\n-  try {\r\n-    const { pageKey, sectionKey } = req.params;\r\n-    \r\n-    const pageConfig = await initializePageConfig(pageKey);\r\n-    const section = pageConfig.sections.find(s => s.sectionType === `${sectionKey}Section`);\r\n-    \r\n-    if (!section) {\r\n-      return res.status(404).json({ \r\n-        error: 'Section not found',\r\n-        page: pageKey,\r\n-        section: sectionKey \r\n-      });\r\n-    }\r\n+// Section configuration routes\r\n+router.get('/pages/:pageKey/sections/:sectionKey', pageController.getSectionConfig);\r\n+router.put('/pages/:pageKey/sections/:sectionKey', pageController.updateSectionConfig);\r\n \r\n-    // For category section, also fetch actual categories\r\n-    if (sectionKey === 'giftCategories' || sectionKey === 'category') {\r\n-      const categories = await Category.find({ status: true }).lean();\r\n-      section.config.availableCategories = categories;\r\n-    }\r\n+// Category routes for admin and frontend\r\n+router.get('/categories', pageController.getAllCategories);\r\n+router.get('/pages/:pageKey/categories', pageController.getCategoriesForDisplay);\r\n \r\n-    res.json(section);\r\n-  } catch (error) {\r\n-    console.error('Error fetching section config:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Update page section configuration\r\n-router.put('/pages/:pageKey/sections/:sectionKey', async (req, res) => {\r\n-  try {\r\n-    const { pageKey, sectionKey } = req.params;\r\n-    const updateData = req.body;\r\n-    \r\n-    let pageConfig = await PageConfig.findById(pageKey);\r\n-    if (!pageConfig) {\r\n-      pageConfig = await initializePageConfig(pageKey);\r\n-    }\r\n-    \r\n-    // Find and update the specific section\r\n-    const sectionIndex = pageConfig.sections.findIndex(s => s.sectionType === `${sectionKey}Section`);\r\n-    \r\n-    if (sectionIndex === -1) {\r\n-      return res.status(404).json({ error: 'Section not found' });\r\n-    }\r\n-    \r\n-    // Update the section configuration\r\n-    pageConfig.sections[sectionIndex] = {\r\n-      ...pageConfig.sections[sectionIndex].toObject(),\r\n-      ...updateData,\r\n-      sectionType: `${sectionKey}Section` // Ensure sectionType doesn't change\r\n-    };\r\n-\r\n-    await pageConfig.save();\r\n-\r\n-    console.log(`Updated ${pageKey}.${sectionKey}:`, updateData);\r\n-    \r\n-    res.json({ \r\n-      success: true, \r\n-      message: 'Section updated successfully',\r\n-      data: pageConfig.sections[sectionIndex]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating section config:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Get all categories for the category section\r\n-router.get('/categories', async (req, res) => {\r\n-  try {\r\n-    const categories = await Category.find({ status: true })\r\n-      .select('name image parent')\r\n-      .lean();\r\n-    \r\n-    // Transform to match frontend expectations\r\n-    const transformedCategories = categories.map(cat => ({\r\n-      id: cat._id,\r\n-      name: cat.name,\r\n-      icon: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n-      image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n-      enabled: true, // All fetched categories are enabled by default\r\n-      subcategories: [] // TODO: Populate subcategories if needed\r\n-    }));\r\n-    \r\n-    res.json(transformedCategories);\r\n-  } catch (error) {\r\n-    console.error('Error fetching categories:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Get complete page configuration\r\n-router.get('/pages/:pageKey', async (req, res) => {\r\n-  try {\r\n-    const { pageKey } = req.params;\r\n-    const pageConfig = await initializePageConfig(pageKey);\r\n-    \r\n-    // For each category section, populate with actual categories\r\n-    for (let section of pageConfig.sections) {\r\n-      if (section.sectionType === 'categorySection') {\r\n-        const categories = await Category.find({ status: true }).lean();\r\n-        section.config.availableCategories = categories;\r\n-        \r\n-        // If no categories are configured, use all available categories\r\n-        if (!section.config.categories || section.config.categories.length === 0) {\r\n-          section.config.categories = categories.map(cat => ({\r\n-            categoryId: cat._id,\r\n-            enabled: true,\r\n-            order: 0\r\n-          }));\r\n-        }\r\n-      }\r\n-    }\r\n-    \r\n-    res.json(pageConfig);\r\n-  } catch (error) {\r\n-    console.error('Error fetching page config:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753162069683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,25 @@\n const express = require('express');\r\n const router = express.Router();\r\n const pageController = require('../controllers/pageController');\r\n+const { protect, authorizeRoles } = require('../middleware/authMiddleware');\r\n \r\n+// Public routes\r\n+router.get('/pages/home/categories', pageController.getHomePageCategories);\r\n+router.get('/pages/:pageId/refresh/:sectionType', pageController.refreshPageSection);\r\n+\r\n // Page configuration routes\r\n router.get('/pages/:pageKey', pageController.getPageConfig);\r\n-router.put('/pages/:pageKey', pageController.updatePageConfig);\r\n+router.put('/pages/:pageKey', protect, authorizeRoles('admin'), pageController.updatePageConfig);\r\n \r\n // Section configuration routes\r\n router.get('/pages/:pageKey/sections/:sectionKey', pageController.getSectionConfig);\r\n-router.put('/pages/:pageKey/sections/:sectionKey', pageController.updateSectionConfig);\r\n+router.put('/pages/:pageKey/sections/:sectionKey', protect, authorizeRoles('admin'), pageController.updateSectionConfig);\r\n \r\n+// Category section specific routes\r\n+router.put('/pages/home/sections/category', protect, authorizeRoles('admin'), pageController.updateCategorySection);\r\n+\r\n // Category routes for admin and frontend\r\n-router.get('/categories', pageController.getAllCategories);\r\n+router.get('/admin/categories', pageController.getAllCategories);\r\n router.get('/pages/:pageKey/categories', pageController.getCategoriesForDisplay);\r\n \r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753210570060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,17 @@\n const router = express.Router();\r\n const pageController = require('../controllers/pageController');\r\n const { protect, authorizeRoles } = require('../middleware/authMiddleware');\r\n \r\n-// Public routes\r\n+// Enhanced category routes for dynamic display\r\n router.get('/pages/home/categories', pageController.getHomePageCategories);\r\n+router.get('/pages/:pageId/categories', pageController.getPageCategories);\r\n+router.get('/categories/fallback', pageController.getAllCategoriesAsFallback);\r\n+\r\n+// Backward compatibility routes\r\n+router.get('/api/pages/home/categories', pageController.getHomePageCategories);\r\n+\r\n+// Page refresh routes\r\n router.get('/pages/:pageId/refresh/:sectionType', pageController.refreshPageSection);\r\n \r\n // Page configuration routes\r\n router.get('/pages/:pageKey', pageController.getPageConfig);\r\n@@ -14,12 +21,8 @@\n // Section configuration routes\r\n router.get('/pages/:pageKey/sections/:sectionKey', pageController.getSectionConfig);\r\n router.put('/pages/:pageKey/sections/:sectionKey', protect, authorizeRoles('admin'), pageController.updateSectionConfig);\r\n \r\n-// Category section specific routes\r\n-router.put('/pages/home/sections/category', protect, authorizeRoles('admin'), pageController.updateCategorySection);\r\n+// Category section specific routes (for PagesManagement admin)\r\n+router.put('/pages/home/sections/category', protect, authorizeRoles('admin'), pageController.updateSectionConfig);\r\n \r\n-// Category routes for admin and frontend\r\n-router.get('/admin/categories', pageController.getAllCategories);\r\n-router.get('/pages/:pageKey/categories', pageController.getCategoriesForDisplay);\r\n-\r\n module.exports = router;\r\n"
                },
                {
                    "date": 1753240251880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,12 @@\n \r\n // Page refresh routes\r\n router.get('/pages/:pageId/refresh/:sectionType', pageController.refreshPageSection);\r\n \r\n+// NEW: Static file management routes\r\n+router.post('/pages/:pageId/save-config', protect, authorizeRoles('admin'), pageController.savePageConfiguration);\r\n+router.post('/pages/:pageId/refresh-static', protect, authorizeRoles('admin'), pageController.refreshStaticFile);\r\n+\r\n // Page configuration routes\r\n router.get('/pages/:pageKey', pageController.getPageConfig);\r\n router.put('/pages/:pageKey', protect, authorizeRoles('admin'), pageController.updatePageConfig);\r\n \r\n"
                }
            ],
            "date": 1753110070242,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Mock data for demonstration - replace with actual database queries\r\nconst mockSectionConfig = {\r\n  home: {\r\n    giftCategories: {\r\n      visible: true,\r\n      order: 1,\r\n      label: \"Gift Categories\",\r\n      categories: [\r\n        { id: 'cat1', name: 'Fashion & Clothing', enabled: true, image: '/assets/img/product/category/cat-1.jpg' },\r\n        { id: 'cat2', name: 'Electronics', enabled: true, image: '/assets/img/product/category/cat-2.jpg' },\r\n        { id: 'cat3', name: 'Home & Living', enabled: false, image: '/assets/img/product/category/cat-3.jpg' },\r\n        { id: 'cat4', name: 'Health & Beauty', enabled: true, image: '/assets/img/product/category/cat-4.jpg' },\r\n        { id: 'cat5', name: 'Sports & Outdoor', enabled: false, image: '/assets/img/product/category/cat-5.jpg' },\r\n        { id: 'cat6', name: 'Books & Media', enabled: true, image: '/assets/img/product/category/cat-6.jpg' },\r\n      ]\r\n    }\r\n  }\r\n};\r\n\r\n// Get page section configuration\r\nrouter.get('/pages/:pageKey/sections/:sectionKey', (req, res) => {\r\n  try {\r\n    const { pageKey, sectionKey } = req.params;\r\n    \r\n    const sectionConfig = mockSectionConfig[pageKey]?.[sectionKey];\r\n    \r\n    if (!sectionConfig) {\r\n      return res.status(404).json({ \r\n        error: 'Section not found',\r\n        page: pageKey,\r\n        section: sectionKey \r\n      });\r\n    }\r\n\r\n    res.json(sectionConfig);\r\n  } catch (error) {\r\n    console.error('Error fetching section config:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Update page section configuration\r\nrouter.put('/pages/:pageKey/sections/:sectionKey', (req, res) => {\r\n  try {\r\n    const { pageKey, sectionKey } = req.params;\r\n    const updateData = req.body;\r\n    \r\n    if (!mockSectionConfig[pageKey]) {\r\n      mockSectionConfig[pageKey] = {};\r\n    }\r\n    \r\n    // Update the section configuration\r\n    mockSectionConfig[pageKey][sectionKey] = {\r\n      ...mockSectionConfig[pageKey][sectionKey],\r\n      ...updateData\r\n    };\r\n\r\n    console.log(`Updated ${pageKey}.${sectionKey}:`, updateData);\r\n    \r\n    res.json({ \r\n      success: true, \r\n      message: 'Section updated successfully',\r\n      data: mockSectionConfig[pageKey][sectionKey]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating section config:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Get categories (filtered by enabled status)\r\nrouter.get('/categories', (req, res) => {\r\n  try {\r\n    // Get categories from the gift categories section\r\n    const giftCategoriesSection = mockSectionConfig.home?.giftCategories;\r\n    \r\n    if (!giftCategoriesSection || !giftCategoriesSection.categories) {\r\n      return res.json([]);\r\n    }\r\n    \r\n    // Return all categories (frontend will filter enabled ones)\r\n    res.json(giftCategoriesSection.categories);\r\n  } catch (error) {\r\n    console.error('Error fetching categories:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}