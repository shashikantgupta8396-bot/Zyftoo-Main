{
    "sourceFile": "backend/src/routes/enhancedAuthRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831493451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831493451,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst router = express.Router();\r\n\r\n// Import controllers\r\nconst {\r\n  signupUser,\r\n  loginUser,\r\n  verifyEmail,\r\n  forgotPassword,\r\n  resetPassword,\r\n  getUserProfile\r\n} = require('../controllers/enhancedAuthController');\r\n\r\n// Import legacy controller for backward compatibility\r\nconst {\r\n  checkUser\r\n} = require('../controllers/authController');\r\n\r\n// Import middleware\r\nconst { authMiddleware, optionalAuth } = require('../middleware/authMiddleware');\r\nconst { authLimiter, passwordResetLimiter } = require('../middleware/rateLimiter');\r\nconst { requireEncryption, optionalEncryption } = require('../middleware/cryptoMiddleware');\r\nconst { validate, authSchemas } = require('../utils/validation');\r\n\r\n// ✅ ENHANCED ROUTES WITH ENCRYPTION, VALIDATION & RATE LIMITING\r\n\r\n/**\r\n * @route   POST /api/v1/auth/register\r\n * @desc    Register new user (encrypted)\r\n * @access  Public\r\n */\r\nrouter.post('/register', \r\n  authLimiter,\r\n  requireEncryption,\r\n  validate(authSchemas.register),\r\n  signupUser\r\n);\r\n\r\n/**\r\n * @route   POST /api/v1/auth/login\r\n * @desc    Login user (encrypted)\r\n * @access  Public\r\n */\r\nrouter.post('/login', \r\n  authLimiter,\r\n  requireEncryption,\r\n  validate(authSchemas.login),\r\n  loginUser\r\n);\r\n\r\n/**\r\n * @route   POST /api/v1/auth/forgot-password\r\n * @desc    Request password reset (encrypted)\r\n * @access  Public\r\n */\r\nrouter.post('/forgot-password', \r\n  passwordResetLimiter,\r\n  requireEncryption,\r\n  validate(authSchemas.forgotPassword),\r\n  forgotPassword\r\n);\r\n\r\n/**\r\n * @route   POST /api/v1/auth/reset-password/:token\r\n * @desc    Reset password with token (encrypted)\r\n * @access  Public\r\n */\r\nrouter.post('/reset-password/:token', \r\n  passwordResetLimiter,\r\n  requireEncryption,\r\n  validate(authSchemas.resetPassword),\r\n  resetPassword\r\n);\r\n\r\n/**\r\n * @route   GET /api/v1/auth/verify-email/:token\r\n * @desc    Verify email address\r\n * @access  Public\r\n */\r\nrouter.get('/verify-email/:token', verifyEmail);\r\n\r\n/**\r\n * @route   GET /api/v1/auth/profile\r\n * @desc    Get user profile (encrypted response)\r\n * @access  Private\r\n */\r\nrouter.get('/profile', authMiddleware, getUserProfile);\r\n\r\n/**\r\n * @route   GET /api/v1/auth/check-user/:phone\r\n * @desc    Check if user exists (legacy support)\r\n * @access  Public\r\n */\r\nrouter.get('/check-user/:phone', checkUser);\r\n\r\n// ✅ BACKWARD COMPATIBILITY ROUTES (legacy endpoints)\r\n\r\n/**\r\n * Legacy routes for existing frontend compatibility\r\n * These can handle both encrypted and non-encrypted requests\r\n */\r\n\r\nrouter.post('/signup', \r\n  authLimiter,\r\n  optionalEncryption,\r\n  signupUser\r\n);\r\n\r\nrouter.post('/login', \r\n  authLimiter,\r\n  optionalEncryption,\r\n  loginUser\r\n);\r\n\r\nrouter.post('/reset-password', \r\n  passwordResetLimiter,\r\n  optionalEncryption,\r\n  resetPassword\r\n);\r\n\r\nrouter.get('/verify-email/:token', verifyEmail);\r\n\r\n// ✅ ADDITIONAL UTILITY ROUTES\r\n\r\n/**\r\n * @route   GET /api/v1/auth/verify-token\r\n * @desc    Verify if JWT token is valid\r\n * @access  Private\r\n */\r\nrouter.get('/verify-token', authMiddleware, (req, res) => {\r\n  res.json({\r\n    success: true,\r\n    message: 'Token is valid',\r\n    user: {\r\n      id: req.user._id,\r\n      name: req.user.name,\r\n      email: req.user.email,\r\n      role: req.user.role\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * @route   POST /api/v1/auth/refresh-token\r\n * @desc    Refresh JWT token\r\n * @access  Private\r\n */\r\nrouter.post('/refresh-token', authMiddleware, (req, res) => {\r\n  const { generateToken } = require('../middleware/authMiddleware');\r\n  const newToken = generateToken(req.user._id);\r\n  \r\n  res.json({\r\n    success: true,\r\n    message: 'Token refreshed successfully',\r\n    token: newToken\r\n  });\r\n});\r\n\r\n/**\r\n * @route   POST /api/v1/auth/logout\r\n * @desc    Logout user (client-side token removal)\r\n * @access  Private\r\n */\r\nrouter.post('/logout', authMiddleware, (req, res) => {\r\n  res.json({\r\n    success: true,\r\n    message: 'Logged out successfully'\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"
        }
    ]
}