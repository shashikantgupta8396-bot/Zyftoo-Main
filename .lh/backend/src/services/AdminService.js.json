{
    "sourceFile": "backend/src/services/AdminService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753609071378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753609071378,
            "name": "Commit-0",
            "content": "const User = require('../models/User');\r\nconst Category = require('../models/Category');\r\nconst Product = require('../models/Product');\r\nconst Order = require('../models/Order');\r\n\r\n/**\r\n * Centralized Admin Service\r\n * Handles all administrative operations with proper authorization\r\n */\r\nclass AdminService {\r\n  \r\n  /**\r\n   * User Management Operations\r\n   */\r\n  async getAllUsers(filters = {}) {\r\n    console.log('üîÑ [AdminService] Fetching all users with filters:', filters);\r\n    \r\n    const query = {};\r\n    if (filters.userType) query.userType = filters.userType;\r\n    if (filters.role) query.role = filters.role;\r\n    if (filters.isEmailVerified !== undefined) query.isEmailVerified = filters.isEmailVerified;\r\n    \r\n    const users = await User.find(query).select('-password');\r\n    \r\n    console.log('‚úÖ [AdminService] Users fetched:', users.length);\r\n    return users;\r\n  }\r\n\r\n  async createAdminUser(userData) {\r\n    console.log('üîÑ [AdminService] Creating admin user');\r\n    \r\n    // Admin-specific validation\r\n    if (!userData.email || !userData.email.endsWith('@zyftoo.com')) {\r\n      throw new Error('Only @zyftoo.com emails allowed for admin roles');\r\n    }\r\n    \r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ \r\n      $or: [{ email: userData.email }, { phone: userData.phone }]\r\n    });\r\n    \r\n    if (existingUser) {\r\n      throw new Error('User already exists');\r\n    }\r\n    \r\n    const bcrypt = require('bcrypt');\r\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\r\n    \r\n    const adminUser = new User({\r\n      ...userData,\r\n      password: hashedPassword,\r\n      role: userData.role || 'admin',\r\n      userType: 'Admin',\r\n      isEmailVerified: true // Admins don't need email verification\r\n    });\r\n    \r\n    await adminUser.save();\r\n    \r\n    console.log('‚úÖ [AdminService] Admin user created:', adminUser.email);\r\n    return adminUser;\r\n  }\r\n\r\n  async updateUser(userId, updates) {\r\n    console.log('üîÑ [AdminService] Updating user:', userId);\r\n    \r\n    // Remove sensitive fields that shouldn't be updated directly\r\n    delete updates.password; // Use separate password reset flow\r\n    delete updates._id;\r\n    \r\n    const user = await User.findByIdAndUpdate(userId, updates, { new: true }).select('-password');\r\n    \r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] User updated:', user.email);\r\n    return user;\r\n  }\r\n\r\n  async deleteUser(userId) {\r\n    console.log('üîÑ [AdminService] Deleting user:', userId);\r\n    \r\n    const user = await User.findByIdAndDelete(userId);\r\n    \r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] User deleted:', user.email);\r\n    return { message: 'User deleted successfully' };\r\n  }\r\n\r\n  /**\r\n   * Content Management Operations\r\n   */\r\n  async getAllCategories() {\r\n    console.log('üîÑ [AdminService] Fetching all categories');\r\n    const categories = await Category.find().populate('subcategories');\r\n    console.log('‚úÖ [AdminService] Categories fetched:', categories.length);\r\n    return categories;\r\n  }\r\n\r\n  async createCategory(categoryData) {\r\n    console.log('üîÑ [AdminService] Creating category:', categoryData.name);\r\n    \r\n    const category = new Category(categoryData);\r\n    await category.save();\r\n    \r\n    console.log('‚úÖ [AdminService] Category created:', category.name);\r\n    return category;\r\n  }\r\n\r\n  async updateCategory(categoryId, updates) {\r\n    console.log('üîÑ [AdminService] Updating category:', categoryId);\r\n    \r\n    const category = await Category.findByIdAndUpdate(categoryId, updates, { new: true });\r\n    \r\n    if (!category) {\r\n      throw new Error('Category not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] Category updated:', category.name);\r\n    return category;\r\n  }\r\n\r\n  async deleteCategory(categoryId) {\r\n    console.log('üîÑ [AdminService] Deleting category:', categoryId);\r\n    \r\n    const category = await Category.findByIdAndDelete(categoryId);\r\n    \r\n    if (!category) {\r\n      throw new Error('Category not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] Category deleted:', category.name);\r\n    return { message: 'Category deleted successfully' };\r\n  }\r\n\r\n  /**\r\n   * Product Management Operations\r\n   */\r\n  async getAllProducts(filters = {}) {\r\n    console.log('üîÑ [AdminService] Fetching all products with filters:', filters);\r\n    \r\n    const query = {};\r\n    if (filters.category) query.category = filters.category;\r\n    if (filters.isActive !== undefined) query.isActive = filters.isActive;\r\n    \r\n    const products = await Product.find(query).populate('category');\r\n    \r\n    console.log('‚úÖ [AdminService] Products fetched:', products.length);\r\n    return products;\r\n  }\r\n\r\n  async createProduct(productData) {\r\n    console.log('üîÑ [AdminService] Creating product:', productData.name);\r\n    \r\n    const product = new Product(productData);\r\n    await product.save();\r\n    \r\n    console.log('‚úÖ [AdminService] Product created:', product.name);\r\n    return product;\r\n  }\r\n\r\n  async updateProduct(productId, updates) {\r\n    console.log('üîÑ [AdminService] Updating product:', productId);\r\n    \r\n    const product = await Product.findByIdAndUpdate(productId, updates, { new: true });\r\n    \r\n    if (!product) {\r\n      throw new Error('Product not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] Product updated:', product.name);\r\n    return product;\r\n  }\r\n\r\n  async deleteProduct(productId) {\r\n    console.log('üîÑ [AdminService] Deleting product:', productId);\r\n    \r\n    const product = await Product.findByIdAndDelete(productId);\r\n    \r\n    if (!product) {\r\n      throw new Error('Product not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] Product deleted:', product.name);\r\n    return { message: 'Product deleted successfully' };\r\n  }\r\n\r\n  /**\r\n   * Order Management Operations\r\n   */\r\n  async getAllOrders(filters = {}) {\r\n    console.log('üîÑ [AdminService] Fetching all orders with filters:', filters);\r\n    \r\n    const query = {};\r\n    if (filters.status) query.status = filters.status;\r\n    if (filters.userId) query.userId = filters.userId;\r\n    \r\n    const orders = await Order.find(query).populate('userId', 'name email phone');\r\n    \r\n    console.log('‚úÖ [AdminService] Orders fetched:', orders.length);\r\n    return orders;\r\n  }\r\n\r\n  async updateOrderStatus(orderId, status) {\r\n    console.log('üîÑ [AdminService] Updating order status:', orderId, status);\r\n    \r\n    const order = await Order.findByIdAndUpdate(orderId, { status }, { new: true });\r\n    \r\n    if (!order) {\r\n      throw new Error('Order not found');\r\n    }\r\n    \r\n    console.log('‚úÖ [AdminService] Order status updated:', order._id);\r\n    return order;\r\n  }\r\n\r\n  /**\r\n   * System Management Operations\r\n   */\r\n  async getDashboardStats() {\r\n    console.log('üîÑ [AdminService] Fetching dashboard statistics');\r\n    \r\n    const [\r\n      totalUsers,\r\n      totalProducts,\r\n      totalOrders,\r\n      totalCategories\r\n    ] = await Promise.all([\r\n      User.countDocuments(),\r\n      Product.countDocuments(),\r\n      Order.countDocuments(),\r\n      Category.countDocuments()\r\n    ]);\r\n    \r\n    const stats = {\r\n      totalUsers,\r\n      totalProducts,\r\n      totalOrders,\r\n      totalCategories,\r\n      lastUpdated: new Date()\r\n    };\r\n    \r\n    console.log('‚úÖ [AdminService] Dashboard stats fetched:', stats);\r\n    return stats;\r\n  }\r\n\r\n  async getRecentActivities(limit = 10) {\r\n    console.log('üîÑ [AdminService] Fetching recent activities');\r\n    \r\n    // Get recent users, orders, and products\r\n    const [recentUsers, recentOrders, recentProducts] = await Promise.all([\r\n      User.find().sort({ createdAt: -1 }).limit(limit).select('name email createdAt'),\r\n      Order.find().sort({ createdAt: -1 }).limit(limit).populate('userId', 'name'),\r\n      Product.find().sort({ createdAt: -1 }).limit(limit).select('name createdAt')\r\n    ]);\r\n    \r\n    const activities = {\r\n      recentUsers,\r\n      recentOrders,\r\n      recentProducts\r\n    };\r\n    \r\n    console.log('‚úÖ [AdminService] Recent activities fetched');\r\n    return activities;\r\n  }\r\n\r\n  /**\r\n   * Permission Check Helper\r\n   */\r\n  async checkAdminPermission(user, requiredPermission) {\r\n    console.log('üîê [AdminService] Checking admin permission:', requiredPermission);\r\n    \r\n    if (!user) {\r\n      throw new Error('Authentication required');\r\n    }\r\n    \r\n    if (!['admin', 'superadmin'].includes(user.role)) {\r\n      throw new Error('Admin access required');\r\n    }\r\n    \r\n    // SuperAdmin has all permissions\r\n    if (user.role === 'superadmin') {\r\n      console.log('‚úÖ [AdminService] SuperAdmin access granted');\r\n      return true;\r\n    }\r\n    \r\n    // Regular admin permission logic can be extended here\r\n    console.log('‚úÖ [AdminService] Admin permission granted');\r\n    return true;\r\n  }\r\n}\r\n\r\n// Export single instance (Singleton pattern)\r\nmodule.exports = new AdminService();\r\n"
        }
    ]
}