{
    "sourceFile": "backend/src/models/Product.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753640078109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753711237050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,31 @@\n   is_trending: { type: Boolean, default: false },\r\n   is_return: { type: Boolean, default: false },\r\n   status: { type: Boolean, default: true },\r\n \r\n+  // NEW: Analytics and tracking (completely optional - no breaking changes)\r\n+  analytics: {\r\n+    views: {\r\n+      total: { type: Number, default: 0 },\r\n+      individual: { type: Number, default: 0 }, // Individual user views\r\n+      corporate: { type: Number, default: 0 },   // Corporate user views\r\n+      anonymous: { type: Number, default: 0 }    // Non-logged-in views\r\n+    },\r\n+    lastViewed: { type: Date },\r\n+    popularityScore: { type: Number, default: 0 }, // Calculated score\r\n+    dailyViews: [{\r\n+      date: { type: Date },\r\n+      count: { type: Number, default: 0 },\r\n+      userTypes: {\r\n+        individual: { type: Number, default: 0 },\r\n+        corporate: { type: Number, default: 0 },\r\n+        anonymous: { type: Number, default: 0 }\r\n+      }\r\n+    }],\r\n+    weeklyViews: { type: Number, default: 0 },\r\n+    monthlyViews: { type: Number, default: 0 }\r\n+  },\r\n+\r\n   // Timestamps\r\n   createdAt: { type: Date, default: Date.now },\r\n   updatedAt: { type: Date, default: Date.now }\r\n });\r\n@@ -104,8 +127,22 @@\n          this.corporatePricing?.priceTiers && \r\n          this.corporatePricing.priceTiers.length > 0;\r\n });\r\n \r\n+// Virtual for popularity ranking\r\n+productSchema.virtual('popularityRank').get(function() {\r\n+  const totalViews = this.analytics?.views?.total || 0;\r\n+  const recentViews = this.analytics?.weeklyViews || 0;\r\n+  const corporateViews = this.analytics?.views?.corporate || 0;\r\n+  \r\n+  // Weighted popularity score (recent views count more, corporate views have higher weight)\r\n+  return (totalViews * 0.3) + (recentViews * 0.5) + (corporateViews * 0.2);\r\n+});\r\n+\r\n+// Add index for better query performance on popular products\r\n+productSchema.index({ 'analytics.views.total': -1 });\r\n+productSchema.index({ 'analytics.popularityScore': -1 });\r\n+\r\n // Ensure virtual fields are serialized\r\n productSchema.set('toJSON', { virtuals: true });\r\n productSchema.set('toObject', { virtuals: true });\r\n \r\n"
                },
                {
                    "date": 1753720562184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,31 +41,65 @@\n     }],\r\n     customQuoteThreshold: { type: Number } // Quantity above which to show \"Request Quote\"\r\n   },\r\n \r\n+  // Corporate Specific\r\n+  is_corporate_only: {\r\n+    type: Boolean,\r\n+    default: false\r\n+  },\r\n+\r\n   // Inventory\r\n   sku: { type: String },\r\n   quantity: { type: Number, default: 0 },\r\n   stock_status: {\r\n     type: String,\r\n-    enum: ['in_stock', 'out_of_stock'],\r\n+    enum: ['in_stock', 'out_of_stock', 'pre_order', 'back_order'],\r\n     default: 'in_stock'\r\n   },\r\n   type: {\r\n     type: String,\r\n-    enum: ['simple', 'variable'],\r\n+    enum: ['simple', 'variable', 'grouped'],\r\n     default: 'simple'\r\n   },\r\n   unit: { type: String },\r\n   weight: { type: Number },\r\n   requires_shipping: { type: Boolean, default: true },\r\n   available_from: { type: Date },\r\n   available_to: { type: Date },\r\n \r\n+  // Product Variations (for variable products)\r\n+  variations: [{\r\n+    variation_name: String,\r\n+    sku: String,\r\n+    quantity: Number,\r\n+    price: Number,\r\n+    sale_price: Number,\r\n+    discount: String,\r\n+    attributes: [{\r\n+      name: String, // Color, Size, etc.\r\n+      value: String // Red, Large, etc.\r\n+    }]\r\n+  }],\r\n+\r\n   // Categories & Tags\r\n   categories: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }],\r\n   tags: [{ type: String }],\r\n \r\n+  // Product Relations\r\n+  related_products: [{ \r\n+    type: mongoose.Schema.Types.ObjectId, \r\n+    ref: 'Product' \r\n+  }],\r\n+  cross_sell_products: [{ \r\n+    type: mongoose.Schema.Types.ObjectId, \r\n+    ref: 'Product' \r\n+  }],\r\n+  is_random_related_products: { \r\n+    type: Boolean, \r\n+    default: false \r\n+  },\r\n+\r\n   // Images\r\n   images: [{ type: String }],\r\n   product_thumbnail_id: { type: String },\r\n   product_galleries_id: [{ type: String }],\r\n@@ -88,8 +122,62 @@\n   is_trending: { type: Boolean, default: false },\r\n   is_return: { type: Boolean, default: false },\r\n   status: { type: Boolean, default: true },\r\n \r\n+  // Additional Business Features\r\n+  safe_checkout: { type: Boolean, default: true },\r\n+  secure_checkout: { type: Boolean, default: true },\r\n+  social_share: { type: Boolean, default: true },\r\n+  encourage_order: { type: Boolean, default: false },\r\n+  encourage_view: { type: Boolean, default: false },\r\n+\r\n+  // Reviews & Ratings\r\n+  reviews: [{\r\n+    user: {\r\n+      type: mongoose.Schema.Types.ObjectId,\r\n+      ref: 'User',\r\n+      required: true\r\n+    },\r\n+    name: String,\r\n+    rating: {\r\n+      type: Number,\r\n+      required: true,\r\n+      min: 1,\r\n+      max: 5\r\n+    },\r\n+    comment: String,\r\n+    isVerifiedBuyer: {\r\n+      type: Boolean,\r\n+      default: false\r\n+    },\r\n+    createdAt: {\r\n+      type: Date,\r\n+      default: Date.now\r\n+    }\r\n+  }],\r\n+  rating: {\r\n+    type: Number,\r\n+    default: 0,\r\n+    min: 0,\r\n+    max: 5\r\n+  },\r\n+  numReviews: {\r\n+    type: Number,\r\n+    default: 0\r\n+  },\r\n+\r\n+  // Sales Analytics\r\n+  sales_count: {\r\n+    type: Number,\r\n+    default: 0\r\n+  },\r\n+\r\n+  // Admin Management\r\n+  createdBy: {\r\n+    type: mongoose.Schema.Types.ObjectId,\r\n+    ref: 'AdminUser'\r\n+  },\r\n+\r\n   // NEW: Analytics and tracking (completely optional - no breaking changes)\r\n   analytics: {\r\n     views: {\r\n       total: { type: Number, default: 0 },\r\n@@ -137,9 +225,54 @@\n   // Weighted popularity score (recent views count more, corporate views have higher weight)\r\n   return (totalViews * 0.3) + (recentViews * 0.5) + (corporateViews * 0.2);\r\n });\r\n \r\n-// Add index for better query performance on popular products\r\n+// Additional useful virtuals\r\n+productSchema.virtual('isOnSale').get(function() {\r\n+  return this.sale_price && this.sale_price < this.price;\r\n+});\r\n+\r\n+productSchema.virtual('finalPrice').get(function() {\r\n+  return this.sale_price || this.retailPrice?.sellingPrice || this.price;\r\n+});\r\n+\r\n+productSchema.virtual('isInStock').get(function() {\r\n+  return this.quantity > 0 && this.stock_status === 'in_stock';\r\n+});\r\n+\r\n+productSchema.virtual('averageRating').get(function() {\r\n+  if (!this.reviews || this.reviews.length === 0) return 0;\r\n+  const sum = this.reviews.reduce((acc, review) => acc + review.rating, 0);\r\n+  return Math.round((sum / this.reviews.length) * 10) / 10; // Round to 1 decimal\r\n+});\r\n+\r\n+// Pre-save middleware for review calculations and timestamps\r\n+productSchema.pre('save', function(next) {\r\n+  this.updatedAt = Date.now();\r\n+  \r\n+  // Update review statistics\r\n+  if (this.reviews && this.reviews.length > 0) {\r\n+    this.numReviews = this.reviews.length;\r\n+    const sum = this.reviews.reduce((acc, review) => acc + review.rating, 0);\r\n+    this.rating = Math.round((sum / this.reviews.length) * 10) / 10;\r\n+  } else {\r\n+    this.numReviews = 0;\r\n+    this.rating = 0;\r\n+  }\r\n+  \r\n+  next();\r\n+});\r\n+\r\n+// Add indexes for better query performance\r\n+productSchema.index({ name: 'text', description: 'text' });\r\n+productSchema.index({ categories: 1, status: 1 });\r\n+productSchema.index({ price: 1 });\r\n+productSchema.index({ is_featured: 1, status: 1 });\r\n+productSchema.index({ is_popular: 1, status: 1 });\r\n+productSchema.index({ is_trending: 1, status: 1 });\r\n+productSchema.index({ createdAt: -1 });\r\n+productSchema.index({ rating: -1 });\r\n+productSchema.index({ sales_count: -1 });\r\n productSchema.index({ 'analytics.views.total': -1 });\r\n productSchema.index({ 'analytics.popularityScore': -1 });\r\n \r\n // Ensure virtual fields are serialized\r\n"
                }
            ],
            "date": 1753640078109,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\r\n\r\n\r\nconst productSchema = new mongoose.Schema({\r\n  // Basic Info\r\n  name: { type: String, required: true },\r\n  short_description: { type: String },\r\n  description: { type: String, required: true },\r\n\r\n  // Legacy Pricing (kept for backward compatibility)\r\n  price: { type: Number, required: true },\r\n  compare_price: { type: Number },\r\n  cost_price: { type: Number },\r\n  sale_price: { type: Number },\r\n  discount: { type: String },\r\n\r\n  // New Retail Pricing Structure\r\n  retailPrice: {\r\n    mrp: { \r\n      type: Number,\r\n      default: function() { return this.price || 0; }\r\n    },\r\n    sellingPrice: { \r\n      type: Number,\r\n      default: function() { return this.price || 0; }\r\n    },\r\n    discount: { type: Number, default: 0 },\r\n    currency: { type: String, default: 'INR' }\r\n  },\r\n\r\n  // Corporate/Bulk Pricing\r\n  corporatePricing: {\r\n    enabled: { type: Boolean, default: false },\r\n    minimumOrderQuantity: { type: Number, default: 1 },\r\n    priceTiers: [{\r\n      minQuantity: { type: Number, required: true },\r\n      maxQuantity: { type: Number }, // null means no upper limit\r\n      pricePerUnit: { type: Number, required: true },\r\n      discount: { type: Number, default: 0 },\r\n      description: { type: String } // e.g., \"Best value for large orders\"\r\n    }],\r\n    customQuoteThreshold: { type: Number } // Quantity above which to show \"Request Quote\"\r\n  },\r\n\r\n  // Inventory\r\n  sku: { type: String },\r\n  quantity: { type: Number, default: 0 },\r\n  stock_status: {\r\n    type: String,\r\n    enum: ['in_stock', 'out_of_stock'],\r\n    default: 'in_stock'\r\n  },\r\n  type: {\r\n    type: String,\r\n    enum: ['simple', 'variable'],\r\n    default: 'simple'\r\n  },\r\n  unit: { type: String },\r\n  weight: { type: Number },\r\n  requires_shipping: { type: Boolean, default: true },\r\n  available_from: { type: Date },\r\n  available_to: { type: Date },\r\n\r\n  // Categories & Tags\r\n  categories: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }],\r\n  tags: [{ type: String }],\r\n\r\n  // Images\r\n  images: [{ type: String }],\r\n  product_thumbnail_id: { type: String },\r\n  product_galleries_id: [{ type: String }],\r\n  size_chart_image_id: { type: String },\r\n\r\n  // SEO\r\n  meta_title: { type: String },\r\n  meta_description: { type: String },\r\n  product_meta_image_id: { type: String },\r\n\r\n  // Shipping & Tax\r\n  is_free_shipping: { type: Boolean, default: false },\r\n  tax_id: { type: String },\r\n  estimated_delivery_text: { type: String },\r\n  return_policy_text: { type: String },\r\n\r\n  // Flags\r\n  is_featured: { type: Boolean, default: false },\r\n  is_popular: { type: Boolean, default: false },\r\n  is_trending: { type: Boolean, default: false },\r\n  is_return: { type: Boolean, default: false },\r\n  status: { type: Boolean, default: true },\r\n\r\n  // Timestamps\r\n  createdAt: { type: Date, default: Date.now },\r\n  updatedAt: { type: Date, default: Date.now }\r\n});\r\n\r\n// Virtual properties for backward compatibility\r\nproductSchema.virtual('displayPrice').get(function() {\r\n  return this.retailPrice?.sellingPrice || this.price || 0;\r\n});\r\n\r\nproductSchema.virtual('hasActiveCorporatePricing').get(function() {\r\n  return this.corporatePricing?.enabled && \r\n         this.corporatePricing?.priceTiers && \r\n         this.corporatePricing.priceTiers.length > 0;\r\n});\r\n\r\n// Ensure virtual fields are serialized\r\nproductSchema.set('toJSON', { virtuals: true });\r\nproductSchema.set('toObject', { virtuals: true });\r\n\r\nmodule.exports = mongoose.model('Product', productSchema);\r\n"
        }
    ]
}