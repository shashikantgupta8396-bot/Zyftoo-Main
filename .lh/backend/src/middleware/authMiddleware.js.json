{
    "sourceFile": "backend/src/middleware/authMiddleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752831493449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753609071151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,177 +11,69 @@\n     ) {\r\n       token = req.headers.authorization.split(' ')[1];\r\n       const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n       req.user = await User.findById(decoded.id).select('-password'); // attach user data to req\r\n-      \r\n-      if (!req.user) {\r\n-        return res.status(401).json({ \r\n-          success: false,\r\n-          message: 'User not found' \r\n-        });\r\n-      }\r\n-      \r\n       next();\r\n     } else {\r\n-      return res.status(401).json({ \r\n-        success: false,\r\n-        message: 'Not authorized, no token' \r\n-      });\r\n+      return res.status(401).json({ message: 'Not authorized, no token' });\r\n     }\r\n   } catch (error) {\r\n-    console.error('Token verification error:', error);\r\n-    return res.status(401).json({ \r\n-      success: false,\r\n-      message: 'Not authorized, token failed' \r\n-    });\r\n+    return res.status(401).json({ message: 'Not authorized, token failed' });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Enhanced middleware to verify JWT token\r\n- */\r\n-const authMiddleware = async (req, res, next) => {\r\n-  try {\r\n-    let token;\r\n-\r\n-    // Check for token in Authorization header\r\n-    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n-      try {\r\n-        // Get token from header\r\n-        token = req.headers.authorization.split(' ')[1];\r\n-\r\n-        // Verify token\r\n-        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-\r\n-        // Get user from the token (exclude password)\r\n-        req.user = await User.findById(decoded.id).select('-password');\r\n-\r\n-        if (!req.user) {\r\n-          return res.status(401).json({\r\n-            success: false,\r\n-            message: 'User not found'\r\n-          });\r\n-        }\r\n-\r\n-        next();\r\n-      } catch (error) {\r\n-        console.error('Token verification error:', error);\r\n-        return res.status(401).json({\r\n-          success: false,\r\n-          message: 'Invalid token'\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    if (!token) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: 'Not authorized, no token provided'\r\n-      });\r\n-    }\r\n-  } catch (error) {\r\n-    console.error('Auth middleware error:', error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      message: 'Server error in authentication'\r\n-    });\r\n-  }\r\n-};\r\n-\r\n // ✅ Role check\r\n const authorizeRoles = (...allowedRoles) => {\r\n   return (req, res, next) => {\r\n     if (!req.user || !allowedRoles.includes(req.user.role)) {\r\n-      return res.status(403).json({ \r\n-        success: false,\r\n-        message: 'Forbidden: Access denied' \r\n-      });\r\n+      return res.status(403).json({ message: 'Forbidden: Access denied' });\r\n     }\r\n     next();\r\n   };\r\n };\r\n \r\n+// ✅ FIXED: Admin-only middleware (now checks correct field)\r\n const adminOnly = (req, res, next) => {\r\n-  if (req.user && req.user.isAdmin==='admin') {\r\n+  if (req.user && req.user.role === 'admin') {\r\n     next();\r\n   } else {\r\n-    res.status(403).json({ \r\n-      success: false,\r\n-      message: 'Admin access only' \r\n-    });\r\n+    res.status(403).json({ message: 'Admin access only' });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Middleware to verify admin role\r\n- */\r\n-const adminMiddleware = async (req, res, next) => {\r\n-  try {\r\n+// ✅ Enhanced role-based middleware with better error handling\r\n+const requireRoles = (...allowedRoles) => {\r\n+  return (req, res, next) => {\r\n     if (!req.user) {\r\n-      return res.status(401).json({\r\n-        success: false,\r\n-        message: 'Authentication required'\r\n+      return res.status(401).json({ \r\n+        message: 'Authentication required',\r\n+        error: 'NO_USER'\r\n       });\r\n     }\r\n-\r\n-    // Check if user has admin role\r\n-    if (req.user.role !== 'admin' && req.user.isAdmin !== 'admin') {\r\n-      return res.status(403).json({\r\n-        success: false,\r\n-        message: 'Access denied. Admin privileges required'\r\n+    \r\n+    if (!allowedRoles.includes(req.user.role)) {\r\n+      return res.status(403).json({ \r\n+        message: 'Insufficient permissions',\r\n+        required: allowedRoles,\r\n+        current: req.user.role,\r\n+        error: 'INSUFFICIENT_ROLE'\r\n       });\r\n     }\r\n-\r\n+    \r\n     next();\r\n-  } catch (error) {\r\n-    console.error('Admin middleware error:', error);\r\n-    res.status(500).json({\r\n-      success: false,\r\n-      message: 'Server error in authorization'\r\n-    });\r\n-  }\r\n+  };\r\n };\r\n \r\n-/**\r\n- * Optional auth middleware - doesn't fail if no token\r\n- */\r\n-const optionalAuth = async (req, res, next) => {\r\n-  try {\r\n-    let token;\r\n-\r\n-    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n-      try {\r\n-        token = req.headers.authorization.split(' ')[1];\r\n-        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-        req.user = await User.findById(decoded.id).select('-password');\r\n-      } catch (error) {\r\n-        console.log('Optional auth failed, continuing without user');\r\n-        req.user = null;\r\n-      }\r\n-    }\r\n-\r\n+// ✅ Unified admin access (admin + superadmin)\r\n+const adminAccess = (req, res, next) => {\r\n+  if (req.user && ['admin', 'superadmin'].includes(req.user.role)) {\r\n     next();\r\n-  } catch (error) {\r\n-    console.error('Optional auth middleware error:', error);\r\n-    req.user = null;\r\n-    next();\r\n+  } else {\r\n+    res.status(403).json({ \r\n+      message: 'Admin access required',\r\n+      current: req.user?.role || 'none',\r\n+      error: 'NOT_ADMIN'\r\n+    });\r\n   }\r\n };\r\n \r\n-/**\r\n- * Generate JWT token\r\n- */\r\n-const generateToken = (id) => {\r\n-  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n-    expiresIn: process.env.JWT_EXPIRE || '7d',\r\n-  });\r\n-};\r\n-\r\n-module.exports = { \r\n-  protect, \r\n-  authorizeRoles, \r\n-  adminOnly,\r\n-  authMiddleware,\r\n-  adminMiddleware,\r\n-  optionalAuth,\r\n-  generateToken\r\n-};\r\n+module.exports = { protect, authorizeRoles, adminOnly, requireRoles, adminAccess };\r\n"
                }
            ],
            "date": 1752831493449,
            "name": "Commit-0",
            "content": "// middleware/authMiddleware.js\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\n\r\nconst protect = async (req, res, next) => {\r\n  let token;\r\n  try {\r\n    if (\r\n      req.headers.authorization &&\r\n      req.headers.authorization.startsWith('Bearer')\r\n    ) {\r\n      token = req.headers.authorization.split(' ')[1];\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n      req.user = await User.findById(decoded.id).select('-password'); // attach user data to req\r\n      \r\n      if (!req.user) {\r\n        return res.status(401).json({ \r\n          success: false,\r\n          message: 'User not found' \r\n        });\r\n      }\r\n      \r\n      next();\r\n    } else {\r\n      return res.status(401).json({ \r\n        success: false,\r\n        message: 'Not authorized, no token' \r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Token verification error:', error);\r\n    return res.status(401).json({ \r\n      success: false,\r\n      message: 'Not authorized, token failed' \r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Enhanced middleware to verify JWT token\r\n */\r\nconst authMiddleware = async (req, res, next) => {\r\n  try {\r\n    let token;\r\n\r\n    // Check for token in Authorization header\r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n      try {\r\n        // Get token from header\r\n        token = req.headers.authorization.split(' ')[1];\r\n\r\n        // Verify token\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n\r\n        // Get user from the token (exclude password)\r\n        req.user = await User.findById(decoded.id).select('-password');\r\n\r\n        if (!req.user) {\r\n          return res.status(401).json({\r\n            success: false,\r\n            message: 'User not found'\r\n          });\r\n        }\r\n\r\n        next();\r\n      } catch (error) {\r\n        console.error('Token verification error:', error);\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: 'Invalid token'\r\n        });\r\n      }\r\n    }\r\n\r\n    if (!token) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        message: 'Not authorized, no token provided'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Auth middleware error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Server error in authentication'\r\n    });\r\n  }\r\n};\r\n\r\n// ✅ Role check\r\nconst authorizeRoles = (...allowedRoles) => {\r\n  return (req, res, next) => {\r\n    if (!req.user || !allowedRoles.includes(req.user.role)) {\r\n      return res.status(403).json({ \r\n        success: false,\r\n        message: 'Forbidden: Access denied' \r\n      });\r\n    }\r\n    next();\r\n  };\r\n};\r\n\r\nconst adminOnly = (req, res, next) => {\r\n  if (req.user && req.user.isAdmin==='admin') {\r\n    next();\r\n  } else {\r\n    res.status(403).json({ \r\n      success: false,\r\n      message: 'Admin access only' \r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Middleware to verify admin role\r\n */\r\nconst adminMiddleware = async (req, res, next) => {\r\n  try {\r\n    if (!req.user) {\r\n      return res.status(401).json({\r\n        success: false,\r\n        message: 'Authentication required'\r\n      });\r\n    }\r\n\r\n    // Check if user has admin role\r\n    if (req.user.role !== 'admin' && req.user.isAdmin !== 'admin') {\r\n      return res.status(403).json({\r\n        success: false,\r\n        message: 'Access denied. Admin privileges required'\r\n      });\r\n    }\r\n\r\n    next();\r\n  } catch (error) {\r\n    console.error('Admin middleware error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Server error in authorization'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Optional auth middleware - doesn't fail if no token\r\n */\r\nconst optionalAuth = async (req, res, next) => {\r\n  try {\r\n    let token;\r\n\r\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\r\n      try {\r\n        token = req.headers.authorization.split(' ')[1];\r\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n        req.user = await User.findById(decoded.id).select('-password');\r\n      } catch (error) {\r\n        console.log('Optional auth failed, continuing without user');\r\n        req.user = null;\r\n      }\r\n    }\r\n\r\n    next();\r\n  } catch (error) {\r\n    console.error('Optional auth middleware error:', error);\r\n    req.user = null;\r\n    next();\r\n  }\r\n};\r\n\r\n/**\r\n * Generate JWT token\r\n */\r\nconst generateToken = (id) => {\r\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n    expiresIn: process.env.JWT_EXPIRE || '7d',\r\n  });\r\n};\r\n\r\nmodule.exports = { \r\n  protect, \r\n  authorizeRoles, \r\n  adminOnly,\r\n  authMiddleware,\r\n  adminMiddleware,\r\n  optionalAuth,\r\n  generateToken\r\n};\r\n"
        }
    ]
}