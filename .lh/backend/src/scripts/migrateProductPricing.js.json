{
    "sourceFile": "backend/src/scripts/migrateProductPricing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753640078110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753640931843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,22 @@\n  * WITHOUT breaking existing functionality\r\n  */\r\n \r\n const mongoose = require('mongoose');\r\n-require('dotenv').config();\r\n+const path = require('path');\r\n \r\n+// Load environment variables from the correct path\r\n+require('dotenv').config({ path: path.join(__dirname, '../../.env') });\r\n+\r\n // Import the updated Product model\r\n const Product = require('../models/Product');\r\n \r\n async function migrateProducts() {\r\n   try {\r\n     console.log('üöÄ Starting Product Migration...');\r\n     \r\n     // Connect to database\r\n-    await mongoose.connect(process.env.MONGODB_URI);\r\n+    await mongoose.connect(process.env.MONGO_URI);\r\n     console.log('‚úÖ Connected to database');\r\n \r\n     // Find products that need migration (don't have retailPrice structure)\r\n     const productsToMigrate = await Product.find({\r\n"
                }
            ],
            "date": 1753640078110,
            "name": "Commit-0",
            "content": "/**\r\n * Migration Script: Add Corporate Pricing to Existing Products\r\n * This script safely migrates existing products to the new pricing structure\r\n * WITHOUT breaking existing functionality\r\n */\r\n\r\nconst mongoose = require('mongoose');\r\nrequire('dotenv').config();\r\n\r\n// Import the updated Product model\r\nconst Product = require('../models/Product');\r\n\r\nasync function migrateProducts() {\r\n  try {\r\n    console.log('üöÄ Starting Product Migration...');\r\n    \r\n    // Connect to database\r\n    await mongoose.connect(process.env.MONGODB_URI);\r\n    console.log('‚úÖ Connected to database');\r\n\r\n    // Find products that need migration (don't have retailPrice structure)\r\n    const productsToMigrate = await Product.find({\r\n      $or: [\r\n        { retailPrice: { $exists: false } },\r\n        { retailPrice: null },\r\n        { 'retailPrice.sellingPrice': { $exists: false } }\r\n      ]\r\n    });\r\n\r\n    console.log(`üìä Found ${productsToMigrate.length} products to migrate`);\r\n\r\n    let migrated = 0;\r\n    let skipped = 0;\r\n    let errors = 0;\r\n\r\n    for (const product of productsToMigrate) {\r\n      try {\r\n        // Only update if necessary\r\n        const updateData = {};\r\n        \r\n        // Migrate retail pricing\r\n        if (!product.retailPrice || !product.retailPrice.sellingPrice) {\r\n          updateData.retailPrice = {\r\n            mrp: product.price || 0,\r\n            sellingPrice: product.price || 0,\r\n            discount: 0,\r\n            currency: 'INR'\r\n          };\r\n        }\r\n\r\n        // Add empty corporate pricing structure if not present\r\n        if (!product.corporatePricing) {\r\n          updateData.corporatePricing = {\r\n            enabled: false,\r\n            minimumOrderQuantity: 1,\r\n            priceTiers: []\r\n          };\r\n        }\r\n\r\n        if (Object.keys(updateData).length > 0) {\r\n          await Product.findByIdAndUpdate(product._id, updateData);\r\n          migrated++;\r\n          console.log(`‚úÖ Migrated: ${product.name}`);\r\n        } else {\r\n          skipped++;\r\n          console.log(`‚è≠Ô∏è  Skipped: ${product.name} (already migrated)`);\r\n        }\r\n\r\n      } catch (error) {\r\n        errors++;\r\n        console.error(`‚ùå Error migrating ${product.name}:`, error.message);\r\n      }\r\n    }\r\n\r\n    console.log('\\nüìà Migration Summary:');\r\n    console.log(`   ‚úÖ Migrated: ${migrated} products`);\r\n    console.log(`   ‚è≠Ô∏è  Skipped: ${skipped} products`);\r\n    console.log(`   ‚ùå Errors: ${errors} products`);\r\n    \r\n    // Verify migration\r\n    const totalProducts = await Product.countDocuments();\r\n    const migratedProducts = await Product.countDocuments({\r\n      'retailPrice.sellingPrice': { $exists: true }\r\n    });\r\n    \r\n    console.log(`\\nüîç Verification:`);\r\n    console.log(`   Total products: ${totalProducts}`);\r\n    console.log(`   Products with new pricing: ${migratedProducts}`);\r\n    console.log(`   Migration success rate: ${((migratedProducts / totalProducts) * 100).toFixed(2)}%`);\r\n\r\n    if (migratedProducts === totalProducts) {\r\n      console.log('üéâ Migration completed successfully!');\r\n    } else {\r\n      console.log('‚ö†Ô∏è  Some products may need manual review');\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('üí• Migration failed:', error);\r\n  } finally {\r\n    await mongoose.disconnect();\r\n    console.log('üëã Disconnected from database');\r\n  }\r\n}\r\n\r\n// Rollback function (if needed)\r\nasync function rollbackMigration() {\r\n  try {\r\n    console.log('üîÑ Starting rollback...');\r\n    \r\n    await mongoose.connect(process.env.MONGODB_URI);\r\n    \r\n    // Remove the new fields (keeping legacy price field)\r\n    const result = await Product.updateMany(\r\n      {},\r\n      {\r\n        $unset: {\r\n          retailPrice: \"\",\r\n          corporatePricing: \"\"\r\n        }\r\n      }\r\n    );\r\n    \r\n    console.log(`‚úÖ Rollback completed. ${result.modifiedCount} products updated.`);\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Rollback failed:', error);\r\n  } finally {\r\n    await mongoose.disconnect();\r\n  }\r\n}\r\n\r\n// Check command line arguments\r\nconst args = process.argv.slice(2);\r\n\r\nif (args[0] === 'rollback') {\r\n  rollbackMigration();\r\n} else {\r\n  migrateProducts();\r\n}\r\n\r\nmodule.exports = { migrateProducts, rollbackMigration };\r\n"
        }
    ]
}