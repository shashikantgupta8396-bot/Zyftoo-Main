{
    "sourceFile": "backend/src/scripts/testSubcategoryAPI.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753164626961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753164626961,
            "name": "Commit-0",
            "content": "/**\r\n * Test Subcategory API\r\n * This script directly tests the subcategory API endpoint\r\n */\r\n\r\nconst axios = require('axios');\r\n\r\nconst ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI';\r\nconst API_BASE = 'http://localhost:5000/api';\r\n\r\nasync function testSubcategoryAPI() {\r\n  console.log('üß™ === TESTING SUBCATEGORY API ===');\r\n  console.log('Backend URL:', API_BASE);\r\n  console.log('Endpoint:', '/subcategories');\r\n  \r\n  try {\r\n    console.log('\\n1. Making direct HTTP request to subcategories endpoint...');\r\n    const response = await axios.get(`${API_BASE}/subcategories`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${ADMIN_TOKEN}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    console.log('\\n2. Raw HTTP Response Details:');\r\n    console.log('   - Status:', response.status);\r\n    console.log('   - Status Text:', response.statusText);\r\n    \r\n    console.log('\\n3. Response Data Analysis:');\r\n    console.log('   - Data Type:', typeof response.data);\r\n    console.log('   - Data Keys:', Object.keys(response.data || {}));\r\n    console.log('   - Full Response Data:', JSON.stringify(response.data, null, 2));\r\n    \r\n    if (response.data && typeof response.data === 'object') {\r\n      console.log('\\n4. Response Structure:');\r\n      console.log('   - Has success property:', 'success' in response.data);\r\n      console.log('   - Success value:', response.data.success);\r\n      console.log('   - Has data property:', 'data' in response.data);\r\n      console.log('   - Data property type:', typeof response.data.data);\r\n      console.log('   - Data is array:', Array.isArray(response.data.data));\r\n      \r\n      if (Array.isArray(response.data.data)) {\r\n        console.log('   - Data array length:', response.data.data.length);\r\n        console.log('\\n5. Subcategory Data Analysis:');\r\n        response.data.data.forEach((subcategory, index) => {\r\n          console.log(`   Subcategory ${index + 1}:`);\r\n          console.log(`     - ID: ${subcategory._id || subcategory.id}`);\r\n          console.log(`     - Name: ${subcategory.name}`);\r\n          console.log(`     - Parent ID: ${subcategory.parent?._id || subcategory.parent}`);\r\n          console.log(`     - Parent Name: ${subcategory.parent?.name || 'Unknown'}`);\r\n          console.log(`     - Status: ${subcategory.status}`);\r\n          console.log(`     - Full Object:`, subcategory);\r\n        });\r\n        \r\n        console.log('\\n6. Summary:');\r\n        console.log(`   - Total Subcategories: ${response.data.data.length}`);\r\n        console.log(`   - Active Subcategories: ${response.data.data.filter(sub => sub.status).length}`);\r\n        \r\n        // Group by parent\r\n        const byParent = {};\r\n        response.data.data.forEach(sub => {\r\n          const parentId = sub.parent?._id || sub.parent;\r\n          const parentName = sub.parent?.name || 'Unknown';\r\n          if (!byParent[parentId]) {\r\n            byParent[parentId] = { name: parentName, subcategories: [] };\r\n          }\r\n          byParent[parentId].subcategories.push(sub.name);\r\n        });\r\n        \r\n        console.log('\\n7. Grouped by Parent Category:');\r\n        Object.entries(byParent).forEach(([parentId, data]) => {\r\n          console.log(`   Parent: ${data.name} (${parentId})`);\r\n          console.log(`     Subcategories: ${data.subcategories.join(', ')}`);\r\n        });\r\n        \r\n      } else if (response.data.data) {\r\n        console.log('   - Data is not an array, type:', typeof response.data.data);\r\n        console.log('   - Data content:', response.data.data);\r\n      }\r\n    }\r\n    \r\n    console.log('\\n‚úÖ Subcategory API Test Completed Successfully');\r\n    \r\n  } catch (error) {\r\n    console.error('\\n‚ùå Subcategory API Test Failed:');\r\n    console.error('Error Details:', {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText,\r\n      data: error.response?.data\r\n    });\r\n    \r\n    if (error.response) {\r\n      console.error('Response Error Data:', JSON.stringify(error.response.data, null, 2));\r\n    }\r\n  }\r\n}\r\n\r\n// Also test categories for comparison\r\nasync function testCategoriesAPI() {\r\n  console.log('\\nüìã === TESTING CATEGORIES API FOR COMPARISON ===');\r\n  \r\n  try {\r\n    const response = await axios.get(`${API_BASE}/categories`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${ADMIN_TOKEN}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    console.log('Categories Response:', {\r\n      success: response.data.success,\r\n      count: response.data.count,\r\n      dataLength: response.data.data?.length\r\n    });\r\n    \r\n    if (Array.isArray(response.data.data)) {\r\n      const mainCategories = response.data.data.filter(cat => !cat.parent);\r\n      const subCategories = response.data.data.filter(cat => cat.parent);\r\n      \r\n      console.log('Categories Breakdown:');\r\n      console.log(`   - Main Categories: ${mainCategories.length}`);\r\n      console.log(`   - Sub Categories: ${subCategories.length} (embedded in categories)`);\r\n      \r\n      console.log('Main Categories:');\r\n      mainCategories.forEach((cat, index) => {\r\n        console.log(`   ${index + 1}. ${cat.name} (${cat._id})`);\r\n      });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Categories API Error:', error.message);\r\n  }\r\n}\r\n\r\n// Run both tests\r\nasync function runAllTests() {\r\n  await testSubcategoryAPI();\r\n  await testCategoriesAPI();\r\n  console.log('\\nüèÅ All API tests completed');\r\n  process.exit(0);\r\n}\r\n\r\nrunAllTests();\r\n"
        }
    ]
}