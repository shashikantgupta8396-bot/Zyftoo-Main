{
    "sourceFile": "backend/src/admin/controllers/catalog/CategoryController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753440030082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753440030082,
            "name": "Commit-0",
            "content": "/**\r\n * Admin Category Controller\r\n * \r\n * Handles all category-related operations for admin panel\r\n * Optimized with proper error handling, validation, and response structure\r\n * \r\n * @module AdminCategoryController\r\n */\r\n\r\nconst Category = require('../../../models/Category');\r\nconst Media = require('../../../models/Media');\r\nconst { getImageUrl, deleteImageFile } = require('../../../utils/fileUpload');\r\nconst { constants } = require('../../config');\r\nconst { \r\n  successResponse, \r\n  errorResponse, \r\n  validationErrorResponse \r\n} = require('../../utils/responseHelpers');\r\nconst CategoryService = require('../../services/CategoryService');\r\n\r\nclass CategoryController {\r\n  /**\r\n   * Create a new category\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async createCategory(req, res) {\r\n    try {\r\n      console.log('üìù [Admin] Creating category...');\r\n      \r\n      // Validate required fields\r\n      const { name, description = '', parent = null, status = true } = req.body || {};\r\n      \r\n      if (!name || name.trim().length === 0) {\r\n        return validationErrorResponse(res, 'Category name is required');\r\n      }\r\n\r\n      // Prepare category data\r\n      const categoryData = {\r\n        name: name.trim(),\r\n        description: description.trim(),\r\n        parent,\r\n        status: Boolean(status)\r\n      };\r\n\r\n      // Handle image upload\r\n      if (req.file) {\r\n        const imageResult = await CategoryService.processImageUpload(req.file, name);\r\n        categoryData.image = imageResult;\r\n        console.log('üñºÔ∏è Image processed successfully');\r\n      }\r\n\r\n      // Create category\r\n      const category = await CategoryService.createCategory(categoryData);\r\n      \r\n      console.log('‚úÖ Category created successfully:', category._id);\r\n      return successResponse(res, category, constants.MESSAGES.SUCCESS.CREATED, 201);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Category creation error:', error);\r\n      return errorResponse(res, error.message, 400);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all categories with filtering and pagination\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async getCategories(req, res) {\r\n    try {\r\n      console.log('üìã [Admin] Fetching categories...');\r\n      \r\n      const {\r\n        page = constants.PAGINATION.DEFAULT_PAGE,\r\n        limit = constants.PAGINATION.DEFAULT_LIMIT,\r\n        parent,\r\n        status,\r\n        search\r\n      } = req.query;\r\n\r\n      const options = {\r\n        page: parseInt(page),\r\n        limit: Math.min(parseInt(limit), constants.PAGINATION.MAX_LIMIT),\r\n        parent,\r\n        status,\r\n        search\r\n      };\r\n\r\n      const result = await CategoryService.getCategories(options);\r\n      \r\n      console.log(`‚úÖ Fetched ${result.data.length} categories`);\r\n      return successResponse(res, result);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Get categories error:', error);\r\n      return errorResponse(res, error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get single category by ID\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async getCategory(req, res) {\r\n    try {\r\n      console.log('üîç [Admin] Fetching category:', req.params.id);\r\n      \r\n      const category = await CategoryService.getCategoryById(req.params.id);\r\n      \r\n      if (!category) {\r\n        return errorResponse(res, constants.MESSAGES.ERRORS.NOT_FOUND, 404);\r\n      }\r\n\r\n      console.log('‚úÖ Category fetched successfully');\r\n      return successResponse(res, category);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Get category error:', error);\r\n      return errorResponse(res, error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update category\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async updateCategory(req, res) {\r\n    try {\r\n      console.log('‚úèÔ∏è [Admin] Updating category:', req.params.id);\r\n      \r\n      const categoryId = req.params.id;\r\n      const updateData = { ...req.body };\r\n\r\n      // Validate category exists\r\n      const existingCategory = await CategoryService.getCategoryById(categoryId);\r\n      if (!existingCategory) {\r\n        return errorResponse(res, constants.MESSAGES.ERRORS.NOT_FOUND, 404);\r\n      }\r\n\r\n      // Handle image upload\r\n      if (req.file) {\r\n        // Delete old image if exists\r\n        if (existingCategory.image?.path) {\r\n          await CategoryService.deleteImage(existingCategory.image.path);\r\n        }\r\n        \r\n        const imageResult = await CategoryService.processImageUpload(\r\n          req.file, \r\n          updateData.name || existingCategory.name\r\n        );\r\n        updateData.image = imageResult;\r\n        console.log('üñºÔ∏è Image updated successfully');\r\n      }\r\n\r\n      // Update category\r\n      const updatedCategory = await CategoryService.updateCategory(categoryId, updateData);\r\n      \r\n      console.log('‚úÖ Category updated successfully');\r\n      return successResponse(res, updatedCategory, constants.MESSAGES.SUCCESS.UPDATED);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Category update error:', error);\r\n      return errorResponse(res, error.message, 400);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete category\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async deleteCategory(req, res) {\r\n    try {\r\n      console.log('üóëÔ∏è [Admin] Deleting category:', req.params.id);\r\n      \r\n      const categoryId = req.params.id;\r\n      \r\n      // Check if category exists\r\n      const category = await CategoryService.getCategoryById(categoryId);\r\n      if (!category) {\r\n        return errorResponse(res, constants.MESSAGES.ERRORS.NOT_FOUND, 404);\r\n      }\r\n\r\n      // Check for subcategories\r\n      const hasSubcategories = await CategoryService.hasSubcategories(categoryId);\r\n      if (hasSubcategories) {\r\n        return errorResponse(res, \r\n          'Cannot delete category with subcategories. Delete subcategories first.', \r\n          400\r\n        );\r\n      }\r\n\r\n      // Delete category and its image\r\n      await CategoryService.deleteCategory(categoryId);\r\n      \r\n      console.log('‚úÖ Category deleted successfully');\r\n      return successResponse(res, null, constants.MESSAGES.SUCCESS.DELETED);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Category deletion error:', error);\r\n      return errorResponse(res, error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get category hierarchy (tree structure)\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async getCategoryHierarchy(req, res) {\r\n    try {\r\n      console.log('üå≥ [Admin] Building category hierarchy...');\r\n      \r\n      const hierarchy = await CategoryService.buildCategoryHierarchy();\r\n      \r\n      console.log('‚úÖ Category hierarchy built successfully');\r\n      return successResponse(res, hierarchy);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Category hierarchy error:', error);\r\n      return errorResponse(res, error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bulk operations on categories\r\n   * @param {Object} req - Express request object\r\n   * @param {Object} res - Express response object\r\n   */\r\n  async bulkOperations(req, res) {\r\n    try {\r\n      console.log('üì¶ [Admin] Performing bulk operations...');\r\n      \r\n      const { operation, categoryIds, data } = req.body;\r\n      \r\n      if (!operation || !Array.isArray(categoryIds) || categoryIds.length === 0) {\r\n        return validationErrorResponse(res, 'Invalid bulk operation parameters');\r\n      }\r\n\r\n      const result = await CategoryService.performBulkOperation(operation, categoryIds, data);\r\n      \r\n      console.log(`‚úÖ Bulk operation '${operation}' completed on ${categoryIds.length} categories`);\r\n      return successResponse(res, result, `Bulk ${operation} completed successfully`);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Bulk operation error:', error);\r\n      return errorResponse(res, error.message, 400);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new CategoryController();\r\n"
        }
    ]
}