{
    "sourceFile": "backend/src/admin/controllers/content/PageController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753440030118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753440030118,
            "name": "Commit-0",
            "content": "/**\r\n * Page Controller - Admin Content Management\r\n * \r\n * Controller for handling page configurations and content management\r\n * in the new admin structure\r\n */\r\n\r\nconst { PageConfigService } = require('../../services');\r\nconst { ApiResponse, ApiError } = require('../../utils');\r\n\r\nclass PageController {\r\n  /**\r\n   * Get all page configurations\r\n   */\r\n  static async getPages(req, res) {\r\n    try {\r\n      const { page = 1, limit = 10, search } = req.query;\r\n      \r\n      // For now, just get all configs\r\n      const configs = await PageConfigService.getAllPageConfigs();\r\n      \r\n      const response = ApiResponse.success({\r\n        pages: configs,\r\n        pagination: {\r\n          page: parseInt(page),\r\n          limit: parseInt(limit),\r\n          total: configs.length,\r\n          totalPages: Math.ceil(configs.length / limit)\r\n        }\r\n      }, 'Page configurations retrieved successfully');\r\n      \r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      const apiError = error instanceof ApiError ? error : new ApiError(500, error.message);\r\n      res.status(apiError.statusCode).json(ApiResponse.error(apiError.message, apiError.statusCode));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific page configuration\r\n   */\r\n  static async getPageConfig(req, res) {\r\n    try {\r\n      const { pageId } = req.params;\r\n      \r\n      const config = await PageConfigService.getPageConfig(pageId);\r\n      \r\n      if (!config) {\r\n        throw new ApiError(404, `Page configuration not found: ${pageId}`);\r\n      }\r\n      \r\n      const response = ApiResponse.success(config, 'Page configuration retrieved successfully');\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      const apiError = error instanceof ApiError ? error : new ApiError(500, error.message);\r\n      res.status(apiError.statusCode).json(ApiResponse.error(apiError.message, apiError.statusCode));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save page configuration\r\n   */\r\n  static async savePageConfig(req, res) {\r\n    try {\r\n      console.log('💾 === SAVE PAGE CONFIGURATION START ===');\r\n      \r\n      const { pageId } = req.params;\r\n      const configData = req.body;\r\n      \r\n      console.log('Saving config for page:', pageId);\r\n      console.log('Config data:', JSON.stringify(configData, null, 2));\r\n      \r\n      // Save configuration using the service\r\n      const updatedConfig = await PageConfigService.savePageConfig(pageId, configData);\r\n      \r\n      console.log('✅ Page configuration saved and static file updated');\r\n      \r\n      const response = ApiResponse.success({\r\n        config: updatedConfig,\r\n        message: 'Configuration saved and static file updated successfully'\r\n      }, 'Page configuration saved successfully');\r\n      \r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      console.error('❌ Error saving page configuration:', error);\r\n      const apiError = error instanceof ApiError ? error : new ApiError(500, error.message);\r\n      res.status(apiError.statusCode).json(ApiResponse.error(apiError.message, apiError.statusCode));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually refresh static data for a page\r\n   */\r\n  static async refreshStaticData(req, res) {\r\n    try {\r\n      console.log('🔄 === REFRESH STATIC DATA START ===');\r\n      \r\n      const { pageId } = req.params;\r\n      \r\n      console.log('Refreshing static data for page:', pageId);\r\n      \r\n      // Generate static file\r\n      const outputPath = await PageConfigService.generateStaticFile(pageId);\r\n      \r\n      console.log('✅ Static data refreshed successfully');\r\n      \r\n      const response = ApiResponse.success({\r\n        pageId,\r\n        outputPath,\r\n        timestamp: new Date().toISOString()\r\n      }, 'Static data refreshed successfully');\r\n      \r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      console.error('❌ Error refreshing static data:', error);\r\n      const apiError = error instanceof ApiError ? error : new ApiError(500, error.message);\r\n      res.status(apiError.statusCode).json(ApiResponse.error(apiError.message, apiError.statusCode));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete page configuration\r\n   */\r\n  static async deletePageConfig(req, res) {\r\n    try {\r\n      const { pageId } = req.params;\r\n      \r\n      const deletedConfig = await PageConfigService.deletePageConfig(pageId);\r\n      \r\n      const response = ApiResponse.success({\r\n        deletedConfig,\r\n        message: 'Page configuration and static file deleted successfully'\r\n      }, 'Page configuration deleted successfully');\r\n      \r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      const apiError = error instanceof ApiError ? error : new ApiError(500, error.message);\r\n      res.status(apiError.statusCode).json(ApiResponse.error(apiError.message, apiError.statusCode));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get page statistics\r\n   */\r\n  static async getPageStats(req, res) {\r\n    try {\r\n      const configs = await PageConfigService.getAllPageConfigs();\r\n      \r\n      const stats = {\r\n        totalPages: configs.length,\r\n        enabledPages: configs.filter(c => c.isEnabled !== false).length,\r\n        disabledPages: configs.filter(c => c.isEnabled === false).length,\r\n        lastUpdated: configs.reduce((latest, config) => {\r\n          const configDate = new Date(config.updatedAt || config.createdAt);\r\n          return configDate > latest ? configDate : latest;\r\n        }, new Date(0))\r\n      };\r\n      \r\n      const response = ApiResponse.success(stats, 'Page statistics retrieved successfully');\r\n      res.status(200).json(response);\r\n    } catch (error) {\r\n      const apiError = error instanceof ApiError ? error : new ApiError(500, error.message);\r\n      res.status(apiError.statusCode).json(ApiResponse.error(apiError.message, apiError.statusCode));\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = PageController;\r\n"
        }
    ]
}