{
    "sourceFile": "backend/src/admin/middleware/adminAuth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753440030083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753441696960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,24 @@\n  * Handles authentication for admin routes\r\n  */\r\n \r\n const jwt = require('jsonwebtoken');\r\n-const AdminUser = require('../../../models/AdminUser');\r\n-const { constants } = require('../../config');\r\n-const { unauthorizedResponse, forbiddenResponse } = require('../../utils/responseHelpers');\r\n+const AdminUser = require('../../models/AdminUser');\r\n+const { constants } = require('../config');\r\n+const { ApiResponse } = require('../utils');\r\n \r\n /**\r\n+ * Helper functions for auth responses\r\n+ */\r\n+const unauthorizedResponse = (res, message) => {\r\n+  return res.status(401).json(ApiResponse.error(message, 401));\r\n+};\r\n+\r\n+const forbiddenResponse = (res, message) => {\r\n+  return res.status(403).json(ApiResponse.error(message, 403));\r\n+};\r\n+\r\n+/**\r\n  * Admin Authentication Middleware\r\n  * @param {Object} req - Express request object\r\n  * @param {Object} res - Express response object\r\n  * @param {Function} next - Next middleware function\r\n"
                }
            ],
            "date": 1753440030083,
            "name": "Commit-0",
            "content": "/**\r\n * Admin Authentication Middleware\r\n * \r\n * Handles authentication for admin routes\r\n */\r\n\r\nconst jwt = require('jsonwebtoken');\r\nconst AdminUser = require('../../../models/AdminUser');\r\nconst { constants } = require('../../config');\r\nconst { unauthorizedResponse, forbiddenResponse } = require('../../utils/responseHelpers');\r\n\r\n/**\r\n * Admin Authentication Middleware\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst adminAuth = async (req, res, next) => {\r\n  try {\r\n    console.log('🔐 [AdminAuth] Checking admin authentication...');\r\n    \r\n    // Get token from header\r\n    const authHeader = req.header('Authorization');\r\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.substring(7) : authHeader;\r\n    \r\n    if (!token) {\r\n      console.log('❌ [AdminAuth] No token provided');\r\n      return unauthorizedResponse(res, 'Access token required');\r\n    }\r\n\r\n    // Verify token\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    console.log('🔍 [AdminAuth] Token decoded:', { id: decoded.id, role: decoded.role });\r\n\r\n    // Check if user exists and is admin\r\n    const adminUser = await AdminUser.findById(decoded.id).select('-password');\r\n    \r\n    if (!adminUser) {\r\n      console.log('❌ [AdminAuth] Admin user not found');\r\n      return unauthorizedResponse(res, 'Invalid token - user not found');\r\n    }\r\n\r\n    if (!adminUser.status) {\r\n      console.log('❌ [AdminAuth] Admin user is inactive');\r\n      return forbiddenResponse(res, 'Account is inactive');\r\n    }\r\n\r\n    // Check if role is allowed\r\n    if (!constants.AUTH.ALLOWED_ROLES.includes(adminUser.role)) {\r\n      console.log('❌ [AdminAuth] Insufficient role:', adminUser.role);\r\n      return forbiddenResponse(res, 'Insufficient permissions');\r\n    }\r\n\r\n    // Add user to request\r\n    req.user = adminUser;\r\n    req.userRole = adminUser.role;\r\n    \r\n    console.log('✅ [AdminAuth] Authentication successful:', {\r\n      id: adminUser._id,\r\n      email: adminUser.email,\r\n      role: adminUser.role\r\n    });\r\n    \r\n    next();\r\n\r\n  } catch (error) {\r\n    console.error('❌ [AdminAuth] Authentication error:', error);\r\n    \r\n    if (error.name === 'JsonWebTokenError') {\r\n      return unauthorizedResponse(res, 'Invalid token');\r\n    }\r\n    \r\n    if (error.name === 'TokenExpiredError') {\r\n      return unauthorizedResponse(res, 'Token expired');\r\n    }\r\n    \r\n    return unauthorizedResponse(res, 'Authentication failed');\r\n  }\r\n};\r\n\r\n/**\r\n * Check if user is super admin\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst requireSuperAdmin = (req, res, next) => {\r\n  console.log('👑 [AdminAuth] Checking super admin access...');\r\n  \r\n  if (!constants.AUTH.SUPER_ADMIN_ROLES.includes(req.userRole)) {\r\n    console.log('❌ [AdminAuth] Super admin access denied for role:', req.userRole);\r\n    return forbiddenResponse(res, 'Super admin access required');\r\n  }\r\n  \r\n  console.log('✅ [AdminAuth] Super admin access granted');\r\n  next();\r\n};\r\n\r\n/**\r\n * Optional authentication (doesn't fail if no token)\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst optionalAuth = async (req, res, next) => {\r\n  try {\r\n    const authHeader = req.header('Authorization');\r\n    const token = authHeader?.startsWith('Bearer ') ? authHeader.substring(7) : authHeader;\r\n    \r\n    if (token) {\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n      const adminUser = await AdminUser.findById(decoded.id).select('-password');\r\n      \r\n      if (adminUser && adminUser.status && constants.AUTH.ALLOWED_ROLES.includes(adminUser.role)) {\r\n        req.user = adminUser;\r\n        req.userRole = adminUser.role;\r\n      }\r\n    }\r\n    \r\n    next();\r\n  } catch (error) {\r\n    // Continue without authentication\r\n    next();\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  adminAuth,\r\n  requireSuperAdmin,\r\n  optionalAuth\r\n};\r\n"
        }
    ]
}