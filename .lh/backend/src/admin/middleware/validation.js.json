{
    "sourceFile": "backend/src/admin/middleware/validation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753440030084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753441696972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,23 @@\n  * \r\n  * Request validation middleware for admin operations\r\n  */\r\n \r\n-const { validationHelpers } = require('../../utils');\r\n-const { validationErrorResponse } = require('../../utils/responseHelpers');\r\n+const { validationHelpers } = require('../utils');\r\n+const { ApiResponse } = require('../utils');\r\n \r\n /**\r\n+ * Helper function to send validation error response\r\n+ */\r\n+const validationErrorResponse = (res, errors) => {\r\n+  const errorMessage = Array.isArray(errors) \r\n+    ? errors.map(err => err.message || err).join(', ')\r\n+    : errors;\r\n+  \r\n+  return res.status(400).json(ApiResponse.error(errorMessage, 400, { validationErrors: errors }));\r\n+};\r\n+\r\n+/**\r\n  * Validate category creation/update\r\n  * @param {Object} req - Express request object\r\n  * @param {Object} res - Express response object\r\n  * @param {Function} next - Next middleware function\r\n"
                }
            ],
            "date": 1753440030084,
            "name": "Commit-0",
            "content": "/**\r\n * Validation Middleware\r\n * \r\n * Request validation middleware for admin operations\r\n */\r\n\r\nconst { validationHelpers } = require('../../utils');\r\nconst { validationErrorResponse } = require('../../utils/responseHelpers');\r\n\r\n/**\r\n * Validate category creation/update\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst validateCategory = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating category data...');\r\n  \r\n  const errors = [];\r\n  \r\n  // Validate name\r\n  const nameValidation = validationHelpers.validateCategoryName(req.body.name);\r\n  if (!nameValidation.isValid) {\r\n    errors.push(...nameValidation.errors);\r\n  }\r\n  \r\n  // Validate parent ID if provided\r\n  if (req.body.parent && !validationHelpers.isValidObjectId(req.body.parent)) {\r\n    errors.push('Invalid parent category ID');\r\n  }\r\n  \r\n  // Validate image file if uploaded\r\n  if (req.file) {\r\n    const imageValidation = validationHelpers.validateImageFile(req.file);\r\n    if (!imageValidation.isValid) {\r\n      errors.push(...imageValidation.errors);\r\n    }\r\n  }\r\n  \r\n  if (errors.length > 0) {\r\n    console.log('❌ [Validation] Category validation failed:', errors);\r\n    return validationErrorResponse(res, errors);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Category validation passed');\r\n  next();\r\n};\r\n\r\n/**\r\n * Validate MongoDB ObjectId parameter\r\n * @param {string} paramName - Parameter name to validate\r\n * @returns {Function} Middleware function\r\n */\r\nconst validateObjectId = (paramName = 'id') => {\r\n  return (req, res, next) => {\r\n    console.log(`🔍 [Validation] Validating ObjectId parameter: ${paramName}`);\r\n    \r\n    const id = req.params[paramName];\r\n    \r\n    if (!validationHelpers.isValidObjectId(id)) {\r\n      console.log(`❌ [Validation] Invalid ObjectId: ${id}`);\r\n      return validationErrorResponse(res, `Invalid ${paramName} format`);\r\n    }\r\n    \r\n    console.log(`✅ [Validation] ObjectId validation passed: ${id}`);\r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Validate pagination parameters\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst validatePagination = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating pagination parameters...');\r\n  \r\n  const validated = validationHelpers.validatePaginationParams(req.query);\r\n  \r\n  // Replace query parameters with validated values\r\n  req.query.page = validated.page;\r\n  req.query.limit = validated.limit;\r\n  \r\n  console.log('✅ [Validation] Pagination validation passed:', validated);\r\n  next();\r\n};\r\n\r\n/**\r\n * Validate bulk operation request\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst validateBulkOperation = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating bulk operation...');\r\n  \r\n  const validation = validationHelpers.validateBulkOperation(req.body);\r\n  \r\n  if (!validation.isValid) {\r\n    console.log('❌ [Validation] Bulk operation validation failed:', validation.errors);\r\n    return validationErrorResponse(res, validation.errors);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Bulk operation validation passed');\r\n  next();\r\n};\r\n\r\n/**\r\n * Validate admin user creation/update\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst validateAdminUser = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating admin user data...');\r\n  \r\n  const errors = [];\r\n  const { email, password, name, role } = req.body;\r\n  \r\n  // Validate email\r\n  if (!email || !validationHelpers.isValidEmail(email)) {\r\n    errors.push('Valid email is required');\r\n  }\r\n  \r\n  // Validate password (only for creation or when password is being updated)\r\n  if (req.method === 'POST' || password) {\r\n    const passwordValidation = validationHelpers.validatePassword(password);\r\n    if (!passwordValidation.isValid) {\r\n      errors.push(...passwordValidation.errors);\r\n    }\r\n  }\r\n  \r\n  // Validate name\r\n  if (!name || typeof name !== 'string' || name.trim().length < 2) {\r\n    errors.push('Name is required and must be at least 2 characters');\r\n  }\r\n  \r\n  // Validate role\r\n  const allowedRoles = ['admin', 'superadmin', 'manager', 'editor'];\r\n  if (!role || !allowedRoles.includes(role)) {\r\n    errors.push(`Role must be one of: ${allowedRoles.join(', ')}`);\r\n  }\r\n  \r\n  if (errors.length > 0) {\r\n    console.log('❌ [Validation] Admin user validation failed:', errors);\r\n    return validationErrorResponse(res, errors);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Admin user validation passed');\r\n  next();\r\n};\r\n\r\n/**\r\n * Sanitize request body\r\n * @param {Array} fields - Fields to sanitize\r\n * @returns {Function} Middleware function\r\n */\r\nconst sanitizeBody = (fields = []) => {\r\n  return (req, res, next) => {\r\n    console.log('🧹 [Validation] Sanitizing request body...');\r\n    \r\n    fields.forEach(field => {\r\n      if (req.body[field] && typeof req.body[field] === 'string') {\r\n        req.body[field] = validationHelpers.sanitizeString(req.body[field]);\r\n      }\r\n    });\r\n    \r\n    console.log('✅ [Validation] Request body sanitized');\r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Validate page ID parameter\r\n */\r\nconst validatePageId = (req, res, next) => {\r\n  const { pageId } = req.params;\r\n  \r\n  if (!pageId) {\r\n    return validationErrorResponse(res, [{ field: 'pageId', message: 'Page ID is required' }]);\r\n  }\r\n  \r\n  // Check if pageId is a valid string (not just any string)\r\n  const validPageIds = ['home', 'shop', 'about', 'contact', 'corporate'];\r\n  if (!validPageIds.includes(pageId)) {\r\n    return validationErrorResponse(res, [{ field: 'pageId', message: 'Invalid page ID' }]);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Page ID validation passed:', pageId);\r\n  next();\r\n};\r\n\r\n/**\r\n * Validate login credentials\r\n */\r\nconst validateLogin = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating login credentials...');\r\n  \r\n  const errors = [];\r\n  const { username, password } = req.body;\r\n  \r\n  if (!username || username.trim().length < 3) {\r\n    errors.push({ field: 'username', message: 'Username must be at least 3 characters long' });\r\n  }\r\n  \r\n  if (!password || password.length < 6) {\r\n    errors.push({ field: 'password', message: 'Password must be at least 6 characters long' });\r\n  }\r\n  \r\n  if (errors.length > 0) {\r\n    return validationErrorResponse(res, errors);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Login validation passed');\r\n  next();\r\n};\r\n\r\n/**\r\n * Validate password change\r\n */\r\nconst validatePasswordChange = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating password change...');\r\n  \r\n  const errors = [];\r\n  const { currentPassword, newPassword } = req.body;\r\n  \r\n  if (!currentPassword) {\r\n    errors.push({ field: 'currentPassword', message: 'Current password is required' });\r\n  }\r\n  \r\n  if (!newPassword || newPassword.length < 6) {\r\n    errors.push({ field: 'newPassword', message: 'New password must be at least 6 characters long' });\r\n  }\r\n  \r\n  if (errors.length > 0) {\r\n    return validationErrorResponse(res, errors);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Password change validation passed');\r\n  next();\r\n};\r\n\r\n/**\r\n * Validate refresh token\r\n */\r\nconst validateRefreshToken = (req, res, next) => {\r\n  console.log('🔍 [Validation] Validating refresh token...');\r\n  \r\n  const { refreshToken } = req.body;\r\n  \r\n  if (!refreshToken) {\r\n    return validationErrorResponse(res, [{ field: 'refreshToken', message: 'Refresh token is required' }]);\r\n  }\r\n  \r\n  console.log('✅ [Validation] Refresh token validation passed');\r\n  next();\r\n};\r\n\r\nmodule.exports = {\r\n  validateCategory,\r\n  validateObjectId,\r\n  validatePagination,\r\n  validateBulkOperation,\r\n  validateAdminUser,\r\n  validatePageId,\r\n  validateLogin,\r\n  validatePasswordChange,\r\n  validateRefreshToken,\r\n  sanitizeBody\r\n};\r\n"
        }
    ]
}