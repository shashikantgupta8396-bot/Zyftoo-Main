{
    "sourceFile": "backend/src/admin/middleware/rolePermissions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753440030083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753441696959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,19 @@\n  * \r\n  * Checks if user has required permissions for specific operations\r\n  */\r\n \r\n-const { permissions } = require('../../config');\r\n-const { forbiddenResponse } = require('../../utils/responseHelpers');\r\n+const { permissions } = require('../config');\r\n+const { ApiResponse } = require('../utils');\r\n \r\n /**\r\n+ * Helper function for forbidden response\r\n+ */\r\n+const forbiddenResponse = (res, message) => {\r\n+  return res.status(403).json(ApiResponse.error(message, 403));\r\n+};\r\n+\r\n+/**\r\n  * Create permission check middleware\r\n  * @param {string} permission - Required permission\r\n  * @returns {Function} Middleware function\r\n  */\r\n"
                }
            ],
            "date": 1753440030083,
            "name": "Commit-0",
            "content": "/**\r\n * Role-based Permissions Middleware\r\n * \r\n * Checks if user has required permissions for specific operations\r\n */\r\n\r\nconst { permissions } = require('../../config');\r\nconst { forbiddenResponse } = require('../../utils/responseHelpers');\r\n\r\n/**\r\n * Create permission check middleware\r\n * @param {string} permission - Required permission\r\n * @returns {Function} Middleware function\r\n */\r\nconst requirePermission = (permission) => {\r\n  return (req, res, next) => {\r\n    console.log(`üîí [Permissions] Checking permission: ${permission} for role: ${req.userRole}`);\r\n    \r\n    if (!permissions.hasPermission(req.userRole, permission)) {\r\n      console.log(`‚ùå [Permissions] Permission denied: ${permission}`);\r\n      return forbiddenResponse(res, `Permission required: ${permission}`);\r\n    }\r\n    \r\n    console.log(`‚úÖ [Permissions] Permission granted: ${permission}`);\r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Check bulk operation permissions\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst checkBulkPermissions = (req, res, next) => {\r\n  const { operation } = req.body;\r\n  const module = req.route.path.includes('categories') ? 'categories' : 'products';\r\n  \r\n  console.log(`üîí [Permissions] Checking bulk permission for ${module}:${operation}`);\r\n  \r\n  if (!permissions.canPerformBulkOperations(req.userRole, module)) {\r\n    console.log(`‚ùå [Permissions] Bulk operation denied for ${module}`);\r\n    return forbiddenResponse(res, 'Bulk operations not permitted');\r\n  }\r\n  \r\n  console.log(`‚úÖ [Permissions] Bulk operation permitted for ${module}`);\r\n  next();\r\n};\r\n\r\n/**\r\n * Resource ownership check (for user management)\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst checkResourceOwnership = (req, res, next) => {\r\n  const resourceUserId = req.params.userId || req.params.id;\r\n  const currentUserId = req.user._id.toString();\r\n  \r\n  console.log(`üîí [Permissions] Checking resource ownership: ${resourceUserId} vs ${currentUserId}`);\r\n  \r\n  // Super admins can access any resource\r\n  if (permissions.ROLE_PERMISSIONS.superadmin.includes('*') || \r\n      req.userRole === 'superadmin' || req.userRole === 'SuperAdmin') {\r\n    console.log('‚úÖ [Permissions] Super admin access granted');\r\n    return next();\r\n  }\r\n  \r\n  // Users can only access their own resources\r\n  if (resourceUserId === currentUserId) {\r\n    console.log('‚úÖ [Permissions] Resource ownership verified');\r\n    return next();\r\n  }\r\n  \r\n  console.log('‚ùå [Permissions] Resource ownership denied');\r\n  return forbiddenResponse(res, 'Access denied - insufficient permissions');\r\n};\r\n\r\n/**\r\n * Dynamic permission check based on route\r\n * @param {Object} req - Express request object\r\n * @param {Object} res - Express response object\r\n * @param {Function} next - Next middleware function\r\n */\r\nconst dynamicPermissionCheck = (req, res, next) => {\r\n  const method = req.method.toLowerCase();\r\n  const path = req.route.path;\r\n  \r\n  // Map HTTP methods to permission actions\r\n  const actionMap = {\r\n    'get': 'read',\r\n    'post': 'create',\r\n    'put': 'update',\r\n    'patch': 'update',\r\n    'delete': 'delete'\r\n  };\r\n  \r\n  // Determine resource type from path\r\n  let resource = '';\r\n  if (path.includes('categories')) resource = 'categories';\r\n  else if (path.includes('products')) resource = 'products';\r\n  else if (path.includes('users')) resource = 'users';\r\n  else if (path.includes('orders')) resource = 'orders';\r\n  else if (path.includes('pages')) resource = 'content';\r\n  \r\n  if (resource && actionMap[method]) {\r\n    const permission = `${resource}:${actionMap[method]}`;\r\n    return requirePermission(permission)(req, res, next);\r\n  }\r\n  \r\n  // If we can't determine permission, allow access (fallback)\r\n  console.log('‚ö†Ô∏è [Permissions] Could not determine permission, allowing access');\r\n  next();\r\n};\r\n\r\nmodule.exports = {\r\n  requirePermission,\r\n  checkBulkPermissions,\r\n  checkResourceOwnership,\r\n  dynamicPermissionCheck\r\n};\r\n"
        }
    ]
}