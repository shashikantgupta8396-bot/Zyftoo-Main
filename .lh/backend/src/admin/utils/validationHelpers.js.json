{
    "sourceFile": "backend/src/admin/utils/validationHelpers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753440030083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753440030083,
            "name": "Commit-0",
            "content": "/**\r\n * Validation Helper Utilities\r\n * \r\n * Common validation functions for admin operations\r\n */\r\n\r\nconst { constants } = require('../config');\r\n\r\n/**\r\n * Validate MongoDB ObjectId\r\n * @param {string} id - ID to validate\r\n * @returns {boolean}\r\n */\r\nconst isValidObjectId = (id) => {\r\n  return /^[0-9a-fA-F]{24}$/.test(id);\r\n};\r\n\r\n/**\r\n * Validate category name\r\n * @param {string} name - Category name\r\n * @returns {Object} Validation result\r\n */\r\nconst validateCategoryName = (name) => {\r\n  const errors = [];\r\n  \r\n  if (!name || typeof name !== 'string') {\r\n    errors.push('Category name is required');\r\n  } else {\r\n    const trimmedName = name.trim();\r\n    if (trimmedName.length < 2) {\r\n      errors.push('Category name must be at least 2 characters long');\r\n    }\r\n    if (trimmedName.length > 100) {\r\n      errors.push('Category name must not exceed 100 characters');\r\n    }\r\n    if (!/^[a-zA-Z0-9\\s\\-_&]+$/.test(trimmedName)) {\r\n      errors.push('Category name contains invalid characters');\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validate image file\r\n * @param {Object} file - Uploaded file\r\n * @returns {Object} Validation result\r\n */\r\nconst validateImageFile = (file) => {\r\n  const errors = [];\r\n  \r\n  if (!file) {\r\n    return { isValid: true, errors: [] }; // Image is optional\r\n  }\r\n  \r\n  // Check file size\r\n  if (file.size > constants.UPLOAD.MAX_FILE_SIZE) {\r\n    errors.push(`File size must not exceed ${constants.UPLOAD.MAX_FILE_SIZE / (1024 * 1024)}MB`);\r\n  }\r\n  \r\n  // Check file type\r\n  if (!constants.UPLOAD.ALLOWED_IMAGE_TYPES.includes(file.mimetype)) {\r\n    errors.push(`File type must be one of: ${constants.UPLOAD.ALLOWED_IMAGE_TYPES.join(', ')}`);\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Validate pagination parameters\r\n * @param {Object} params - Pagination parameters\r\n * @returns {Object} Validated parameters\r\n */\r\nconst validatePaginationParams = (params) => {\r\n  const {\r\n    page = constants.PAGINATION.DEFAULT_PAGE,\r\n    limit = constants.PAGINATION.DEFAULT_LIMIT\r\n  } = params;\r\n  \r\n  const validatedPage = Math.max(1, parseInt(page) || 1);\r\n  const validatedLimit = Math.min(\r\n    constants.PAGINATION.MAX_LIMIT,\r\n    Math.max(1, parseInt(limit) || constants.PAGINATION.DEFAULT_LIMIT)\r\n  );\r\n  \r\n  return {\r\n    page: validatedPage,\r\n    limit: validatedLimit\r\n  };\r\n};\r\n\r\n/**\r\n * Validate email format\r\n * @param {string} email - Email to validate\r\n * @returns {boolean}\r\n */\r\nconst isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validate password strength\r\n * @param {string} password - Password to validate\r\n * @returns {Object} Validation result\r\n */\r\nconst validatePassword = (password) => {\r\n  const errors = [];\r\n  \r\n  if (!password || typeof password !== 'string') {\r\n    errors.push('Password is required');\r\n    return { isValid: false, errors };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    errors.push('Password must be at least 8 characters long');\r\n  }\r\n  \r\n  if (!/(?=.*[a-z])/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  \r\n  if (!/(?=.*[A-Z])/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  \r\n  if (!/(?=.*\\d)/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  \r\n  if (!/(?=.*[@$!%*?&])/.test(password)) {\r\n    errors.push('Password must contain at least one special character (@$!%*?&)');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Sanitize string input\r\n * @param {string} str - String to sanitize\r\n * @returns {string}\r\n */\r\nconst sanitizeString = (str) => {\r\n  if (!str || typeof str !== 'string') return '';\r\n  \r\n  return str.trim()\r\n    .replace(/[<>]/g, '') // Remove potential HTML tags\r\n    .replace(/[^\\w\\s\\-_.,!?@#$%^&*()+=]/g, ''); // Remove special characters except common ones\r\n};\r\n\r\n/**\r\n * Validate bulk operation request\r\n * @param {Object} requestBody - Request body\r\n * @returns {Object} Validation result\r\n */\r\nconst validateBulkOperation = (requestBody) => {\r\n  const { operation, categoryIds, data } = requestBody;\r\n  const errors = [];\r\n  \r\n  if (!operation || typeof operation !== 'string') {\r\n    errors.push('Operation is required');\r\n  } else if (!['delete', 'updateStatus', 'updateCategory'].includes(operation)) {\r\n    errors.push('Invalid operation type');\r\n  }\r\n  \r\n  if (!Array.isArray(categoryIds) || categoryIds.length === 0) {\r\n    errors.push('Category IDs array is required and must not be empty');\r\n  } else {\r\n    const invalidIds = categoryIds.filter(id => !isValidObjectId(id));\r\n    if (invalidIds.length > 0) {\r\n      errors.push('Some category IDs are invalid');\r\n    }\r\n  }\r\n  \r\n  if (operation === 'updateStatus' && (!data || typeof data.status !== 'boolean')) {\r\n    errors.push('Status data is required for updateStatus operation');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nmodule.exports = {\r\n  isValidObjectId,\r\n  validateCategoryName,\r\n  validateImageFile,\r\n  validatePaginationParams,\r\n  isValidEmail,\r\n  validatePassword,\r\n  sanitizeString,\r\n  validateBulkOperation\r\n};\r\n"
        }
    ]
}