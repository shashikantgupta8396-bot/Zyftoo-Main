{
    "sourceFile": "backend/src/admin/utils/responseHelpers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753440030082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753440030082,
            "name": "Commit-0",
            "content": "/**\r\n * Response Helper Utilities\r\n * \r\n * Standardized response formats for admin API\r\n */\r\n\r\n/**\r\n * Send success response\r\n * @param {Object} res - Express response object\r\n * @param {*} data - Response data\r\n * @param {string} message - Success message\r\n * @param {number} statusCode - HTTP status code\r\n */\r\nconst successResponse = (res, data = null, message = 'Success', statusCode = 200) => {\r\n  return res.status(statusCode).json({\r\n    success: true,\r\n    message,\r\n    data,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\n/**\r\n * Send error response\r\n * @param {Object} res - Express response object\r\n * @param {string} message - Error message\r\n * @param {number} statusCode - HTTP status code\r\n * @param {*} details - Additional error details\r\n */\r\nconst errorResponse = (res, message = 'An error occurred', statusCode = 500, details = null) => {\r\n  return res.status(statusCode).json({\r\n    success: false,\r\n    error: {\r\n      message,\r\n      details,\r\n      statusCode\r\n    },\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\n/**\r\n * Send validation error response\r\n * @param {Object} res - Express response object\r\n * @param {string|Array} errors - Validation errors\r\n */\r\nconst validationErrorResponse = (res, errors) => {\r\n  const errorMessage = Array.isArray(errors) ? errors : [errors];\r\n  \r\n  return res.status(422).json({\r\n    success: false,\r\n    error: {\r\n      message: 'Validation failed',\r\n      details: errorMessage,\r\n      statusCode: 422\r\n    },\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\n/**\r\n * Send not found response\r\n * @param {Object} res - Express response object\r\n * @param {string} resource - Resource name\r\n */\r\nconst notFoundResponse = (res, resource = 'Resource') => {\r\n  return res.status(404).json({\r\n    success: false,\r\n    error: {\r\n      message: `${resource} not found`,\r\n      statusCode: 404\r\n    },\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\n/**\r\n * Send unauthorized response\r\n * @param {Object} res - Express response object\r\n * @param {string} message - Custom message\r\n */\r\nconst unauthorizedResponse = (res, message = 'Unauthorized access') => {\r\n  return res.status(401).json({\r\n    success: false,\r\n    error: {\r\n      message,\r\n      statusCode: 401\r\n    },\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\n/**\r\n * Send forbidden response\r\n * @param {Object} res - Express response object\r\n * @param {string} message - Custom message\r\n */\r\nconst forbiddenResponse = (res, message = 'Insufficient permissions') => {\r\n  return res.status(403).json({\r\n    success: false,\r\n    error: {\r\n      message,\r\n      statusCode: 403\r\n    },\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\n/**\r\n * Send paginated response\r\n * @param {Object} res - Express response object\r\n * @param {Object} data - Paginated data with pagination info\r\n * @param {string} message - Success message\r\n */\r\nconst paginatedResponse = (res, data, message = 'Data fetched successfully') => {\r\n  return res.status(200).json({\r\n    success: true,\r\n    message,\r\n    data: data.data,\r\n    pagination: data.pagination,\r\n    timestamp: new Date().toISOString()\r\n  });\r\n};\r\n\r\nmodule.exports = {\r\n  successResponse,\r\n  errorResponse,\r\n  validationErrorResponse,\r\n  notFoundResponse,\r\n  unauthorizedResponse,\r\n  forbiddenResponse,\r\n  paginatedResponse\r\n};\r\n"
        }
    ]
}