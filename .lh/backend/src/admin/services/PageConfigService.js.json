{
    "sourceFile": "backend/src/admin/services/PageConfigService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753440030085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753440030085,
            "name": "Commit-0",
            "content": "/**\r\n * Page Configuration Service\r\n * \r\n * Service for handling page configurations and static file generation\r\n */\r\n\r\nconst PageConfig = require('../../models/PageConfig');\r\nconst Category = require('../../models/Category');\r\nconst FileService = require('./FileService');\r\nconst path = require('path');\r\nconst { ApiError, generateImageFallback } = require('../utils');\r\n\r\nclass PageConfigService {\r\n  /**\r\n   * Get page configuration\r\n   */\r\n  static async getPageConfig(pageId) {\r\n    try {\r\n      const config = await PageConfig.findOne({ pageId }).populate([\r\n        {\r\n          path: 'categories.category',\r\n          model: 'Category',\r\n          populate: {\r\n            path: 'subcategories',\r\n            model: 'Category'\r\n          }\r\n        }\r\n      ]);\r\n\r\n      return config;\r\n    } catch (error) {\r\n      throw new ApiError(500, `Failed to get page config: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save page configuration\r\n   */\r\n  static async savePageConfig(pageId, configData) {\r\n    try {\r\n      const config = await PageConfig.findOneAndUpdate(\r\n        { pageId },\r\n        {\r\n          pageId,\r\n          ...configData,\r\n          updatedAt: new Date()\r\n        },\r\n        { \r\n          upsert: true, \r\n          new: true,\r\n          runValidators: true\r\n        }\r\n      );\r\n\r\n      // After saving, update the static file\r\n      await this.generateStaticFile(pageId);\r\n\r\n      return config;\r\n    } catch (error) {\r\n      throw new ApiError(500, `Failed to save page config: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate static file for a page\r\n   */\r\n  static async generateStaticFile(pageId) {\r\n    try {\r\n      console.log(`🔄 Generating static file for page: ${pageId}`);\r\n\r\n      // Get page configuration with populated data\r\n      const config = await this.getPageConfig(pageId);\r\n      \r\n      if (!config) {\r\n        throw new ApiError(404, `Page configuration not found: ${pageId}`);\r\n      }\r\n\r\n      // Transform the data for frontend\r\n      const staticData = await this.transformConfigToStaticData(config);\r\n\r\n      // Determine output file path based on page ID\r\n      const outputPath = this.getStaticFilePath(pageId);\r\n\r\n      // Create backup of existing file\r\n      await FileService.createBackup(outputPath);\r\n\r\n      // Generate the static file\r\n      await FileService.generateStaticDataFile(\r\n        staticData,\r\n        outputPath,\r\n        {\r\n          varName: this.getVariableName(pageId),\r\n          includeMetadata: true,\r\n          prettify: true\r\n        }\r\n      );\r\n\r\n      // Clean old backups\r\n      await FileService.cleanOldBackups(\r\n        path.dirname(outputPath),\r\n        path.basename(outputPath, '.js')\r\n      );\r\n\r\n      console.log(`✅ Static file generated: ${outputPath}`);\r\n      return outputPath;\r\n\r\n    } catch (error) {\r\n      console.error(`❌ Error generating static file:`, error);\r\n      throw new ApiError(500, `Failed to generate static file: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform page config to static data format\r\n   */\r\n  static async transformConfigToStaticData(config) {\r\n    const transformCategory = (category) => {\r\n      if (!category) return null;\r\n\r\n      const imageUrl = category.image || generateImageFallback(category.name, 'category');\r\n      \r\n      return {\r\n        _id: category._id.toString(),\r\n        name: category.name,\r\n        description: category.description || '',\r\n        image: imageUrl,\r\n        slug: category.slug,\r\n        isActive: category.isActive !== false,\r\n        subcategories: category.subcategories?.map(transformCategory).filter(Boolean) || []\r\n      };\r\n    };\r\n\r\n    const staticData = {\r\n      pageId: config.pageId,\r\n      isEnabled: config.isEnabled !== false,\r\n      categories: [],\r\n      metadata: {\r\n        totalCategories: 0,\r\n        totalSubcategories: 0,\r\n        lastUpdated: config.updatedAt || new Date(),\r\n        generatedAt: new Date(),\r\n        version: '1.0'\r\n      }\r\n    };\r\n\r\n    // Transform categories\r\n    if (config.categories && config.categories.length > 0) {\r\n      for (const configCategory of config.categories) {\r\n        if (!configCategory.category) continue;\r\n\r\n        const transformedCategory = transformCategory(configCategory.category);\r\n        if (transformedCategory) {\r\n          // Override with config-specific settings\r\n          transformedCategory.order = configCategory.order || 0;\r\n          transformedCategory.isVisible = configCategory.isVisible !== false;\r\n          \r\n          // Filter subcategories based on config\r\n          if (configCategory.subcategories && configCategory.subcategories.length > 0) {\r\n            const visibleSubcategories = transformedCategory.subcategories.filter(sub => \r\n              configCategory.subcategories.some(configSub => \r\n                configSub.subcategory?.toString() === sub._id && \r\n                configSub.isVisible !== false\r\n              )\r\n            );\r\n            transformedCategory.subcategories = visibleSubcategories;\r\n          }\r\n\r\n          staticData.categories.push(transformedCategory);\r\n        }\r\n      }\r\n\r\n      // Sort categories by order\r\n      staticData.categories.sort((a, b) => (a.order || 0) - (b.order || 0));\r\n    }\r\n\r\n    // Update metadata\r\n    staticData.metadata.totalCategories = staticData.categories.length;\r\n    staticData.metadata.totalSubcategories = staticData.categories.reduce(\r\n      (total, cat) => total + (cat.subcategories?.length || 0), \r\n      0\r\n    );\r\n\r\n    return staticData;\r\n  }\r\n\r\n  /**\r\n   * Get static file path for a page\r\n   */\r\n  static getStaticFilePath(pageId) {\r\n    const frontendDataPath = path.join(\r\n      __dirname, \r\n      '../../../../Ninico/data'\r\n    );\r\n\r\n    switch (pageId) {\r\n      case 'home':\r\n        return path.join(frontendDataPath, 'giftPageCategories.js');\r\n      case 'shop':\r\n        return path.join(frontendDataPath, 'shopPageCategories.js');\r\n      default:\r\n        return path.join(frontendDataPath, `${pageId}PageCategories.js`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get JavaScript variable name for a page\r\n   */\r\n  static getVariableName(pageId) {\r\n    switch (pageId) {\r\n      case 'home':\r\n        return 'giftCategories';\r\n      case 'shop':\r\n        return 'shopCategories';\r\n      default:\r\n        return `${pageId}Categories`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all page configurations\r\n   */\r\n  static async getAllPageConfigs() {\r\n    try {\r\n      const configs = await PageConfig.find({}).populate([\r\n        {\r\n          path: 'categories.category',\r\n          model: 'Category'\r\n        }\r\n      ]);\r\n\r\n      return configs;\r\n    } catch (error) {\r\n      throw new ApiError(500, `Failed to get page configs: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete page configuration\r\n   */\r\n  static async deletePageConfig(pageId) {\r\n    try {\r\n      const result = await PageConfig.findOneAndDelete({ pageId });\r\n      \r\n      if (!result) {\r\n        throw new ApiError(404, `Page configuration not found: ${pageId}`);\r\n      }\r\n\r\n      // Optionally delete the static file\r\n      const staticFilePath = this.getStaticFilePath(pageId);\r\n      await FileService.deleteFile(staticFilePath);\r\n\r\n      return result;\r\n    } catch (error) {\r\n      throw new ApiError(500, `Failed to delete page config: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = PageConfigService;\r\n"
        }
    ]
}