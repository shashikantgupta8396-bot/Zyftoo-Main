{
    "sourceFile": "backend/src/utils/frontendIntegrationGuide.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831493450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831493450,
            "name": "Commit-0",
            "content": "/**\r\n * Frontend Encryption Utility\r\n * This utility can be used in the React frontend to encrypt/decrypt API communications\r\n * \r\n * Installation required in frontend:\r\n * npm install crypto-js\r\n */\r\n\r\n// Example implementation for React frontend\r\nconst frontendCryptoExample = `\r\n// utils/cryptoUtils.js (Frontend)\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst ENCRYPTION_SECRET = process.env.NEXT_PUBLIC_ENCRYPTION_SECRET || 'aes256-encryption-secret-key-32-chars-long!';\r\n\r\nexport const encrypt = (data) => {\r\n  try {\r\n    const stringData = typeof data === 'string' ? data : JSON.stringify(data);\r\n    return CryptoJS.AES.encrypt(stringData, ENCRYPTION_SECRET).toString();\r\n  } catch (error) {\r\n    console.error('Encryption error:', error);\r\n    throw new Error('Failed to encrypt data');\r\n  }\r\n};\r\n\r\nexport const decrypt = (encryptedData) => {\r\n  try {\r\n    const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_SECRET);\r\n    const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n    \r\n    if (!decryptedData) {\r\n      throw new Error('Failed to decrypt data');\r\n    }\r\n    \r\n    try {\r\n      return JSON.parse(decryptedData);\r\n    } catch (parseError) {\r\n      return decryptedData;\r\n    }\r\n  } catch (error) {\r\n    console.error('Decryption error:', error);\r\n    throw new Error('Failed to decrypt data');\r\n  }\r\n};\r\n\r\n// API utility with encryption\r\nexport const encryptedApiCall = async (url, options = {}) => {\r\n  try {\r\n    // Encrypt request body if present\r\n    if (options.body) {\r\n      const encryptedBody = encrypt(options.body);\r\n      options.body = JSON.stringify({ body: encryptedBody });\r\n    }\r\n\r\n    // Make API call\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers\r\n      }\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    // Decrypt response if encrypted\r\n    if (data.body && typeof data.body === 'string') {\r\n      const decryptedResponse = decrypt(data.body);\r\n      return {\r\n        ...data,\r\n        ...decryptedResponse\r\n      };\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Encrypted API call error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Usage examples:\r\n\r\n// 1. Login with encryption\r\nconst loginUser = async (credentials) => {\r\n  return await encryptedApiCall('/api/v1/auth/login', {\r\n    method: 'POST',\r\n    body: credentials,\r\n    headers: {\r\n      'Authorization': \\`Bearer \\${token}\\`\r\n    }\r\n  });\r\n};\r\n\r\n// 2. Register with encryption\r\nconst registerUser = async (userData) => {\r\n  return await encryptedApiCall('/api/v1/auth/register', {\r\n    method: 'POST',\r\n    body: userData\r\n  });\r\n};\r\n\r\n// 3. Get profile with encrypted response\r\nconst getUserProfile = async (token) => {\r\n  return await encryptedApiCall('/api/v1/auth/profile', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': \\`Bearer \\${token}\\`\r\n    }\r\n  });\r\n};\r\n`;\r\n\r\n/**\r\n * Postman/Testing Examples\r\n */\r\nconst postmanExamples = `\r\n// Postman Pre-request Script for encryption\r\nconst CryptoJS = require('crypto-js');\r\nconst ENCRYPTION_SECRET = 'aes256-encryption-secret-key-32-chars-long!';\r\n\r\n// Get the request body\r\nconst requestBody = JSON.parse(pm.request.body.raw);\r\n\r\n// Encrypt the body\r\nconst encryptedBody = CryptoJS.AES.encrypt(JSON.stringify(requestBody), ENCRYPTION_SECRET).toString();\r\n\r\n// Set the encrypted body\r\npm.request.body.update({\r\n  mode: 'raw',\r\n  raw: JSON.stringify({ body: encryptedBody })\r\n});\r\n\r\n// Postman Test Script for decryption\r\nconst CryptoJS = require('crypto-js');\r\nconst ENCRYPTION_SECRET = 'aes256-encryption-secret-key-32-chars-long!';\r\n\r\n// Get the response\r\nconst responseJson = pm.response.json();\r\n\r\nif (responseJson.body) {\r\n  // Decrypt the response\r\n  const decryptedBytes = CryptoJS.AES.decrypt(responseJson.body, ENCRYPTION_SECRET);\r\n  const decryptedData = JSON.parse(decryptedBytes.toString(CryptoJS.enc.Utf8));\r\n  \r\n  console.log('Decrypted Response:', decryptedData);\r\n  \r\n  // Set as environment variable for next requests\r\n  pm.environment.set('decryptedResponse', JSON.stringify(decryptedData));\r\n}\r\n`;\r\n\r\n/**\r\n * cURL Examples for testing\r\n */\r\nconst curlExamples = `\r\n# Test health endpoint (no encryption)\r\ncurl -X GET http://localhost:5000/health\r\n\r\n# Test login with encryption (you'll need to encrypt the body first)\r\ncurl -X POST http://localhost:5000/api/v1/auth/login \\\\\r\n  -H \"Content-Type: application/json\" \\\\\r\n  -d '{\"body\":\"U2FsdGVkX19...\"}'  # This should be the encrypted JSON\r\n\r\n# Test with legacy endpoint (no encryption required)\r\ncurl -X POST http://localhost:5000/api/auth/login \\\\\r\n  -H \"Content-Type: application/json\" \\\\\r\n  -d '{\"email\":\"user@example.com\",\"password\":\"password123\"}'\r\n`;\r\n\r\n/**\r\n * Environment Variables for Frontend\r\n */\r\nconst frontendEnvExample = `\r\n# .env.local (Next.js frontend)\r\nNEXT_PUBLIC_API_URL=http://localhost:5000\r\nNEXT_PUBLIC_ENCRYPTION_SECRET=aes256-encryption-secret-key-32-chars-long!\r\nNEXT_PUBLIC_API_VERSION=v1\r\n`;\r\n\r\n/**\r\n * React Hook Example for Encrypted Auth\r\n */\r\nconst reactHookExample = `\r\n// hooks/useEncryptedAuth.js\r\nimport { useState, useContext } from 'react';\r\nimport { encryptedApiCall } from '../utils/cryptoUtils';\r\n\r\nexport const useEncryptedAuth = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await encryptedApiCall('/api/v1/auth/login', {\r\n        method: 'POST',\r\n        body: credentials\r\n      });\r\n\r\n      if (response.success) {\r\n        // Store token securely\r\n        localStorage.setItem('token', response.token);\r\n        return response;\r\n      } else {\r\n        throw new Error(response.message || 'Login failed');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await encryptedApiCall('/api/v1/auth/register', {\r\n        method: 'POST',\r\n        body: userData\r\n      });\r\n\r\n      if (response.success) {\r\n        localStorage.setItem('token', response.token);\r\n        return response;\r\n      } else {\r\n        throw new Error(response.message || 'Registration failed');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { login, register, loading, error };\r\n};\r\n`;\r\n\r\nmodule.exports = {\r\n  frontendCryptoExample,\r\n  postmanExamples,\r\n  curlExamples,\r\n  frontendEnvExample,\r\n  reactHookExample\r\n};\r\n"
        }
    ]
}