{
    "sourceFile": "backend/src/utils/validation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831493454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831493454,
            "name": "Commit-0",
            "content": "const Joi = require('joi');\r\n\r\n/**\r\n * Validation schemas for different endpoints\r\n */\r\n\r\n// User authentication schemas\r\nconst authSchemas = {\r\n  register: Joi.object({\r\n    name: Joi.string().min(2).max(60).required().messages({\r\n      'string.empty': 'Name is required',\r\n      'string.min': 'Name must be at least 2 characters',\r\n      'string.max': 'Name must not exceed 60 characters'\r\n    }),\r\n    email: Joi.string().email().optional().messages({\r\n      'string.email': 'Please provide a valid email address'\r\n    }),\r\n    phone: Joi.string().pattern(/^[0-9]{10}$/).required().messages({\r\n      'string.pattern.base': 'Phone number must be 10 digits',\r\n      'string.empty': 'Phone number is required'\r\n    }),\r\n    password: Joi.string().min(6).max(128).required().messages({\r\n      'string.min': 'Password must be at least 6 characters',\r\n      'string.max': 'Password must not exceed 128 characters',\r\n      'string.empty': 'Password is required'\r\n    }),\r\n    confirmPassword: Joi.string().valid(Joi.ref('password')).required().messages({\r\n      'any.only': 'Confirm password must match password',\r\n      'string.empty': 'Confirm password is required'\r\n    }),\r\n    otp: Joi.string().length(6).pattern(/^[0-9]+$/).required().messages({\r\n      'string.length': 'OTP must be 6 digits',\r\n      'string.pattern.base': 'OTP must contain only numbers',\r\n      'string.empty': 'OTP is required'\r\n    }),\r\n    userType: Joi.string().valid('individual', 'corporate').required().messages({\r\n      'any.only': 'User type must be either individual or corporate',\r\n      'string.empty': 'User type is required'\r\n    }),\r\n    role: Joi.string().valid('user', 'admin', 'tempAdmin').optional(),\r\n    gender: Joi.string().valid('male', 'female', 'other').required().messages({\r\n      'any.only': 'Gender must be male, female, or other',\r\n      'string.empty': 'Gender is required'\r\n    }),\r\n    dob: Joi.date().required().messages({\r\n      'date.base': 'Date of birth must be a valid date',\r\n      'any.required': 'Date of birth is required'\r\n    }),\r\n    pincode: Joi.string().pattern(/^[0-9]{6}$/).required().messages({\r\n      'string.pattern.base': 'Pincode must be 6 digits',\r\n      'string.empty': 'Pincode is required'\r\n    }),\r\n    companyDetails: Joi.when('userType', {\r\n      is: 'corporate',\r\n      then: Joi.object({\r\n        companyName: Joi.string().required(),\r\n        gstNumber: Joi.string().required(),\r\n        address: Joi.string().required()\r\n      }).required(),\r\n      otherwise: Joi.optional()\r\n    })\r\n  }),\r\n\r\n  login: Joi.object({\r\n    email: Joi.string().email().optional().messages({\r\n      'string.email': 'Please provide a valid email address'\r\n    }),\r\n    phone: Joi.string().pattern(/^[0-9]{10}$/).optional().messages({\r\n      'string.pattern.base': 'Phone number must be 10 digits'\r\n    }),\r\n    password: Joi.string().required().messages({\r\n      'string.empty': 'Password is required'\r\n    })\r\n  }).or('email', 'phone').messages({\r\n    'object.missing': 'Either email or phone is required'\r\n  }),\r\n\r\n  forgotPassword: Joi.object({\r\n    email: Joi.string().email().required().messages({\r\n      'string.email': 'Please provide a valid email address',\r\n      'string.empty': 'Email is required'\r\n    })\r\n  }),\r\n\r\n  resetPassword: Joi.object({\r\n    password: Joi.string().min(6).max(128).required().messages({\r\n      'string.min': 'Password must be at least 6 characters',\r\n      'string.max': 'Password must not exceed 128 characters',\r\n      'string.empty': 'Password is required'\r\n    })\r\n  })\r\n};\r\n\r\n// Product schemas\r\nconst productSchemas = {\r\n  create: Joi.object({\r\n    name: Joi.string().min(2).max(100).required().messages({\r\n      'string.empty': 'Product name is required',\r\n      'string.min': 'Product name must be at least 2 characters',\r\n      'string.max': 'Product name must not exceed 100 characters'\r\n    }),\r\n    description: Joi.string().max(2000).optional(),\r\n    price: Joi.number().positive().required().messages({\r\n      'number.positive': 'Price must be a positive number',\r\n      'any.required': 'Price is required'\r\n    }),\r\n    category: Joi.string().required().messages({\r\n      'string.empty': 'Category is required'\r\n    }),\r\n    stock: Joi.number().integer().min(0).required().messages({\r\n      'number.min': 'Stock cannot be negative',\r\n      'any.required': 'Stock quantity is required'\r\n    }),\r\n    images: Joi.array().items(Joi.string().uri()).optional()\r\n  }),\r\n\r\n  update: Joi.object({\r\n    name: Joi.string().min(2).max(100).optional(),\r\n    description: Joi.string().max(2000).optional(),\r\n    price: Joi.number().positive().optional(),\r\n    category: Joi.string().optional(),\r\n    stock: Joi.number().integer().min(0).optional(),\r\n    images: Joi.array().items(Joi.string().uri()).optional()\r\n  })\r\n};\r\n\r\n// Order schemas\r\nconst orderSchemas = {\r\n  create: Joi.object({\r\n    items: Joi.array().items(\r\n      Joi.object({\r\n        product: Joi.string().required(),\r\n        quantity: Joi.number().integer().min(1).required(),\r\n        price: Joi.number().positive().required()\r\n      })\r\n    ).min(1).required().messages({\r\n      'array.min': 'Order must contain at least one item'\r\n    }),\r\n    shippingAddress: Joi.object({\r\n      street: Joi.string().required(),\r\n      city: Joi.string().required(),\r\n      state: Joi.string().required(),\r\n      zipCode: Joi.string().required(),\r\n      country: Joi.string().required()\r\n    }).required(),\r\n    paymentMethod: Joi.string().valid('credit_card', 'debit_card', 'paypal', 'cash_on_delivery').required()\r\n  })\r\n};\r\n\r\n// User profile schemas\r\nconst userSchemas = {\r\n  updateProfile: Joi.object({\r\n    firstName: Joi.string().min(2).max(30).optional(),\r\n    lastName: Joi.string().min(2).max(30).optional(),\r\n    phone: Joi.string().pattern(/^[0-9]{10}$/).optional(),\r\n    dateOfBirth: Joi.date().optional(),\r\n    gender: Joi.string().valid('male', 'female', 'other').optional()\r\n  }),\r\n\r\n  changePassword: Joi.object({\r\n    currentPassword: Joi.string().required().messages({\r\n      'string.empty': 'Current password is required'\r\n    }),\r\n    newPassword: Joi.string().min(6).max(128).required().messages({\r\n      'string.min': 'New password must be at least 6 characters',\r\n      'string.max': 'New password must not exceed 128 characters',\r\n      'string.empty': 'New password is required'\r\n    })\r\n  })\r\n};\r\n\r\n// Address schemas\r\nconst addressSchemas = {\r\n  create: Joi.object({\r\n    type: Joi.string().valid('home', 'work', 'other').required(),\r\n    street: Joi.string().min(5).max(200).required(),\r\n    city: Joi.string().min(2).max(50).required(),\r\n    state: Joi.string().min(2).max(50).required(),\r\n    zipCode: Joi.string().min(5).max(10).required(),\r\n    country: Joi.string().min(2).max(50).required(),\r\n    isDefault: Joi.boolean().optional()\r\n  })\r\n};\r\n\r\n// OTP schemas\r\nconst otpSchemas = {\r\n  send: Joi.object({\r\n    email: Joi.string().email().required().messages({\r\n      'string.email': 'Please provide a valid email address',\r\n      'string.empty': 'Email is required'\r\n    }),\r\n    purpose: Joi.string().valid('registration', 'password_reset', 'login', 'email_verification').required()\r\n  }),\r\n\r\n  verify: Joi.object({\r\n    email: Joi.string().email().required(),\r\n    otp: Joi.string().length(6).pattern(/^[0-9]+$/).required().messages({\r\n      'string.length': 'OTP must be 6 digits',\r\n      'string.pattern.base': 'OTP must contain only numbers'\r\n    }),\r\n    purpose: Joi.string().valid('registration', 'password_reset', 'login', 'email_verification').required()\r\n  })\r\n};\r\n\r\n/**\r\n * Middleware to validate request data\r\n */\r\nconst validate = (schema) => {\r\n  return (req, res, next) => {\r\n    // Use decryptedBody if available, otherwise use body\r\n    const dataToValidate = req.decryptedBody || req.body;\r\n    \r\n    const { error, value } = schema.validate(dataToValidate, {\r\n      abortEarly: false, // Return all validation errors\r\n      stripUnknown: true // Remove unknown fields\r\n    });\r\n\r\n    if (error) {\r\n      const errors = error.details.map(detail => ({\r\n        field: detail.path.join('.'),\r\n        message: detail.message\r\n      }));\r\n\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Validation error',\r\n        errors\r\n      });\r\n    }\r\n\r\n    // Replace the body with validated and cleaned data\r\n    if (req.decryptedBody) {\r\n      req.decryptedBody = value;\r\n    } else {\r\n      req.body = value;\r\n    }\r\n\r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Common validation patterns\r\n */\r\nconst patterns = {\r\n  mongoId: /^[0-9a-fA-F]{24}$/,\r\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n  phone: /^[0-9]{10}$/,\r\n  zipCode: /^[0-9]{5,6}$/\r\n};\r\n\r\nmodule.exports = {\r\n  validate,\r\n  authSchemas,\r\n  productSchemas,\r\n  orderSchemas,\r\n  userSchemas,\r\n  addressSchemas,\r\n  otpSchemas,\r\n  patterns\r\n};\r\n"
        }
    ]
}