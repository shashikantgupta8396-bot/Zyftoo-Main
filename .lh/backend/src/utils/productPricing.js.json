{
    "sourceFile": "backend/src/utils/productPricing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753640078101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753640078101,
            "name": "Commit-0",
            "content": "/**\r\n * Product Pricing Utilities\r\n * Safe helper functions for handling both individual and corporate pricing\r\n */\r\n\r\n/**\r\n * Get appropriate product price based on user type and quantity\r\n * @param {Object} product - Product document\r\n * @param {string} userType - 'individual' or 'corporate'\r\n * @param {number} quantity - Quantity requested\r\n * @returns {Object} Price information\r\n */\r\nconst getProductPrice = (product, userType = 'individual', quantity = 1) => {\r\n  // Fallback for old schema (backward compatibility)\r\n  if (!product.retailPrice && product.price) {\r\n    return {\r\n      price: product.price,\r\n      originalPrice: product.price,\r\n      discount: 0,\r\n      currency: 'INR',\r\n      isRetail: true\r\n    };\r\n  }\r\n\r\n  // Individual user or corporate pricing not enabled\r\n  if (userType === 'individual' || !product.corporatePricing?.enabled) {\r\n    return {\r\n      price: product.retailPrice?.sellingPrice || product.price || 0,\r\n      originalPrice: product.retailPrice?.mrp || product.price || 0,\r\n      discount: product.retailPrice?.discount || 0,\r\n      currency: product.retailPrice?.currency || 'INR',\r\n      isRetail: true\r\n    };\r\n  }\r\n\r\n  // Corporate user with bulk pricing\r\n  if (userType === 'corporate' && product.corporatePricing?.enabled) {\r\n    const tier = product.corporatePricing.priceTiers.find(t => \r\n      quantity >= t.minQuantity && (!t.maxQuantity || quantity <= t.maxQuantity)\r\n    );\r\n    \r\n    if (tier) {\r\n      return {\r\n        price: tier.pricePerUnit,\r\n        originalPrice: product.retailPrice?.mrp || tier.pricePerUnit,\r\n        discount: tier.discount || 0,\r\n        currency: 'INR',\r\n        tierInfo: tier,\r\n        isCorporate: true\r\n      };\r\n    }\r\n  }\r\n\r\n  // Default fallback\r\n  return {\r\n    price: product.retailPrice?.sellingPrice || product.price || 0,\r\n    originalPrice: product.retailPrice?.mrp || product.price || 0,\r\n    discount: 0,\r\n    currency: 'INR',\r\n    isRetail: true\r\n  };\r\n};\r\n\r\n/**\r\n * Check if quantity qualifies for custom quote\r\n * @param {Object} product - Product document\r\n * @param {number} quantity - Quantity requested\r\n * @returns {boolean}\r\n */\r\nconst requiresCustomQuote = (product, quantity) => {\r\n  return product.corporatePricing?.enabled && \r\n         product.corporatePricing?.customQuoteThreshold &&\r\n         quantity >= product.corporatePricing.customQuoteThreshold;\r\n};\r\n\r\n/**\r\n * Get all available price tiers for a product\r\n * @param {Object} product - Product document\r\n * @returns {Array} Array of price tiers\r\n */\r\nconst getAvailableTiers = (product) => {\r\n  if (!product.corporatePricing?.enabled) {\r\n    return [];\r\n  }\r\n  \r\n  return product.corporatePricing.priceTiers || [];\r\n};\r\n\r\n/**\r\n * Format price for display\r\n * @param {number} price - Price value\r\n * @param {string} currency - Currency code\r\n * @returns {string} Formatted price\r\n */\r\nconst formatPrice = (price, currency = 'INR') => {\r\n  if (currency === 'INR') {\r\n    return `â‚¹${price.toFixed(2)}`;\r\n  }\r\n  return `${currency} ${price.toFixed(2)}`;\r\n};\r\n\r\nmodule.exports = {\r\n  getProductPrice,\r\n  requiresCustomQuote,\r\n  getAvailableTiers,\r\n  formatPrice\r\n};\r\n"
        }
    ]
}