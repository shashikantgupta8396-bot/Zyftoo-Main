{
    "sourceFile": "backend/src/utils/cryptoExamples.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752835582011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752835582010,
            "name": "Commit-0",
            "content": "// Example usage of cryptoUtil in Node.js backend\r\n\r\nconst { \r\n    encryptData, \r\n    decryptData, \r\n    encryptForStorage, \r\n    decryptFromStorage,\r\n    encryptUserFields,\r\n    decryptUserFields \r\n} = require('./cryptoUtil');\r\n\r\n// Example 1: Encrypting sensitive user data before storing in database\r\nconst createUser = async (userData) => {\r\n    try {\r\n        // Fields that should be encrypted\r\n        const sensitiveFields = ['phone', 'address', 'bankDetails'];\r\n        \r\n        // Encrypt sensitive fields\r\n        const encryptedUserData = encryptUserFields(userData, sensitiveFields);\r\n        \r\n        // Save to database\r\n        const user = new User(encryptedUserData);\r\n        await user.save();\r\n        \r\n        console.log('User created with encrypted data');\r\n        return user;\r\n    } catch (error) {\r\n        console.error('Error creating user:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Example 2: Decrypting user data when retrieving from database\r\nconst getUserById = async (userId) => {\r\n    try {\r\n        const user = await User.findById(userId);\r\n        if (!user) {\r\n            throw new Error('User not found');\r\n        }\r\n        \r\n        // Fields to decrypt\r\n        const sensitiveFields = ['phone', 'address', 'bankDetails'];\r\n        \r\n        // Decrypt sensitive fields\r\n        const decryptedUserData = decryptUserFields(user.toObject(), sensitiveFields);\r\n        \r\n        return decryptedUserData;\r\n    } catch (error) {\r\n        console.error('Error retrieving user:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Example 3: Handling encrypted API requests\r\nconst handleEncryptedRequest = (req, res, next) => {\r\n    try {\r\n        if (req.body.encryptedData) {\r\n            // Decrypt the request data\r\n            const decryptedData = decryptData(req.body.encryptedData);\r\n            req.body.decryptedData = decryptedData;\r\n        }\r\n        next();\r\n    } catch (error) {\r\n        console.error('Error decrypting request:', error);\r\n        return res.status(400).json({ error: 'Invalid encrypted data' });\r\n    }\r\n};\r\n\r\n// Example 4: Encrypting payment information\r\nconst processPayment = async (req, res) => {\r\n    try {\r\n        const { encryptedPayment, amount, currency } = req.body;\r\n        \r\n        // Decrypt payment information\r\n        const paymentData = decryptData(encryptedPayment);\r\n        \r\n        // Process payment (example)\r\n        const paymentResult = await processPaymentWithProvider({\r\n            ...paymentData,\r\n            amount,\r\n            currency\r\n        });\r\n        \r\n        // Encrypt response if needed\r\n        const encryptedResponse = encryptData({\r\n            transactionId: paymentResult.transactionId,\r\n            status: paymentResult.status\r\n        });\r\n        \r\n        res.json({ encryptedResult: encryptedResponse });\r\n    } catch (error) {\r\n        console.error('Payment processing error:', error);\r\n        res.status(500).json({ error: 'Payment processing failed' });\r\n    }\r\n};\r\n\r\n// Example 5: Storing encrypted session data\r\nconst storeSessionData = async (sessionId, sessionData) => {\r\n    try {\r\n        const encryptedSession = encryptForStorage(sessionData);\r\n        \r\n        // Store in Redis or database\r\n        await redis.set(`session:${sessionId}`, encryptedSession, 'EX', 3600);\r\n        \r\n        console.log('Session stored securely');\r\n    } catch (error) {\r\n        console.error('Error storing session:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Example 6: Retrieving encrypted session data\r\nconst getSessionData = async (sessionId) => {\r\n    try {\r\n        const encryptedSession = await redis.get(`session:${sessionId}`);\r\n        if (!encryptedSession) {\r\n            return null;\r\n        }\r\n        \r\n        const sessionData = decryptFromStorage(encryptedSession);\r\n        return sessionData;\r\n    } catch (error) {\r\n        console.error('Error retrieving session:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Example 7: Middleware to encrypt response data\r\nconst encryptResponse = (req, res, next) => {\r\n    const originalJson = res.json;\r\n    \r\n    res.json = function(data) {\r\n        if (req.headers['x-encrypt-response'] === 'true') {\r\n            const encryptedData = encryptData(data);\r\n            return originalJson.call(this, { encryptedData });\r\n        }\r\n        return originalJson.call(this, data);\r\n    };\r\n    \r\n    next();\r\n};\r\n\r\nmodule.exports = {\r\n    createUser,\r\n    getUserById,\r\n    handleEncryptedRequest,\r\n    processPayment,\r\n    storeSessionData,\r\n    getSessionData,\r\n    encryptResponse\r\n};\r\n"
        }
    ]
}