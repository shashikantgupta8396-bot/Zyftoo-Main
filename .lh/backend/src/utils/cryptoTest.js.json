{
    "sourceFile": "backend/src/utils/cryptoTest.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752835582009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752835582009,
            "name": "Commit-0",
            "content": "// Test file for crypto utilities - Backend\r\nconst { encryptData, decryptData, encryptUserFields, decryptUserFields } = require('./cryptoUtil');\r\n\r\n// Test function to verify encryption/decryption works\r\nconst testCrypto = () => {\r\n    console.log('üîê Testing Backend Crypto Utilities...\\n');\r\n    \r\n    try {\r\n        // Test 1: Basic encryption/decryption\r\n        const testData = {\r\n            name: 'John Doe',\r\n            email: 'john@example.com',\r\n            phone: '+1234567890',\r\n            sensitive: 'secret information'\r\n        };\r\n        \r\n        console.log('üìù Original data:', testData);\r\n        \r\n        const encrypted = encryptData(testData);\r\n        console.log('üîí Encrypted:', encrypted);\r\n        \r\n        const decrypted = decryptData(encrypted);\r\n        console.log('üîì Decrypted:', decrypted);\r\n        \r\n        // Verify data integrity\r\n        const dataMatches = JSON.stringify(testData) === JSON.stringify(decrypted);\r\n        console.log('‚úÖ Data integrity check:', dataMatches ? 'PASSED' : 'FAILED');\r\n        \r\n        console.log('\\n' + '='.repeat(50) + '\\n');\r\n        \r\n        // Test 2: User field encryption\r\n        const userData = {\r\n            id: 1,\r\n            username: 'johndoe',\r\n            email: 'john@example.com',\r\n            phone: '+1234567890',\r\n            address: '123 Main St, City, Country',\r\n            bankDetails: {\r\n                accountNumber: '1234567890',\r\n                routingNumber: '987654321'\r\n            },\r\n            publicInfo: 'This should not be encrypted'\r\n        };\r\n        \r\n        const fieldsToEncrypt = ['phone', 'address', 'bankDetails'];\r\n        \r\n        console.log('üìù User data before encryption:', userData);\r\n        \r\n        const encryptedUser = encryptUserFields(userData, fieldsToEncrypt);\r\n        console.log('üîí User data with encrypted fields:', encryptedUser);\r\n        \r\n        const decryptedUser = decryptUserFields(encryptedUser, fieldsToEncrypt);\r\n        console.log('üîì User data after decryption:', decryptedUser);\r\n        \r\n        // Verify specific fields\r\n        const phoneMatches = userData.phone === decryptedUser.phone;\r\n        const addressMatches = userData.address === decryptedUser.address;\r\n        const bankMatches = JSON.stringify(userData.bankDetails) === JSON.stringify(decryptedUser.bankDetails);\r\n        const publicMatches = userData.publicInfo === decryptedUser.publicInfo;\r\n        \r\n        console.log('‚úÖ Phone field check:', phoneMatches ? 'PASSED' : 'FAILED');\r\n        console.log('‚úÖ Address field check:', addressMatches ? 'PASSED' : 'FAILED');\r\n        console.log('‚úÖ Bank details check:', bankMatches ? 'PASSED' : 'FAILED');\r\n        console.log('‚úÖ Public info unchanged:', publicMatches ? 'PASSED' : 'FAILED');\r\n        \r\n        console.log('\\nüéâ All tests completed!');\r\n        \r\n    } catch (error) {\r\n        console.error('‚ùå Test failed:', error.message);\r\n    }\r\n};\r\n\r\n// Run tests if this file is executed directly\r\nif (require.main === module) {\r\n    // Set environment variable for testing\r\n    process.env.ENCRYPTION_KEY = 'test-encryption-key-for-demo-purposes';\r\n    testCrypto();\r\n}\r\n\r\nmodule.exports = { testCrypto };\r\n"
        }
    ]
}