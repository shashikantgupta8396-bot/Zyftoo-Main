{
    "sourceFile": "backend/src/utils/cryptoUtil.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752831493265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752835582124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,126 @@\n const CryptoJS = require('crypto-js');\r\n+require('dotenv').config();\r\n \r\n-// Get encryption secret from environment variables\r\n-const ENCRYPTION_SECRET = process.env.ENCRYPTION_SECRET || 'default-secret-key-change-in-production';\r\n+/**\r\n+ * Get encryption key from environment variables\r\n+ * @returns {string} Encryption key\r\n+ */\r\n+const getEncryptionKey = () => {\r\n+    const key = process.env.ENCRYPTION_KEY;\r\n+    if (!key) {\r\n+        throw new Error('ENCRYPTION_KEY is not defined in environment variables');\r\n+    }\r\n+    return key;\r\n+};\r\n \r\n /**\r\n- * Encrypt data using AES encryption\r\n- * @param {string|object} data - Data to encrypt\r\n- * @returns {string} - Encrypted string\r\n+ * Encrypts an object and returns a cipher string\r\n+ * @param {object} data - The data object to encrypt\r\n+ * @returns {string} Encrypted string\r\n  */\r\n-const encrypt = (data) => {\r\n-  try {\r\n-    // Convert object to string if necessary\r\n-    const stringData = typeof data === 'string' ? data : JSON.stringify(data);\r\n-    \r\n-    // Encrypt using AES\r\n-    const encrypted = CryptoJS.AES.encrypt(stringData, ENCRYPTION_SECRET).toString();\r\n-    \r\n-    return encrypted;\r\n-  } catch (error) {\r\n-    console.error('Encryption error:', error);\r\n-    throw new Error('Failed to encrypt data');\r\n-  }\r\n+const encryptData = (data) => {\r\n+    try {\r\n+        const key = getEncryptionKey();\r\n+        const jsonString = JSON.stringify(data);\r\n+        const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n+        return encrypted;\r\n+    } catch (error) {\r\n+        console.error('Encryption error:', error);\r\n+        throw new Error('Failed to encrypt data');\r\n+    }\r\n };\r\n \r\n /**\r\n- * Decrypt data using AES decryption\r\n- * @param {string} encryptedData - Encrypted string to decrypt\r\n- * @returns {object|string} - Decrypted data\r\n+ * Decrypts a cipher string and returns the parsed object\r\n+ * @param {string} cipher - The encrypted string to decrypt\r\n+ * @returns {object} Decrypted and parsed object\r\n  */\r\n-const decrypt = (encryptedData) => {\r\n-  try {\r\n-    // Decrypt using AES\r\n-    const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_SECRET);\r\n-    const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n-    \r\n-    if (!decryptedData) {\r\n-      throw new Error('Failed to decrypt data - invalid key or corrupted data');\r\n-    }\r\n-    \r\n-    // Try to parse as JSON, if it fails return as string\r\n+const decryptData = (cipher) => {\r\n     try {\r\n-      return JSON.parse(decryptedData);\r\n-    } catch (parseError) {\r\n-      return decryptedData;\r\n+        const key = getEncryptionKey();\r\n+        const decryptedBytes = CryptoJS.AES.decrypt(cipher, key);\r\n+        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n+        \r\n+        if (!decryptedString) {\r\n+            throw new Error('Failed to decrypt data - invalid cipher or key');\r\n+        }\r\n+        \r\n+        return JSON.parse(decryptedString);\r\n+    } catch (error) {\r\n+        console.error('Decryption error:', error);\r\n+        throw new Error('Failed to decrypt data');\r\n     }\r\n-  } catch (error) {\r\n-    console.error('Decryption error:', error);\r\n-    throw new Error('Failed to decrypt data');\r\n-  }\r\n };\r\n \r\n /**\r\n- * Create encrypted response format\r\n- * @param {object} data - Data to encrypt and send\r\n- * @returns {object} - Response with encrypted body\r\n+ * Utility function to encrypt sensitive data before storing in database\r\n+ * @param {object} data - Data to encrypt\r\n+ * @returns {string} Encrypted string\r\n  */\r\n-const createEncryptedResponse = (data) => {\r\n-  try {\r\n-    const encryptedBody = encrypt(data);\r\n-    return {\r\n-      success: true,\r\n-      body: encryptedBody,\r\n-      timestamp: new Date().toISOString()\r\n-    };\r\n-  } catch (error) {\r\n-    console.error('Error creating encrypted response:', error);\r\n-    throw new Error('Failed to create encrypted response');\r\n-  }\r\n+const encryptForStorage = (data) => {\r\n+    return encryptData(data);\r\n };\r\n \r\n /**\r\n- * Validate if string is properly encrypted\r\n- * @param {string} data - Data to validate\r\n- * @returns {boolean} - True if data appears to be encrypted\r\n+ * Utility function to decrypt data retrieved from database\r\n+ * @param {string} encryptedData - Encrypted string from database\r\n+ * @returns {object} Decrypted object\r\n  */\r\n-const isValidEncryptedData = (data) => {\r\n-  if (typeof data !== 'string' || data.length === 0) {\r\n-    return false;\r\n-  }\r\n-  \r\n-  // Basic check for base64-like structure (AES encrypted data)\r\n-  const base64Pattern = /^[A-Za-z0-9+/]+=*$/;\r\n-  return base64Pattern.test(data) && data.length > 16;\r\n+const decryptFromStorage = (encryptedData) => {\r\n+    return decryptData(encryptedData);\r\n };\r\n \r\n+/**\r\n+ * Encrypt sensitive fields in user data (e.g., payment info, personal details)\r\n+ * @param {object} userData - User data object\r\n+ * @param {string[]} fieldsToEncrypt - Array of field names to encrypt\r\n+ * @returns {object} Object with specified fields encrypted\r\n+ */\r\n+const encryptUserFields = (userData, fieldsToEncrypt = []) => {\r\n+    try {\r\n+        const result = { ...userData };\r\n+        \r\n+        fieldsToEncrypt.forEach(field => {\r\n+            if (result[field] !== undefined && result[field] !== null) {\r\n+                result[field] = encryptData(result[field]);\r\n+            }\r\n+        });\r\n+        \r\n+        return result;\r\n+    } catch (error) {\r\n+        console.error('Error encrypting user fields:', error);\r\n+        throw error;\r\n+    }\r\n+};\r\n+\r\n+/**\r\n+ * Decrypt sensitive fields in user data\r\n+ * @param {object} userData - User data object with encrypted fields\r\n+ * @param {string[]} fieldsToDecrypt - Array of field names to decrypt\r\n+ * @returns {object} Object with specified fields decrypted\r\n+ */\r\n+const decryptUserFields = (userData, fieldsToDecrypt = []) => {\r\n+    try {\r\n+        const result = { ...userData };\r\n+        \r\n+        fieldsToDecrypt.forEach(field => {\r\n+            if (result[field] !== undefined && result[field] !== null) {\r\n+                result[field] = decryptData(result[field]);\r\n+            }\r\n+        });\r\n+        \r\n+        return result;\r\n+    } catch (error) {\r\n+        console.error('Error decrypting user fields:', error);\r\n+        throw error;\r\n+    }\r\n+};\r\n+\r\n module.exports = {\r\n-  encrypt,\r\n-  decrypt,\r\n-  createEncryptedResponse,\r\n-  isValidEncryptedData\r\n+    encryptData,\r\n+    decryptData,\r\n+    encryptForStorage,\r\n+    decryptFromStorage,\r\n+    encryptUserFields,\r\n+    decryptUserFields\r\n };\r\n"
                },
                {
                    "date": 1752836816059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,15 @@\n  * @returns {string} Encryption key\r\n  */\r\n const getEncryptionKey = () => {\r\n     const key = process.env.ENCRYPTION_KEY;\r\n+    console.log('🔑 DEBUG: Checking encryption key...');\r\n+    console.log('🔑 Key exists:', !!key);\r\n+    console.log('🔑 Key length:', key?.length || 0);\r\n+    console.log('🔑 Key value:', key ? key.substring(0, 8) + '...' : 'UNDEFINED');\r\n+    \r\n     if (!key) {\r\n+        console.error('❌ ENCRYPTION_KEY is not defined in environment variables');\r\n         throw new Error('ENCRYPTION_KEY is not defined in environment variables');\r\n     }\r\n     return key;\r\n };\r\n@@ -35,21 +41,39 @@\n  * @param {string} cipher - The encrypted string to decrypt\r\n  * @returns {object} Decrypted and parsed object\r\n  */\r\n const decryptData = (cipher) => {\r\n+    console.log('🔓 DEBUG: Starting decryption...');\r\n+    console.log('📝 Input cipher:', cipher);\r\n+    console.log('📝 Cipher type:', typeof cipher);\r\n+    console.log('📝 Cipher length:', cipher?.length || 0);\r\n+    \r\n     try {\r\n         const key = getEncryptionKey();\r\n+        console.log('🔑 Using key for decryption (first 8 chars):', key.substring(0, 8) + '...');\r\n+        \r\n         const decryptedBytes = CryptoJS.AES.decrypt(cipher, key);\r\n+        console.log('🔓 Decrypted bytes:', decryptedBytes.toString());\r\n+        \r\n         const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n+        console.log('🔓 Decrypted string:', decryptedString);\r\n+        console.log('🔓 Decrypted string length:', decryptedString.length);\r\n         \r\n         if (!decryptedString) {\r\n+            console.error('❌ Failed to decrypt data - invalid cipher or key');\r\n             throw new Error('Failed to decrypt data - invalid cipher or key');\r\n         }\r\n         \r\n-        return JSON.parse(decryptedString);\r\n+        const parsed = JSON.parse(decryptedString);\r\n+        console.log('✅ Successfully parsed JSON:', parsed);\r\n+        return parsed;\r\n     } catch (error) {\r\n-        console.error('Decryption error:', error);\r\n-        throw new Error('Failed to decrypt data');\r\n+        console.error('❌ Decryption error details:', {\r\n+            message: error.message,\r\n+            stack: error.stack,\r\n+            cipher: cipher\r\n+        });\r\n+        throw new Error('Failed to decrypt data: ' + error.message);\r\n     }\r\n };\r\n \r\n /**\r\n"
                },
                {
                    "date": 1752849693423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,132 +19,76 @@\n     return key;\r\n };\r\n \r\n /**\r\n- * Encrypts an object and returns a cipher string\r\n- * @param {object} data - The data object to encrypt\r\n+ * Encrypts data and returns a cipher string (matches frontend crypto-js format)\r\n+ * @param {any} data - The data to encrypt\r\n  * @returns {string} Encrypted string\r\n  */\r\n const encryptData = (data) => {\r\n     try {\r\n+        console.log('🔒 Backend DEBUG: Starting encryption...');\r\n+        console.log('📝 Input data:', data);\r\n+        console.log('📝 Data type:', typeof data);\r\n+        \r\n         const key = getEncryptionKey();\r\n+        console.log('🔑 Using key for encryption (first 8 chars):', key.substring(0, 8) + '...');\r\n+        \r\n         const jsonString = JSON.stringify(data);\r\n+        console.log('📝 JSON string:', jsonString);\r\n+        console.log('📝 JSON string length:', jsonString.length);\r\n+        \r\n+        // Use the exact same method as frontend\r\n         const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n+        console.log('🔒 Encrypted result:', encrypted);\r\n+        console.log('🔒 Encrypted length:', encrypted.length);\r\n+        \r\n         return encrypted;\r\n     } catch (error) {\r\n-        console.error('Encryption error:', error);\r\n+        console.error('❌ Backend encryption error:', error);\r\n         throw new Error('Failed to encrypt data');\r\n     }\r\n };\r\n \r\n /**\r\n- * Decrypts a cipher string and returns the parsed object\r\n- * @param {string} cipher - The encrypted string to decrypt\r\n- * @returns {object} Decrypted and parsed object\r\n+ * Decrypts a cipher string and returns the parsed data (matches frontend crypto-js format)\r\n+ * @param {string} cipherText - The encrypted string to decrypt\r\n+ * @returns {any} Decrypted and parsed data\r\n  */\r\n-const decryptData = (cipher) => {\r\n-    console.log('🔓 DEBUG: Starting decryption...');\r\n-    console.log('📝 Input cipher:', cipher);\r\n-    console.log('📝 Cipher type:', typeof cipher);\r\n-    console.log('📝 Cipher length:', cipher?.length || 0);\r\n+const decryptData = (cipherText) => {\r\n+    console.log('🔓 Backend DEBUG: Starting decryption...');\r\n+    console.log('📝 Input cipher:', cipherText);\r\n+    console.log('📝 Cipher type:', typeof cipherText);\r\n+    console.log('📝 Cipher length:', cipherText?.length || 0);\r\n     \r\n     try {\r\n         const key = getEncryptionKey();\r\n         console.log('🔑 Using key for decryption (first 8 chars):', key.substring(0, 8) + '...');\r\n         \r\n-        const decryptedBytes = CryptoJS.AES.decrypt(cipher, key);\r\n-        console.log('🔓 Decrypted bytes:', decryptedBytes.toString());\r\n+        // Use the exact same method as frontend\r\n+        const decryptedBytes = CryptoJS.AES.decrypt(cipherText, key);\r\n+        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n         \r\n-        const decryptedString = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n         console.log('🔓 Decrypted string:', decryptedString);\r\n         console.log('🔓 Decrypted string length:', decryptedString.length);\r\n         \r\n         if (!decryptedString) {\r\n-            console.error('❌ Failed to decrypt data - invalid cipher or key');\r\n+            console.error('❌ Failed to decrypt data - empty result');\r\n             throw new Error('Failed to decrypt data - invalid cipher or key');\r\n         }\r\n         \r\n         const parsed = JSON.parse(decryptedString);\r\n         console.log('✅ Successfully parsed JSON:', parsed);\r\n         return parsed;\r\n     } catch (error) {\r\n-        console.error('❌ Decryption error details:', {\r\n+        console.error('❌ Backend decryption error details:', {\r\n             message: error.message,\r\n-            stack: error.stack,\r\n-            cipher: cipher\r\n+            cipher: cipherText\r\n         });\r\n         throw new Error('Failed to decrypt data: ' + error.message);\r\n     }\r\n };\r\n \r\n-/**\r\n- * Utility function to encrypt sensitive data before storing in database\r\n- * @param {object} data - Data to encrypt\r\n- * @returns {string} Encrypted string\r\n- */\r\n-const encryptForStorage = (data) => {\r\n-    return encryptData(data);\r\n-};\r\n-\r\n-/**\r\n- * Utility function to decrypt data retrieved from database\r\n- * @param {string} encryptedData - Encrypted string from database\r\n- * @returns {object} Decrypted object\r\n- */\r\n-const decryptFromStorage = (encryptedData) => {\r\n-    return decryptData(encryptedData);\r\n-};\r\n-\r\n-/**\r\n- * Encrypt sensitive fields in user data (e.g., payment info, personal details)\r\n- * @param {object} userData - User data object\r\n- * @param {string[]} fieldsToEncrypt - Array of field names to encrypt\r\n- * @returns {object} Object with specified fields encrypted\r\n- */\r\n-const encryptUserFields = (userData, fieldsToEncrypt = []) => {\r\n-    try {\r\n-        const result = { ...userData };\r\n-        \r\n-        fieldsToEncrypt.forEach(field => {\r\n-            if (result[field] !== undefined && result[field] !== null) {\r\n-                result[field] = encryptData(result[field]);\r\n-            }\r\n-        });\r\n-        \r\n-        return result;\r\n-    } catch (error) {\r\n-        console.error('Error encrypting user fields:', error);\r\n-        throw error;\r\n-    }\r\n-};\r\n-\r\n-/**\r\n- * Decrypt sensitive fields in user data\r\n- * @param {object} userData - User data object with encrypted fields\r\n- * @param {string[]} fieldsToDecrypt - Array of field names to decrypt\r\n- * @returns {object} Object with specified fields decrypted\r\n- */\r\n-const decryptUserFields = (userData, fieldsToDecrypt = []) => {\r\n-    try {\r\n-        const result = { ...userData };\r\n-        \r\n-        fieldsToDecrypt.forEach(field => {\r\n-            if (result[field] !== undefined && result[field] !== null) {\r\n-                result[field] = decryptData(result[field]);\r\n-            }\r\n-        });\r\n-        \r\n-        return result;\r\n-    } catch (error) {\r\n-        console.error('Error decrypting user fields:', error);\r\n-        throw error;\r\n-    }\r\n-};\r\n-\r\n module.exports = {\r\n     encryptData,\r\n-    decryptData,\r\n-    encryptForStorage,\r\n-    decryptFromStorage,\r\n-    encryptUserFields,\r\n-    decryptUserFields\r\n+    decryptData\r\n };\r\n"
                },
                {
                    "date": 1753963121056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+const CryptoJS = require('crypto-js');\r\n+require('dotenv').config();\r\n+\r\n+const getEncryptionKey = () => {\r\n+    // Using same environment variable as frontend for consistency\r\n+    const key = process.env.NEXT_PUBLIC_ENCRYPTION_KEY || process.env.ENCRYPTION_KEY;\r\n+    \r\n+    if (!key) {\r\n+        console.error('❌ Encryption key not found in environment variables');\r\n+        throw new Error('Encryption key not found in environment variables');\r\n+    }\r\n+\r\n+    console.log('🔑 Key validation:', {\r\n+        exists: !!key,\r\n+        length: key.length,\r\n+        preview: key.substring(0, 4) + '...'\r\n+    });\r\n+\r\n+    return key;\r\n+};\r\n+\r\n+const encryptData = (data) => {\r\n+    try {\r\n+        console.log('🔒 Starting encryption process');\r\n+        \r\n+        const key = getEncryptionKey();\r\n+        const jsonString = JSON.stringify(data);\r\n+        \r\n+        // Use same encryption method as frontend\r\n+        const encrypted = CryptoJS.AES.encrypt(jsonString, key).toString();\r\n+        \r\n+        console.log('✅ Encryption successful:', {\r\n+            inputType: typeof data,\r\n+            jsonLength: jsonString.length,\r\n+            outputLength: encrypted.length\r\n+        });\r\n+        \r\n+        return encrypted;\r\n+    } catch (error) {\r\n+        console.error('❌ Encryption failed:', error.message);\r\n+        throw new Error(`Encryption failed: ${error.message}`);\r\n+    }\r\n+};\r\n+\r\n+const decryptData = (cipherText) => {\r\n+    try {\r\n+        console.log('🔓 Starting decryption process');\r\n+\r\n+        if (!cipherText || typeof cipherText !== 'string') {\r\n+            throw new Error('Invalid cipher text format');\r\n+        }\r\n+\r\n+        const key = getEncryptionKey();\r\n+        \r\n+        // Use same decryption method as frontend\r\n+        const bytes = CryptoJS.AES.decrypt(cipherText, key);\r\n+        const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n+        \r\n+        if (!decrypted) {\r\n+            throw new Error('Decryption produced empty result');\r\n+        }\r\n+\r\n+        const parsed = JSON.parse(decrypted);\r\n+        \r\n+        console.log('✅ Decryption successful:', {\r\n+            inputLength: cipherText.length,\r\n+            outputType: typeof parsed,\r\n+            hasData: !!parsed\r\n+        });\r\n+\r\n+        return parsed;\r\n+    } catch (error) {\r\n+        console.error('❌ Decryption failed:', {\r\n+            error: error.message,\r\n+            cipherPreview: cipherText?.substring(0, 32) + '...'\r\n+        });\r\n+        throw new Error(`Decryption failed: ${error.message}`);\r\n+    }\r\n+};\r\n+\r\n+module.exports = {\r\n+    encryptData,\r\n+    decryptData\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752831493265,
            "name": "Commit-0",
            "content": "const CryptoJS = require('crypto-js');\r\n\r\n// Get encryption secret from environment variables\r\nconst ENCRYPTION_SECRET = process.env.ENCRYPTION_SECRET || 'default-secret-key-change-in-production';\r\n\r\n/**\r\n * Encrypt data using AES encryption\r\n * @param {string|object} data - Data to encrypt\r\n * @returns {string} - Encrypted string\r\n */\r\nconst encrypt = (data) => {\r\n  try {\r\n    // Convert object to string if necessary\r\n    const stringData = typeof data === 'string' ? data : JSON.stringify(data);\r\n    \r\n    // Encrypt using AES\r\n    const encrypted = CryptoJS.AES.encrypt(stringData, ENCRYPTION_SECRET).toString();\r\n    \r\n    return encrypted;\r\n  } catch (error) {\r\n    console.error('Encryption error:', error);\r\n    throw new Error('Failed to encrypt data');\r\n  }\r\n};\r\n\r\n/**\r\n * Decrypt data using AES decryption\r\n * @param {string} encryptedData - Encrypted string to decrypt\r\n * @returns {object|string} - Decrypted data\r\n */\r\nconst decrypt = (encryptedData) => {\r\n  try {\r\n    // Decrypt using AES\r\n    const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, ENCRYPTION_SECRET);\r\n    const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n    \r\n    if (!decryptedData) {\r\n      throw new Error('Failed to decrypt data - invalid key or corrupted data');\r\n    }\r\n    \r\n    // Try to parse as JSON, if it fails return as string\r\n    try {\r\n      return JSON.parse(decryptedData);\r\n    } catch (parseError) {\r\n      return decryptedData;\r\n    }\r\n  } catch (error) {\r\n    console.error('Decryption error:', error);\r\n    throw new Error('Failed to decrypt data');\r\n  }\r\n};\r\n\r\n/**\r\n * Create encrypted response format\r\n * @param {object} data - Data to encrypt and send\r\n * @returns {object} - Response with encrypted body\r\n */\r\nconst createEncryptedResponse = (data) => {\r\n  try {\r\n    const encryptedBody = encrypt(data);\r\n    return {\r\n      success: true,\r\n      body: encryptedBody,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating encrypted response:', error);\r\n    throw new Error('Failed to create encrypted response');\r\n  }\r\n};\r\n\r\n/**\r\n * Validate if string is properly encrypted\r\n * @param {string} data - Data to validate\r\n * @returns {boolean} - True if data appears to be encrypted\r\n */\r\nconst isValidEncryptedData = (data) => {\r\n  if (typeof data !== 'string' || data.length === 0) {\r\n    return false;\r\n  }\r\n  \r\n  // Basic check for base64-like structure (AES encrypted data)\r\n  const base64Pattern = /^[A-Za-z0-9+/]+=*$/;\r\n  return base64Pattern.test(data) && data.length > 16;\r\n};\r\n\r\nmodule.exports = {\r\n  encrypt,\r\n  decrypt,\r\n  createEncryptedResponse,\r\n  isValidEncryptedData\r\n};\r\n"
        }
    ]
}