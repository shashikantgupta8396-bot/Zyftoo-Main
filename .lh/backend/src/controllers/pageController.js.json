{
    "sourceFile": "backend/src/controllers/pageController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753126463759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753162069690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const PageConfig = require('../models/PageConfig');\r\n const Category = require('../models/Category');\r\n+const Subcategory = require('../models/Subcategory');\r\n \r\n // Initialize default page configuration if not exists\r\n const initializePageConfig = async (pageId) => {\r\n   let pageConfig = await PageConfig.findById(pageId);\r\n@@ -294,4 +295,182 @@\n       error: 'Failed to update page configuration' \r\n     });\r\n   }\r\n };\r\n+\r\n+// Get categories for homepage display (filtered and ordered)\r\n+exports.getHomePageCategories = async (req, res) => {\r\n+  try {\r\n+    // Get page configuration for home\r\n+    const pageConfig = await PageConfig.findById('home');\r\n+    \r\n+    if (!pageConfig) {\r\n+      return res.status(404).json({ \r\n+        success: false,\r\n+        error: 'Home page configuration not found' \r\n+      });\r\n+    }\r\n+    \r\n+    // Find category section\r\n+    const categorySection = pageConfig.sections.find(s => s.sectionType === 'categorySection');\r\n+    \r\n+    if (!categorySection || !categorySection.enabled) {\r\n+      return res.json({\r\n+        success: true,\r\n+        data: {\r\n+          enabled: false,\r\n+          categories: [],\r\n+          config: {}\r\n+        }\r\n+      });\r\n+    }\r\n+    \r\n+    // Get configured categories\r\n+    const configuredCategories = categorySection.config.categories || [];\r\n+    const maxCategories = categorySection.config.maxCategories || 6;\r\n+    \r\n+    // Filter enabled categories and respect order\r\n+    const enabledCategories = configuredCategories\r\n+      .filter(cat => cat.enabled)\r\n+      .sort((a, b) => a.order - b.order)\r\n+      .slice(0, maxCategories);\r\n+    \r\n+    // Fetch actual category data\r\n+    const categoryIds = enabledCategories.map(cat => cat.categoryId);\r\n+    const categories = await Category.find({ \r\n+      _id: { $in: categoryIds },\r\n+      status: true \r\n+    }).select('name image description');\r\n+    \r\n+    // Fetch subcategories for these categories\r\n+    const subcategories = await Subcategory.find({ \r\n+      parent: { $in: categoryIds },\r\n+      status: true \r\n+    }).select('name parent image');\r\n+    \r\n+    // Group subcategories by parent category\r\n+    const subcategoriesMap = subcategories.reduce((acc, sub) => {\r\n+      if (!acc[sub.parent]) acc[sub.parent] = [];\r\n+      acc[sub.parent].push({\r\n+        name: sub.name,\r\n+        image: sub.image?.url\r\n+      });\r\n+      return acc;\r\n+    }, {});\r\n+    \r\n+    // Map to maintain order from configuration\r\n+    const orderedCategories = enabledCategories.map(configCat => {\r\n+      const category = categories.find(cat => cat._id.toString() === configCat.categoryId);\r\n+      if (!category) return null;\r\n+      \r\n+      return {\r\n+        id: category._id,\r\n+        name: category.name,\r\n+        icon: category.image?.url || '/assets/img/product/category/default-category.svg',\r\n+        image: category.image?.url || '/assets/img/product/category/default-category.svg',\r\n+        description: category.description || '',\r\n+        order: configCat.order,\r\n+        subcategories: subcategoriesMap[category._id] || []\r\n+      };\r\n+    }).filter(Boolean);\r\n+    \r\n+    res.json({\r\n+      success: true,\r\n+      data: {\r\n+        enabled: categorySection.enabled,\r\n+        categories: orderedCategories,\r\n+        config: {\r\n+          maxCategories: categorySection.config.maxCategories || 6,\r\n+          layout: categorySection.config.layout || 'grid',\r\n+          showSubcategories: categorySection.config.showSubcategories ?? true\r\n+        }\r\n+      }\r\n+    });\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error fetching home page categories:', error);\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: 'Failed to fetch categories' \r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Update category section configuration\r\n+exports.updateCategorySection = async (req, res) => {\r\n+  try {\r\n+    const { enabled, maxCategories, categories, layout, showSubcategories } = req.body;\r\n+    \r\n+    let pageConfig = await PageConfig.findById('home');\r\n+    if (!pageConfig) {\r\n+      // Create default config if not exists\r\n+      pageConfig = await initializePageConfig('home');\r\n+    }\r\n+    \r\n+    // Find category section\r\n+    const sectionIndex = pageConfig.sections.findIndex(s => s.sectionType === 'categorySection');\r\n+    \r\n+    if (sectionIndex === -1) {\r\n+      // Add category section if not exists\r\n+      pageConfig.sections.push({\r\n+        sectionType: 'categorySection',\r\n+        enabled: enabled ?? true,\r\n+        order: 1,\r\n+        config: {\r\n+          maxCategories: maxCategories || 6,\r\n+          categories: categories || [],\r\n+          layout: layout || 'grid',\r\n+          showSubcategories: showSubcategories ?? true\r\n+        }\r\n+      });\r\n+    } else {\r\n+      // Update existing section\r\n+      pageConfig.sections[sectionIndex].enabled = enabled ?? pageConfig.sections[sectionIndex].enabled;\r\n+      pageConfig.sections[sectionIndex].config = {\r\n+        ...pageConfig.sections[sectionIndex].config,\r\n+        maxCategories: maxCategories ?? pageConfig.sections[sectionIndex].config.maxCategories,\r\n+        categories: categories ?? pageConfig.sections[sectionIndex].config.categories,\r\n+        layout: layout ?? pageConfig.sections[sectionIndex].config.layout,\r\n+        showSubcategories: showSubcategories ?? pageConfig.sections[sectionIndex].config.showSubcategories\r\n+      };\r\n+    }\r\n+    \r\n+    pageConfig.lastModified = new Date();\r\n+    await pageConfig.save();\r\n+    \r\n+    res.json({\r\n+      success: true,\r\n+      message: 'Category section updated successfully',\r\n+      data: pageConfig.sections[sectionIndex]\r\n+    });\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error updating category section:', error);\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: 'Failed to update category section' \r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Add refresh endpoint for real-time updates\r\n+exports.refreshPageSection = async (req, res) => {\r\n+  try {\r\n+    const { pageId, sectionType } = req.params;\r\n+    \r\n+    // You can use WebSocket or Server-Sent Events here\r\n+    // For now, just return a timestamp for polling\r\n+    res.json({\r\n+      success: true,\r\n+      data: {\r\n+        lastUpdate: new Date().toISOString(),\r\n+        pageId,\r\n+        sectionType\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: 'Failed to refresh section' \r\n+    });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1753210570097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,103 +296,352 @@\n     });\r\n   }\r\n };\r\n \r\n-// Get categories for homepage display (filtered and ordered)\r\n+// Enhanced method to get categories for homepage display\r\n exports.getHomePageCategories = async (req, res) => {\r\n   try {\r\n-    // Get page configuration for home\r\n-    const pageConfig = await PageConfig.findById('home');\r\n+    console.log('🏠 === GET HOME PAGE CATEGORIES START ===')\r\n     \r\n+    // Get pageId from params (default to 'home')\r\n+    const pageId = req.params.pageId || 'home'\r\n+    console.log('1. Requested pageId:', pageId)\r\n+    \r\n+    // Find the page configuration\r\n+    const pageConfig = await PageConfig.findById(pageId)\r\n     if (!pageConfig) {\r\n-      return res.status(404).json({ \r\n+      console.log('❌ PageConfig not found for pageId:', pageId)\r\n+      return res.status(404).json({\r\n         success: false,\r\n-        error: 'Home page configuration not found' \r\n-      });\r\n+        message: `Page configuration not found for ${pageId}`\r\n+      })\r\n     }\r\n     \r\n-    // Find category section\r\n-    const categorySection = pageConfig.sections.find(s => s.sectionType === 'categorySection');\r\n+    console.log('2. Found PageConfig:', pageConfig.name)\r\n     \r\n-    if (!categorySection || !categorySection.enabled) {\r\n-      return res.json({\r\n+    // Find the category section\r\n+    const categorySection = pageConfig.sections.find(section => \r\n+      section.sectionType === 'categorySection'\r\n+    )\r\n+    \r\n+    if (!categorySection) {\r\n+      console.log('3. No category section found, returning disabled state')\r\n+      return res.status(200).json({\r\n         success: true,\r\n         data: {\r\n           enabled: false,\r\n-          categories: [],\r\n-          config: {}\r\n+          config: {},\r\n+          categories: []\r\n         }\r\n-      });\r\n+      })\r\n     }\r\n     \r\n-    // Get configured categories\r\n-    const configuredCategories = categorySection.config.categories || [];\r\n-    const maxCategories = categorySection.config.maxCategories || 6;\r\n+    console.log('3. Found category section - enabled:', categorySection.enabled)\r\n+    console.log('4. Section config:', categorySection.config)\r\n     \r\n-    // Filter enabled categories and respect order\r\n-    const enabledCategories = configuredCategories\r\n-      .filter(cat => cat.enabled)\r\n-      .sort((a, b) => a.order - b.order)\r\n-      .slice(0, maxCategories);\r\n+    // If section is disabled, return early\r\n+    if (!categorySection.enabled) {\r\n+      return res.status(200).json({\r\n+        success: true,\r\n+        data: {\r\n+          enabled: false,\r\n+          config: categorySection.config || {},\r\n+          categories: []\r\n+        }\r\n+      })\r\n+    }\r\n     \r\n-    // Fetch actual category data\r\n-    const categoryIds = enabledCategories.map(cat => cat.categoryId);\r\n-    const categories = await Category.find({ \r\n-      _id: { $in: categoryIds },\r\n-      status: true \r\n-    }).select('name image description');\r\n+    // Extract category IDs from the config\r\n+    const configuredCategories = categorySection.config?.categories || []\r\n+    const categoryIds = configuredCategories.map(cat => cat.categoryId).filter(Boolean)\r\n     \r\n-    // Fetch subcategories for these categories\r\n-    const subcategories = await Subcategory.find({ \r\n-      parent: { $in: categoryIds },\r\n-      status: true \r\n-    }).select('name parent image');\r\n+    console.log('5. Configured categories count:', configuredCategories.length)\r\n+    console.log('6. Category IDs to fetch:', categoryIds)\r\n     \r\n-    // Group subcategories by parent category\r\n-    const subcategoriesMap = subcategories.reduce((acc, sub) => {\r\n-      if (!acc[sub.parent]) acc[sub.parent] = [];\r\n-      acc[sub.parent].push({\r\n-        name: sub.name,\r\n-        image: sub.image?.url\r\n-      });\r\n-      return acc;\r\n-    }, {});\r\n-    \r\n-    // Map to maintain order from configuration\r\n-    const orderedCategories = enabledCategories.map(configCat => {\r\n-      const category = categories.find(cat => cat._id.toString() === configCat.categoryId);\r\n-      if (!category) return null;\r\n+    if (categoryIds.length === 0) {\r\n+      console.log('7. No categories configured, falling back to default categories')\r\n+      // Fall back to showing first 6 main categories when none are configured\r\n+      const defaultCategories = await Category.aggregate([\r\n+        {\r\n+          $match: {\r\n+            parent: null,\r\n+            status: true\r\n+          }\r\n+        },\r\n+        {\r\n+          $lookup: {\r\n+            from: 'categories',\r\n+            localField: '_id',\r\n+            foreignField: 'parent',\r\n+            as: 'subcategories'\r\n+          }\r\n+        },\r\n+        {\r\n+          $addFields: {\r\n+            subcategories: {\r\n+              $filter: {\r\n+                input: '$subcategories',\r\n+                cond: { $eq: ['$$this.status', true] }\r\n+              }\r\n+            }\r\n+          }\r\n+        },\r\n+        { $limit: categorySection.config?.maxCategories || 6 },\r\n+        {\r\n+          $project: {\r\n+            _id: 1,\r\n+            name: 1,\r\n+            description: 1,\r\n+            image: 1,\r\n+            subcategories: {\r\n+              _id: 1,\r\n+              name: 1,\r\n+              description: 1,\r\n+              image: 1\r\n+            }\r\n+          }\r\n+        }\r\n+      ])\r\n       \r\n-      return {\r\n-        id: category._id,\r\n-        name: category.name,\r\n-        icon: category.image?.url || '/assets/img/product/category/default-category.svg',\r\n-        image: category.image?.url || '/assets/img/product/category/default-category.svg',\r\n-        description: category.description || '',\r\n-        order: configCat.order,\r\n-        subcategories: subcategoriesMap[category._id] || []\r\n-      };\r\n-    }).filter(Boolean);\r\n+      const transformedDefaults = defaultCategories.map(cat => ({\r\n+        id: cat._id.toString(),\r\n+        name: cat.name,\r\n+        description: cat.description,\r\n+        icon: cat.image?.url || cat.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+        image: cat.image?.url || cat.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+        order: 0,\r\n+        subcategories: categorySection.config?.showSubcategories ? cat.subcategories.map(sub => ({\r\n+          id: sub._id.toString(),\r\n+          name: sub.name,\r\n+          description: sub.description,\r\n+          icon: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+          image: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg'\r\n+        })) : []\r\n+      }))\r\n+      \r\n+      console.log('8. Returning default categories:', transformedDefaults.length)\r\n+      return res.status(200).json({\r\n+        success: true,\r\n+        data: {\r\n+          enabled: true,\r\n+          config: categorySection.config || {},\r\n+          categories: transformedDefaults\r\n+        }\r\n+      })\r\n+    }\r\n     \r\n-    res.json({\r\n-      success: true,\r\n-      data: {\r\n-        enabled: categorySection.enabled,\r\n-        categories: orderedCategories,\r\n-        config: {\r\n-          maxCategories: categorySection.config.maxCategories || 6,\r\n-          layout: categorySection.config.layout || 'grid',\r\n-          showSubcategories: categorySection.config.showSubcategories ?? true\r\n+    // Use MongoDB aggregation to fetch categories with subcategories\r\n+    const mongoose = require('mongoose')\r\n+    \r\n+    console.log('8. Fetching category data from database...')\r\n+    console.log('9. Converting IDs to ObjectId format...')\r\n+    \r\n+    // Debug: Let's first check what categories exist in the database\r\n+    const allCategories = await Category.find({ status: true }).select('_id name').lean()\r\n+    console.log('10. All available categories in DB:', allCategories.map(c => ({ id: c._id.toString(), name: c.name })))\r\n+    \r\n+    // Convert string IDs to ObjectIds with error handling\r\n+    const objectIds = []\r\n+    for (const id of categoryIds) {\r\n+      try {\r\n+        if (mongoose.Types.ObjectId.isValid(id)) {\r\n+          objectIds.push(new mongoose.Types.ObjectId(id))\r\n+          console.log(`✅ Valid ObjectId: ${id}`)\r\n+        } else {\r\n+          console.log(`❌ Invalid ObjectId: ${id}`)\r\n         }\r\n+      } catch (error) {\r\n+        console.log(`❌ Error converting ID ${id}:`, error.message)\r\n       }\r\n-    });\r\n+    }\r\n     \r\n+    console.log('11. ObjectIds to search for:', objectIds.map(id => id.toString()))\r\n+    \r\n+    const categoriesData = await Category.aggregate([\r\n+      // Match main categories by IDs\r\n+      {\r\n+        $match: {\r\n+          _id: { $in: objectIds },\r\n+          status: true\r\n+        }\r\n+      },\r\n+      // Lookup subcategories\r\n+      {\r\n+        $lookup: {\r\n+          from: 'categories',\r\n+          localField: '_id',\r\n+          foreignField: 'parent',\r\n+          as: 'subcategories'\r\n+        }\r\n+      },\r\n+      // Filter active subcategories only\r\n+      {\r\n+        $addFields: {\r\n+          subcategories: {\r\n+            $filter: {\r\n+              input: '$subcategories',\r\n+              cond: { $eq: ['$$this.status', true] }\r\n+            }\r\n+          }\r\n+        }\r\n+      },\r\n+      // Project required fields\r\n+      {\r\n+        $project: {\r\n+          _id: 1,\r\n+          name: 1,\r\n+          description: 1,\r\n+          image: 1,\r\n+          subcategories: {\r\n+            _id: 1,\r\n+            name: 1,\r\n+            description: 1,\r\n+            image: 1\r\n+          }\r\n+        }\r\n+      }\r\n+    ])\r\n+    \r\n+    console.log('12. Raw aggregation result:', categoriesData)\r\n+    console.log('13. Fetched categories from database:', categoriesData.length)\r\n+    \r\n+    // Transform data to match frontend expectations and maintain order\r\n+    const transformedCategories = []\r\n+    \r\n+    // Maintain the order from PageConfig\r\n+    for (const configCat of configuredCategories) {\r\n+      const categoryData = categoriesData.find(cat => \r\n+        cat._id.toString() === configCat.categoryId\r\n+      )\r\n+      \r\n+      if (categoryData && configCat.enabled !== false) {\r\n+        const transformedCategory = {\r\n+          id: categoryData._id.toString(),\r\n+          name: categoryData.name,\r\n+          description: categoryData.description,\r\n+          icon: categoryData.image?.url || categoryData.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+          image: categoryData.image?.url || categoryData.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+          order: configCat.order || 0,\r\n+          subcategories: []\r\n+        }\r\n+        \r\n+        // Add subcategories if enabled in config\r\n+        if (categorySection.config?.showSubcategories && categoryData.subcategories) {\r\n+          transformedCategory.subcategories = categoryData.subcategories.map(sub => ({\r\n+            id: sub._id.toString(),\r\n+            name: sub.name,\r\n+            description: sub.description,\r\n+            icon: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+            image: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg'\r\n+          }))\r\n+        }\r\n+        \r\n+        transformedCategories.push(transformedCategory)\r\n+      }\r\n+    }\r\n+    \r\n+    // Sort by order\r\n+    transformedCategories.sort((a, b) => (a.order || 0) - (b.order || 0))\r\n+    \r\n+    // Apply maxCategories limit if set\r\n+    const maxCategories = categorySection.config?.maxCategories\r\n+    let finalCategories = maxCategories && maxCategories > 0 \r\n+      ? transformedCategories.slice(0, maxCategories)\r\n+      : transformedCategories\r\n+    \r\n+    // If no categories found, fallback to showing available categories\r\n+    if (finalCategories.length === 0) {\r\n+      console.log('15. No configured categories found in DB, using fallback categories...')\r\n+      \r\n+      const fallbackCategories = await Category.aggregate([\r\n+        {\r\n+          $match: {\r\n+            parent: null,\r\n+            status: true\r\n+          }\r\n+        },\r\n+        {\r\n+          $lookup: {\r\n+            from: 'categories',\r\n+            localField: '_id',\r\n+            foreignField: 'parent',\r\n+            as: 'subcategories'\r\n+          }\r\n+        },\r\n+        {\r\n+          $addFields: {\r\n+            subcategories: {\r\n+              $filter: {\r\n+                input: '$subcategories',\r\n+                cond: { $eq: ['$$this.status', true] }\r\n+              }\r\n+            }\r\n+          }\r\n+        },\r\n+        { $limit: categorySection.config?.maxCategories || 6 },\r\n+        {\r\n+          $project: {\r\n+            _id: 1,\r\n+            name: 1,\r\n+            description: 1,\r\n+            image: 1,\r\n+            subcategories: {\r\n+              _id: 1,\r\n+              name: 1,\r\n+              description: 1,\r\n+              image: 1\r\n+            }\r\n+          }\r\n+        }\r\n+      ])\r\n+      \r\n+      finalCategories = fallbackCategories.map(cat => ({\r\n+        id: cat._id.toString(),\r\n+        name: cat.name,\r\n+        description: cat.description,\r\n+        icon: cat.image?.url || cat.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+        image: cat.image?.url || cat.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+        order: 0,\r\n+        subcategories: categorySection.config?.showSubcategories ? cat.subcategories.map(sub => ({\r\n+          id: sub._id.toString(),\r\n+          name: sub.name,\r\n+          description: sub.description,\r\n+          icon: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+          image: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg'\r\n+        })) : []\r\n+      }))\r\n+      \r\n+      console.log('16. Fallback categories count:', finalCategories.length)\r\n+    }\r\n+    \r\n+    console.log('17. Final categories to return:', finalCategories.length)\r\n+    console.log('18. Category names:', finalCategories.map(c => c.name))\r\n+    \r\n+    const responseData = {\r\n+      enabled: true,\r\n+      config: {\r\n+        maxCategories: categorySection.config?.maxCategories || 0,\r\n+        layout: categorySection.config?.layout || 'grid',\r\n+        showSubcategories: categorySection.config?.showSubcategories || false\r\n+      },\r\n+      categories: finalCategories\r\n+    }\r\n+    \r\n+    console.log('✅ === GET HOME PAGE CATEGORIES SUCCESS ===')\r\n+    \r\n+    res.status(200).json({\r\n+      success: true,\r\n+      data: responseData\r\n+    })\r\n+    \r\n   } catch (error) {\r\n-    console.error('Error fetching home page categories:', error);\r\n-    res.status(500).json({ \r\n+    console.error('❌ === GET HOME PAGE CATEGORIES ERROR ===')\r\n+    console.error('Error fetching home page categories:', error)\r\n+    res.status(500).json({\r\n       success: false,\r\n-      error: 'Failed to fetch categories' \r\n-    });\r\n+      message: 'Failed to fetch categories',\r\n+      error: error.message\r\n+    })\r\n   }\r\n };\r\n \r\n // Update category section configuration\r\n@@ -473,4 +722,121 @@\n       error: 'Failed to refresh section' \r\n     });\r\n   }\r\n };\r\n+\r\n+// Generic method for any page\r\n+exports.getPageCategories = async (req, res) => {\r\n+  try {\r\n+    console.log('📄 === GET PAGE CATEGORIES START ===')\r\n+    \r\n+    const { pageId } = req.params\r\n+    console.log('1. Requested pageId:', pageId)\r\n+    \r\n+    // Reuse the logic from getHomePageCategories\r\n+    req.params.pageId = pageId\r\n+    return await exports.getHomePageCategories(req, res)\r\n+    \r\n+  } catch (error) {\r\n+    console.error('❌ === GET PAGE CATEGORIES ERROR ===')\r\n+    console.error('Error fetching page categories:', error)\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: 'Failed to fetch page categories',\r\n+      error: error.message\r\n+    })\r\n+  }\r\n+}\r\n+\r\n+// Fallback method to get all categories when PageConfig is not available\r\n+exports.getAllCategoriesAsFallback = async (req, res) => {\r\n+  try {\r\n+    console.log('🔄 === FALLBACK CATEGORIES START ===')\r\n+    \r\n+    // Get main categories with subcategories\r\n+    const categories = await Category.aggregate([\r\n+      // Get only main categories (no parent)\r\n+      {\r\n+        $match: {\r\n+          parent: null,\r\n+          status: true\r\n+        }\r\n+      },\r\n+      // Lookup subcategories\r\n+      {\r\n+        $lookup: {\r\n+          from: 'categories',\r\n+          localField: '_id',\r\n+          foreignField: 'parent',\r\n+          as: 'subcategories'\r\n+        }\r\n+      },\r\n+      // Filter active subcategories\r\n+      {\r\n+        $addFields: {\r\n+          subcategories: {\r\n+            $filter: {\r\n+              input: '$subcategories',\r\n+              cond: { $eq: ['$$this.status', true] }\r\n+            }\r\n+          }\r\n+        }\r\n+      },\r\n+      // Limit to first 6 categories\r\n+      { $limit: 6 },\r\n+      // Project required fields\r\n+      {\r\n+        $project: {\r\n+          _id: 1,\r\n+          name: 1,\r\n+          description: 1,\r\n+          image: 1,\r\n+          subcategories: {\r\n+            _id: 1,\r\n+            name: 1,\r\n+            description: 1,\r\n+            image: 1\r\n+          }\r\n+        }\r\n+      }\r\n+    ])\r\n+    \r\n+    // Transform to frontend format\r\n+    const transformedCategories = categories.map(cat => ({\r\n+      id: cat._id.toString(),\r\n+      name: cat.name,\r\n+      description: cat.description,\r\n+      icon: cat.image?.url || cat.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+      image: cat.image?.url || cat.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+      subcategories: cat.subcategories.map(sub => ({\r\n+        id: sub._id.toString(),\r\n+        name: sub.name,\r\n+        description: sub.description,\r\n+        icon: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg',\r\n+        image: sub.image?.url || sub.image?.filename || '/assets/img/product/category/default-category.svg'\r\n+      }))\r\n+    }))\r\n+    \r\n+    console.log('✅ Fallback categories count:', transformedCategories.length)\r\n+    \r\n+    res.status(200).json({\r\n+      success: true,\r\n+      data: {\r\n+        enabled: true,\r\n+        config: {\r\n+          maxCategories: 6,\r\n+          layout: 'grid',\r\n+          showSubcategories: true\r\n+        },\r\n+        categories: transformedCategories\r\n+      }\r\n+    })\r\n+    \r\n+  } catch (error) {\r\n+    console.error('❌ Fallback categories error:', error)\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: 'Failed to fetch fallback categories',\r\n+      error: error.message\r\n+    })\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1753240251897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n const PageConfig = require('../models/PageConfig');\r\n const Category = require('../models/Category');\r\n const Subcategory = require('../models/Subcategory');\r\n+const { updateGiftCategoriesFile } = require('../utils/fileUpdater');\r\n+const mongoose = require('mongoose');\r\n \r\n // Initialize default page configuration if not exists\r\n const initializePageConfig = async (pageId) => {\r\n   let pageConfig = await PageConfig.findById(pageId);\r\n@@ -839,4 +841,203 @@\n       error: error.message\r\n     })\r\n   }\r\n }\r\n+\r\n+// Enhanced save configuration method with auto file update\r\n+exports.savePageConfiguration = async (req, res) => {\r\n+  try {\r\n+    console.log('💾 === SAVE PAGE CONFIGURATION START ===');\r\n+    \r\n+    const { pageId } = req.params;\r\n+    const configData = req.body;\r\n+    \r\n+    console.log('Saving config for page:', pageId);\r\n+    console.log('Config data:', JSON.stringify(configData, null, 2));\r\n+    \r\n+    // Find and update the page configuration\r\n+    const updatedPageConfig = await PageConfig.findByIdAndUpdate(\r\n+      pageId,\r\n+      configData,\r\n+      { new: true, runValidators: true }\r\n+    );\r\n+    \r\n+    if (!updatedPageConfig) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: `Page configuration not found for ${pageId}`\r\n+      });\r\n+    }\r\n+    \r\n+    console.log('✅ Page configuration saved to database');\r\n+    \r\n+    // 🎯 AUTO-UPDATE STATIC FILE FOR CATEGORY SECTIONS\r\n+    const categorySection = updatedPageConfig.sections.find(section => \r\n+      section.sectionType === 'categorySection'\r\n+    );\r\n+    \r\n+    if (categorySection && categorySection.enabled) {\r\n+      console.log('🎯 Category section found, updating static file...');\r\n+      \r\n+      // Get the configured categories\r\n+      const categoryIds = categorySection.categories\r\n+        .filter(cat => cat.enabled)\r\n+        .sort((a, b) => a.order - b.order)\r\n+        .map(cat => cat.categoryId);\r\n+      \r\n+      console.log('Category IDs to fetch:', categoryIds);\r\n+      \r\n+      // Fetch categories from database\r\n+      let categories = [];\r\n+      if (categoryIds.length > 0) {\r\n+        categories = await Category.find({\r\n+          _id: { $in: categoryIds.map(id => new mongoose.Types.ObjectId(id)) }\r\n+        }).populate('subcategories');\r\n+      }\r\n+      \r\n+      // Fallback if no categories found\r\n+      if (categories.length === 0) {\r\n+        console.log('No configured categories found, using fallback...');\r\n+        categories = await Category.find({ status: 'active' })\r\n+          .limit(categorySection.maxCategories || 6)\r\n+          .populate('subcategories');\r\n+      }\r\n+      \r\n+      console.log('Categories for file update:', categories.length);\r\n+      \r\n+      // Update static file\r\n+      const fileUpdateResult = await updateGiftCategoriesFile(categories, {\r\n+        maxCategories: categorySection.maxCategories,\r\n+        layout: categorySection.layout,\r\n+        showSubcategories: categorySection.showSubcategories,\r\n+        updatedBy: 'save_configuration',\r\n+        pageId: pageId,\r\n+        timestamp: new Date().toISOString()\r\n+      });\r\n+      \r\n+      console.log('Static file update result:', fileUpdateResult);\r\n+      \r\n+      return res.json({\r\n+        success: true,\r\n+        message: 'Page configuration saved and static file updated successfully',\r\n+        data: updatedPageConfig,\r\n+        fileUpdate: fileUpdateResult\r\n+      });\r\n+    }\r\n+    \r\n+    // Return success without file update\r\n+    res.json({\r\n+      success: true,\r\n+      message: 'Page configuration saved successfully',\r\n+      data: updatedPageConfig\r\n+    });\r\n+    \r\n+  } catch (error) {\r\n+    console.error('❌ Error saving page configuration:', error);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: 'Failed to save page configuration',\r\n+      error: error.message\r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Method to manually refresh static file\r\n+exports.refreshStaticFile = async (req, res) => {\r\n+  try {\r\n+    console.log('🔄 === REFRESH STATIC FILE START ===');\r\n+    \r\n+    const { pageId } = req.params;\r\n+    console.log('Page ID:', pageId);\r\n+    \r\n+    // Find the page configuration\r\n+    const pageConfig = await PageConfig.findById(pageId);\r\n+    if (!pageConfig) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: `Page configuration not found for ${pageId}`\r\n+      });\r\n+    }\r\n+    \r\n+    // Find the category section\r\n+    const categorySection = pageConfig.sections.find(s => s.sectionType === 'categorySection');\r\n+    if (!categorySection) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        message: `Category section not found in page ${pageId}`\r\n+      });\r\n+    }\r\n+    \r\n+    console.log('Found category section:', categorySection.enabled);\r\n+    \r\n+    // Get the configured categories\r\n+    const categoryIds = categorySection.categories\r\n+      .filter(cat => cat.enabled)\r\n+      .sort((a, b) => a.order - b.order)\r\n+      .map(cat => cat.categoryId);\r\n+    \r\n+    console.log('Category IDs to fetch:', categoryIds);\r\n+    \r\n+    // Fetch categories from database\r\n+    let categories = [];\r\n+    if (categoryIds.length > 0) {\r\n+      categories = await Category.find({\r\n+        _id: { $in: categoryIds.map(id => new mongoose.Types.ObjectId(id)) }\r\n+      }).populate('subcategories');\r\n+    }\r\n+    \r\n+    // Fallback if no categories found\r\n+    if (categories.length === 0) {\r\n+      console.log('No configured categories found, using fallback...');\r\n+      categories = await Category.find({ status: 'active' })\r\n+        .limit(categorySection.maxCategories || 6)\r\n+        .populate('subcategories');\r\n+    }\r\n+    \r\n+    console.log('Final categories for file update:', categories.length);\r\n+    \r\n+    // Update static file\r\n+    const fileUpdateResult = await updateGiftCategoriesFile(categories, {\r\n+      maxCategories: categorySection.maxCategories,\r\n+      layout: categorySection.layout,\r\n+      showSubcategories: categorySection.showSubcategories,\r\n+      updatedBy: 'manual_refresh',\r\n+      pageId: pageId,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+    \r\n+    console.log('File update result:', fileUpdateResult);\r\n+    \r\n+    if (fileUpdateResult.success) {\r\n+      console.log('✅ Static file updated successfully');\r\n+      \r\n+      return res.json({\r\n+        success: true,\r\n+        message: 'Static file refreshed successfully',\r\n+        data: {\r\n+          enabled: categorySection.enabled,\r\n+          categories: categories,\r\n+          config: {\r\n+            maxCategories: categorySection.maxCategories,\r\n+            layout: categorySection.layout,\r\n+            showSubcategories: categorySection.showSubcategories\r\n+          },\r\n+          fileUpdate: fileUpdateResult\r\n+        }\r\n+      });\r\n+    } else {\r\n+      return res.status(500).json({\r\n+        success: false,\r\n+        message: 'Failed to update static file',\r\n+        error: fileUpdateResult.error\r\n+      });\r\n+    }\r\n+    \r\n+  } catch (error) {\r\n+    console.error('❌ Error refreshing static file:', error);\r\n+    res.status(500).json({\r\n+      success: false,\r\n+      message: 'Failed to refresh static file',\r\n+      error: error.message\r\n+    });\r\n+  }\r\n+};\r\n"
                }
            ],
            "date": 1753126463759,
            "name": "Commit-0",
            "content": "const PageConfig = require('../models/PageConfig');\r\nconst Category = require('../models/Category');\r\n\r\n// Initialize default page configuration if not exists\r\nconst initializePageConfig = async (pageId) => {\r\n  let pageConfig = await PageConfig.findById(pageId);\r\n  \r\n  if (!pageConfig) {\r\n    // Create default configuration for home page\r\n    const defaultConfig = {\r\n      _id: pageId,\r\n      name: pageId === 'home' ? 'Home Page' : 'Corporate Page',\r\n      slug: pageId === 'home' ? '/' : '/corporate',\r\n      sections: [\r\n        {\r\n          sectionType: 'categorySection',\r\n          enabled: true,\r\n          order: 1,\r\n          config: {\r\n            maxCategories: 6,\r\n            categoryIds: [], // Array of selected category IDs\r\n            showSubcategories: true,\r\n            layout: 'grid'\r\n          }\r\n        },\r\n        {\r\n          sectionType: 'sliderSection',\r\n          enabled: true,\r\n          order: 2,\r\n          config: {\r\n            autoplay: true,\r\n            duration: 5000,\r\n            slides: []\r\n          }\r\n        },\r\n        {\r\n          sectionType: 'productSection',\r\n          enabled: true,\r\n          order: 3,\r\n          config: {\r\n            title: 'Featured Products',\r\n            maxProducts: 8,\r\n            category: null\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    \r\n    pageConfig = new PageConfig(defaultConfig);\r\n    await pageConfig.save();\r\n  }\r\n  \r\n  return pageConfig;\r\n};\r\n\r\n// Get page configuration\r\nexports.getPageConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey } = req.params;\r\n    const pageConfig = await initializePageConfig(pageKey);\r\n    \r\n    // For each category section, populate with actual categories\r\n    for (let section of pageConfig.sections) {\r\n      if (section.sectionType === 'categorySection') {\r\n        const categories = await Category.find({ status: true })\r\n          .select('name image description')\r\n          .lean();\r\n        section.config.availableCategories = categories;\r\n      }\r\n    }\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: pageConfig\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching page config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch page configuration' \r\n    });\r\n  }\r\n};\r\n\r\n// Get specific section configuration\r\nexports.getSectionConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey, sectionKey } = req.params;\r\n    \r\n    const pageConfig = await initializePageConfig(pageKey);\r\n    const section = pageConfig.sections.find(s => s.sectionType === `${sectionKey}Section`);\r\n    \r\n    if (!section) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Section not found'\r\n      });\r\n    }\r\n\r\n    // For category section, also fetch actual categories\r\n    if (sectionKey === 'category' || sectionKey === 'giftCategories') {\r\n      const categories = await Category.find({ status: true })\r\n        .select('name image description')\r\n        .lean();\r\n      section.config.availableCategories = categories;\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: section\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching section config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch section configuration' \r\n    });\r\n  }\r\n};\r\n\r\n// Update section configuration\r\nexports.updateSectionConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey, sectionKey } = req.params;\r\n    const updateData = req.body;\r\n    \r\n    let pageConfig = await PageConfig.findById(pageKey);\r\n    if (!pageConfig) {\r\n      pageConfig = await initializePageConfig(pageKey);\r\n    }\r\n    \r\n    // Find and update the specific section\r\n    const sectionIndex = pageConfig.sections.findIndex(s => s.sectionType === `${sectionKey}Section`);\r\n    \r\n    if (sectionIndex === -1) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Section not found' \r\n      });\r\n    }\r\n    \r\n    // Update the section configuration\r\n    pageConfig.sections[sectionIndex] = {\r\n      ...pageConfig.sections[sectionIndex].toObject(),\r\n      ...updateData,\r\n      sectionType: `${sectionKey}Section` // Ensure sectionType doesn't change\r\n    };\r\n\r\n    pageConfig.lastModified = new Date();\r\n    await pageConfig.save();\r\n\r\n    console.log(`Updated ${pageKey}.${sectionKey}:`, updateData);\r\n    \r\n    res.json({ \r\n      success: true, \r\n      message: 'Section updated successfully',\r\n      data: pageConfig.sections[sectionIndex]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating section config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to update section configuration' \r\n    });\r\n  }\r\n};\r\n\r\n// Get categories for frontend display (filtered by page configuration)\r\nexports.getCategoriesForDisplay = async (req, res) => {\r\n  try {\r\n    const { pageKey } = req.params;\r\n    \r\n    // Get page configuration\r\n    const pageConfig = await PageConfig.findById(pageKey);\r\n    if (!pageConfig) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Page configuration not found' \r\n      });\r\n    }\r\n    \r\n    // Find category section\r\n    const categorySection = pageConfig.sections.find(s => s.sectionType === 'categorySection');\r\n    if (!categorySection || !categorySection.enabled) {\r\n      return res.json({\r\n        success: true,\r\n        data: {\r\n          enabled: false,\r\n          categories: []\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Get categories based on configuration\r\n    let query = { status: true };\r\n    if (categorySection.config.categoryIds && categorySection.config.categoryIds.length > 0) {\r\n      query._id = { $in: categorySection.config.categoryIds };\r\n    }\r\n    \r\n    let categories = await Category.find(query)\r\n      .select('name image description')\r\n      .lean();\r\n    \r\n    // Apply maxCategories limit\r\n    if (categorySection.config.maxCategories && categorySection.config.maxCategories > 0) {\r\n      categories = categories.slice(0, categorySection.config.maxCategories);\r\n    }\r\n    \r\n    // Transform for frontend\r\n    const transformedCategories = categories.map(cat => ({\r\n      id: cat._id,\r\n      name: cat.name,\r\n      image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n      icon: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n      description: cat.description || '',\r\n      enabled: true\r\n    }));\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        enabled: categorySection.enabled,\r\n        categories: transformedCategories,\r\n        config: categorySection.config\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching categories for display:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch categories' \r\n    });\r\n  }\r\n};\r\n\r\n// Get all categories (for admin selection)\r\nexports.getAllCategories = async (req, res) => {\r\n  try {\r\n    const categories = await Category.find({ status: true })\r\n      .select('name image description')\r\n      .sort({ name: 1 })\r\n      .lean();\r\n    \r\n    const transformedCategories = categories.map(cat => ({\r\n      id: cat._id,\r\n      value: cat._id,\r\n      label: cat.name,\r\n      name: cat.name,\r\n      image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n      description: cat.description || ''\r\n    }));\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: transformedCategories\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching all categories:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch categories' \r\n    });\r\n  }\r\n};\r\n\r\n// Update entire page configuration\r\nexports.updatePageConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey } = req.params;\r\n    const { sections } = req.body;\r\n    \r\n    let pageConfig = await PageConfig.findById(pageKey);\r\n    if (!pageConfig) {\r\n      pageConfig = await initializePageConfig(pageKey);\r\n    }\r\n    \r\n    // Update sections\r\n    if (sections) {\r\n      pageConfig.sections = sections;\r\n    }\r\n    \r\n    pageConfig.lastModified = new Date();\r\n    await pageConfig.save();\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'Page configuration updated successfully',\r\n      data: pageConfig\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating page config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to update page configuration' \r\n    });\r\n  }\r\n};\r\n"
        }
    ]
}