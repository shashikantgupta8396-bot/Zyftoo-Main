{
    "sourceFile": "backend/src/controllers/AdminController/PageSectionController/categorySectionConfiguration.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753454690895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753454690895,
            "name": "Commit-0",
            "content": "const PageConfig = require('../../../models/PageConfig');\r\nconst Category = require('../../../models/Category');\r\nconst Subcategory = require('../../../models/Subcategory');\r\nconst mongoose = require('mongoose');\r\n\r\nclass CategorySectionConfigurationController {\r\n  \r\n  /**\r\n   * Get category section configuration for a specific page\r\n   * Based on actual PageConfig structure from database\r\n   */\r\n  async getCategorySectionConfig(req, res) {\r\n    try {\r\n      const { pageId } = req.params;\r\n      \r\n      console.log(`üîç [CategorySectionConfig] Fetching config for page: ${pageId}`);\r\n      \r\n      // Validate pageId\r\n      if (!pageId) {\r\n        console.log(`‚ùå [CategorySectionConfig] Missing pageId parameter`);\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Page ID is required',\r\n          errorCode: 'MISSING_PAGE_ID',\r\n          errorLocation: 'getCategorySectionConfig - parameter validation'\r\n        });\r\n      }\r\n\r\n      // Get page configuration\r\n      const pageConfig = await PageConfig.findOne({ _id: pageId });\r\n      if (!pageConfig) {\r\n        console.log(`‚ùå [CategorySectionConfig] Page config not found for: ${pageId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: `Page configuration not found for pageId: ${pageId}`,\r\n          errorCode: 'PAGE_CONFIG_NOT_FOUND',\r\n          errorLocation: 'getCategorySectionConfig - PageConfig.findOne',\r\n          pageId\r\n        });\r\n      }\r\n\r\n      console.log(`‚úÖ [CategorySectionConfig] Found page config with ${pageConfig.sections.length} sections`);\r\n\r\n      // Find category section in the page config\r\n      const categorySection = pageConfig.sections.find(\r\n        section => section.sectionType === 'categorySection'\r\n      );\r\n\r\n      if (!categorySection) {\r\n        console.log(`‚ùå [CategorySectionConfig] Category section not found in page: ${pageId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'Category section not found in page configuration',\r\n          errorCode: 'CATEGORY_SECTION_NOT_FOUND',\r\n          errorLocation: 'getCategorySectionConfig - section search',\r\n          pageId,\r\n          availableSections: pageConfig.sections.map(s => s.sectionType)\r\n        });\r\n      }\r\n\r\n      console.log(`üìã [CategorySectionConfig] Found category section with ${categorySection.config.categories?.length || 0} categories`);\r\n\r\n      // Extract category IDs from configuration\r\n      const categoryIds = categorySection.config.categories\r\n        ?.filter(cat => cat.enabled)\r\n        ?.map(cat => cat.categoryId) || [];\r\n      \r\n      console.log(`üéØ [CategorySectionConfig] Extracting data for categoryIds:`, categoryIds);\r\n\r\n      if (categoryIds.length === 0) {\r\n        console.log(`‚ö†Ô∏è [CategorySectionConfig] No enabled categories found`);\r\n        return res.status(200).json({\r\n          success: true,\r\n          data: {\r\n            sectionConfig: categorySection,\r\n            categoriesData: {\r\n              mainCategories: [],\r\n              subcategories: []\r\n            },\r\n            pageId,\r\n            lastModified: pageConfig.lastModified\r\n          },\r\n          message: 'No enabled categories configured'\r\n        });\r\n      }\r\n\r\n      // Fetch detailed category data\r\n      const categoriesData = await this.fetchCategoryDetails(categoryIds);\r\n      \r\n      console.log(`‚úÖ [CategorySectionConfig] Successfully fetched category data`);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          sectionConfig: categorySection,\r\n          categoriesData,\r\n          pageId,\r\n          lastModified: pageConfig.lastModified\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå [CategorySectionConfig] Error in getCategorySectionConfig:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error while fetching category section configuration',\r\n        errorCode: 'INTERNAL_SERVER_ERROR',\r\n        errorLocation: 'getCategorySectionConfig - catch block',\r\n        error: error.message,\r\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to fetch category details with subcategories\r\n   * Based on actual Category/Subcategory structure\r\n   */\r\n  async fetchCategoryDetails(categoryIds) {\r\n    try {\r\n      console.log(`üîÑ [CategorySectionConfig] Fetching details for categories:`, categoryIds);\r\n\r\n      // Validate categoryIds array\r\n      if (!Array.isArray(categoryIds) || categoryIds.length === 0) {\r\n        console.log(`‚ö†Ô∏è [CategorySectionConfig] Invalid or empty categoryIds array`);\r\n        return {\r\n          mainCategories: [],\r\n          subcategories: []\r\n        };\r\n      }\r\n\r\n      // Convert string IDs to ObjectIds for MongoDB query\r\n      let objectIds;\r\n      try {\r\n        objectIds = categoryIds.map(id => {\r\n          if (!mongoose.Types.ObjectId.isValid(id)) {\r\n            throw new Error(`Invalid ObjectId: ${id}`);\r\n          }\r\n          return new mongoose.Types.ObjectId(id);\r\n        });\r\n      } catch (idError) {\r\n        console.error(`‚ùå [CategorySectionConfig] Invalid category ID format:`, idError.message);\r\n        throw new Error(`Invalid category ID format: ${idError.message}`);\r\n      }\r\n\r\n      // Fetch main categories (parent: null)\r\n      const mainCategories = await Category.find({\r\n        _id: { $in: objectIds },\r\n        parent: null,\r\n        status: true\r\n      }).lean();\r\n\r\n      console.log(`üì¶ [CategorySectionConfig] Found ${mainCategories.length} main categories out of ${categoryIds.length} requested`);\r\n\r\n      // Log missing categories for debugging\r\n      const foundCategoryIds = mainCategories.map(cat => cat._id.toString());\r\n      const missingCategoryIds = categoryIds.filter(id => !foundCategoryIds.includes(id));\r\n      if (missingCategoryIds.length > 0) {\r\n        console.log(`‚ö†Ô∏è [CategorySectionConfig] Missing or inactive categories:`, missingCategoryIds);\r\n      }\r\n\r\n      // Get all main category IDs to fetch their subcategories\r\n      const mainCategoryIds = mainCategories.map(cat => cat._id);\r\n\r\n      // Fetch subcategories for these main categories\r\n      let subcategories = [];\r\n      if (mainCategoryIds.length > 0) {\r\n        subcategories = await Subcategory.find({\r\n          parent: { $in: mainCategoryIds },\r\n          status: true\r\n        }).populate('parent', 'name').lean();\r\n\r\n        console.log(`üì¶ [CategorySectionConfig] Found ${subcategories.length} subcategories`);\r\n      }\r\n\r\n      // Format the response data\r\n      const formattedMainCategories = mainCategories.map(cat => ({\r\n        id: cat._id.toString(),\r\n        name: cat.name,\r\n        description: cat.description || '',\r\n        image: cat.image?.url || null,\r\n        status: cat.status\r\n      }));\r\n\r\n      const formattedSubcategories = subcategories.map(sub => ({\r\n        id: sub._id.toString(),\r\n        name: sub.name,\r\n        description: sub.description || '',\r\n        image: sub.image?.url || null,\r\n        parent: sub.parent._id.toString(),\r\n        parentName: sub.parent.name,\r\n        status: sub.status\r\n      }));\r\n\r\n      console.log(`‚úÖ [CategorySectionConfig] Formatted data - Categories: ${formattedMainCategories.length}, Subcategories: ${formattedSubcategories.length}`);\r\n\r\n      return {\r\n        mainCategories: formattedMainCategories,\r\n        subcategories: formattedSubcategories\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå [CategorySectionConfig] Error in fetchCategoryDetails:', error);\r\n      throw new Error(`Failed to fetch category details: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update category section configuration\r\n   * Based on actual PageConfig structure\r\n   */\r\n  async updateCategorySectionConfig(req, res) {\r\n    try {\r\n      const { pageId } = req.params;\r\n      const { categoryIds, enabled, maxCategories, layout, showSubcategories } = req.body;\r\n\r\n      console.log(`üîÑ [CategorySectionConfig] Updating config for page: ${pageId}`);\r\n      console.log(`üìù [CategorySectionConfig] New config:`, { categoryIds, enabled, maxCategories, layout, showSubcategories });\r\n\r\n      // Validate required parameters\r\n      if (!pageId) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Page ID is required',\r\n          errorCode: 'MISSING_PAGE_ID',\r\n          errorLocation: 'updateCategorySectionConfig - parameter validation'\r\n        });\r\n      }\r\n\r\n      if (!Array.isArray(categoryIds)) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Category IDs must be an array',\r\n          errorCode: 'INVALID_CATEGORY_IDS',\r\n          errorLocation: 'updateCategorySectionConfig - parameter validation'\r\n        });\r\n      }\r\n\r\n      // Validate category IDs exist and are valid ObjectIds\r\n      let objectIds;\r\n      try {\r\n        objectIds = categoryIds.map(id => {\r\n          if (!mongoose.Types.ObjectId.isValid(id)) {\r\n            throw new Error(`Invalid ObjectId: ${id}`);\r\n          }\r\n          return new mongoose.Types.ObjectId(id);\r\n        });\r\n      } catch (idError) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: `Invalid category ID format: ${idError.message}`,\r\n          errorCode: 'INVALID_OBJECT_ID',\r\n          errorLocation: 'updateCategorySectionConfig - ObjectId validation'\r\n        });\r\n      }\r\n\r\n      const validCategories = await Category.find({\r\n        _id: { $in: objectIds },\r\n        status: true\r\n      });\r\n\r\n      if (validCategories.length !== categoryIds.length) {\r\n        const validIds = validCategories.map(cat => cat._id.toString());\r\n        const invalidIds = categoryIds.filter(id => !validIds.includes(id));\r\n        \r\n        console.log(`‚ùå [CategorySectionConfig] Invalid categories found:`, invalidIds);\r\n        \r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Some category IDs are invalid or inactive',\r\n          errorCode: 'INVALID_CATEGORIES',\r\n          errorLocation: 'updateCategorySectionConfig - category validation',\r\n          validFound: validCategories.length,\r\n          requested: categoryIds.length,\r\n          invalidIds\r\n        });\r\n      }\r\n\r\n      // Format categories array according to PageConfig structure\r\n      const formattedCategories = categoryIds.map((categoryId, index) => ({\r\n        categoryId,\r\n        enabled: true,\r\n        order: index\r\n      }));\r\n\r\n      // Update page configuration using actual structure\r\n      const updateResult = await PageConfig.findOneAndUpdate(\r\n        { _id: pageId, 'sections.sectionType': 'categorySection' },\r\n        {\r\n          $set: {\r\n            'sections.$.enabled': enabled !== undefined ? enabled : true,\r\n            'sections.$.config.categories': formattedCategories,\r\n            'sections.$.config.maxCategories': maxCategories || 6,\r\n            'sections.$.config.layout': layout || 'grid',\r\n            'sections.$.config.showSubcategories': showSubcategories !== undefined ? showSubcategories : true,\r\n            lastModified: new Date(),\r\n            modifiedBy: req.user?.id || 'admin'\r\n          }\r\n        },\r\n        { new: true }\r\n      );\r\n\r\n      if (!updateResult) {\r\n        console.log(`‚ùå [CategorySectionConfig] Page or category section not found for update`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'Page configuration or category section not found',\r\n          errorCode: 'UPDATE_TARGET_NOT_FOUND',\r\n          errorLocation: 'updateCategorySectionConfig - PageConfig.findOneAndUpdate',\r\n          pageId\r\n        });\r\n      }\r\n\r\n      console.log(`‚úÖ [CategorySectionConfig] Successfully updated category section config`);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Category section configuration updated successfully',\r\n        data: updateResult\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå [CategorySectionConfig] Error in updateCategorySectionConfig:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error while updating category section configuration',\r\n        errorCode: 'INTERNAL_SERVER_ERROR',\r\n        errorLocation: 'updateCategorySectionConfig - catch block',\r\n        error: error.message,\r\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all available categories for selection\r\n   */\r\n  async getAvailableCategories(req, res) {\r\n    try {\r\n      console.log(`üîÑ [CategorySectionConfig] Fetching all available categories`);\r\n\r\n      // Fetch main categories (parent: null)\r\n      const mainCategories = await Category.find({\r\n        parent: null,\r\n        status: true\r\n      }).sort({ name: 1 }).lean();\r\n\r\n      // Fetch all subcategories with parent info\r\n      const subcategories = await Subcategory.find({\r\n        status: true\r\n      }).populate('parent', 'name').sort({ name: 1 }).lean();\r\n\r\n      console.log(`üì¶ [CategorySectionConfig] Found ${mainCategories.length} main categories and ${subcategories.length} subcategories`);\r\n\r\n      const formattedMainCategories = mainCategories.map(cat => ({\r\n        id: cat._id.toString(),\r\n        name: cat.name,\r\n        description: cat.description || '',\r\n        image: cat.image?.url || null\r\n      }));\r\n\r\n      const formattedSubcategories = subcategories.map(sub => ({\r\n        id: sub._id.toString(),\r\n        name: sub.name,\r\n        description: sub.description || '',\r\n        image: sub.image?.url || null,\r\n        parent: sub.parent._id.toString(),\r\n        parentName: sub.parent.name\r\n      }));\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          mainCategories: formattedMainCategories,\r\n          subcategories: formattedSubcategories\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå [CategorySectionConfig] Error in getAvailableCategories:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error while fetching available categories',\r\n        errorCode: 'INTERNAL_SERVER_ERROR',\r\n        errorLocation: 'getAvailableCategories - catch block',\r\n        error: error.message,\r\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get category section configuration for frontend display\r\n   * This endpoint will be used by ModernGiftCategories component\r\n   */\r\n  async getCategorySectionForDisplay(req, res) {\r\n    try {\r\n      const { pageId } = req.params;\r\n      \r\n      console.log(`üéØ [CategorySectionConfig] Fetching category section for display - Page: ${pageId}`);\r\n      \r\n      // Validate pageId\r\n      if (!pageId) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Page ID is required',\r\n          errorCode: 'MISSING_PAGE_ID',\r\n          errorLocation: 'getCategorySectionForDisplay - parameter validation'\r\n        });\r\n      }\r\n\r\n      // Get page configuration\r\n      const pageConfig = await PageConfig.findOne({ _id: pageId });\r\n      if (!pageConfig) {\r\n        console.log(`‚ùå [CategorySectionConfig] Page config not found for display: ${pageId}`);\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'Page configuration not found',\r\n          errorCode: 'PAGE_CONFIG_NOT_FOUND',\r\n          errorLocation: 'getCategorySectionForDisplay - PageConfig.findOne',\r\n          pageId\r\n        });\r\n      }\r\n\r\n      // Find category section\r\n      const categorySection = pageConfig.sections.find(\r\n        section => section.sectionType === 'categorySection'\r\n      );\r\n\r\n      if (!categorySection || !categorySection.enabled) {\r\n        console.log(`‚ö†Ô∏è [CategorySectionConfig] Category section disabled or not found for: ${pageId}`);\r\n        return res.status(200).json({\r\n          success: true,\r\n          data: {\r\n            categories: [],\r\n            metadata: {\r\n              enabled: false,\r\n              message: 'Category section is disabled or not configured'\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Extract enabled category IDs in order\r\n      const enabledCategories = categorySection.config.categories\r\n        ?.filter(cat => cat.enabled)\r\n        ?.sort((a, b) => a.order - b.order)\r\n        ?.map(cat => cat.categoryId) || [];\r\n\r\n      if (enabledCategories.length === 0) {\r\n        console.log(`‚ö†Ô∏è [CategorySectionConfig] No enabled categories for display: ${pageId}`);\r\n        return res.status(200).json({\r\n          success: true,\r\n          data: {\r\n            categories: [],\r\n            metadata: {\r\n              enabled: true,\r\n              message: 'No categories configured for display'\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      // Fetch category details for display\r\n      const categoriesData = await this.fetchCategoryDetailsForDisplay(enabledCategories);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        data: {\r\n          categories: categoriesData,\r\n          metadata: {\r\n            enabled: true,\r\n            layout: categorySection.config.layout || 'grid',\r\n            showSubcategories: categorySection.config.showSubcategories !== false,\r\n            maxCategories: categorySection.config.maxCategories || 6,\r\n            source: 'api',\r\n            lastUpdated: pageConfig.lastModified\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå [CategorySectionConfig] Error in getCategorySectionForDisplay:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error while fetching category section for display',\r\n        errorCode: 'INTERNAL_SERVER_ERROR',\r\n        errorLocation: 'getCategorySectionForDisplay - catch block',\r\n        error: error.message,\r\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to fetch categories for frontend display\r\n   * Returns data in the format expected by ModernGiftCategories component\r\n   */\r\n  async fetchCategoryDetailsForDisplay(categoryIds) {\r\n    try {\r\n      // Validate and convert IDs\r\n      const objectIds = categoryIds.map(id => {\r\n        if (!mongoose.Types.ObjectId.isValid(id)) {\r\n          throw new Error(`Invalid ObjectId for display: ${id}`);\r\n        }\r\n        return new mongoose.Types.ObjectId(id);\r\n      });\r\n\r\n      // Fetch main categories\r\n      const mainCategories = await Category.find({\r\n        _id: { $in: objectIds },\r\n        parent: null,\r\n        status: true\r\n      }).lean();\r\n\r\n      // Create a map to maintain order\r\n      const categoryMap = new Map();\r\n      mainCategories.forEach(cat => {\r\n        categoryMap.set(cat._id.toString(), cat);\r\n      });\r\n\r\n      // Get subcategories for these categories\r\n      const subcategories = await Subcategory.find({\r\n        parent: { $in: objectIds },\r\n        status: true\r\n      }).lean();\r\n\r\n      // Group subcategories by parent\r\n      const subcategoryMap = new Map();\r\n      subcategories.forEach(sub => {\r\n        const parentId = sub.parent.toString();\r\n        if (!subcategoryMap.has(parentId)) {\r\n          subcategoryMap.set(parentId, []);\r\n        }\r\n        subcategoryMap.get(parentId).push({\r\n          id: sub._id.toString(),\r\n          name: sub.name,\r\n          link: `/shop/subcategory/${sub._id}`,\r\n          isActive: sub.status\r\n        });\r\n      });\r\n\r\n      // Format categories in the order specified\r\n      const formattedCategories = categoryIds\r\n        .map(id => categoryMap.get(id))\r\n        .filter(Boolean)\r\n        .map((cat, index) => ({\r\n          id: cat._id.toString(),\r\n          name: cat.name,\r\n          slug: cat.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, ''),\r\n          image: cat.image?.url || `/assets/img/features/feature-icon-0${(index % 6) + 1}.png`,\r\n          description: cat.description || '',\r\n          isActive: cat.status,\r\n          sortOrder: index + 1,\r\n          subcategories: subcategoryMap.get(cat._id.toString()) || []\r\n        }));\r\n\r\n      console.log(`‚úÖ [CategorySectionConfig] Formatted ${formattedCategories.length} categories for display`);\r\n\r\n      return formattedCategories;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå [CategorySectionConfig] Error in fetchCategoryDetailsForDisplay:', error);\r\n      throw new Error(`Failed to fetch category details for display: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new CategorySectionConfigurationController();\r\n"
        }
    ]
}