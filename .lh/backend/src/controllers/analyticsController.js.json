{
    "sourceFile": "backend/src/controllers/analyticsController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753711237032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753711237032,
            "name": "Commit-0",
            "content": "const Product = require('../models/Product');\r\n\r\n/**\r\n * Track product view\r\n */\r\nconst trackProductView = async (req, res) => {\r\n  try {\r\n    const { productId } = req.params;\r\n    const { userType = 'individual', source = 'web' } = req.body;\r\n\r\n    // Validate product exists\r\n    const product = await Product.findById(productId);\r\n    if (!product) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Product not found'\r\n      });\r\n    }\r\n\r\n    // Initialize analytics if not exists\r\n    if (!product.analytics) {\r\n      product.analytics = {\r\n        views: { total: 0, individual: 0, corporate: 0 },\r\n        dailyViews: 0,\r\n        weeklyViews: 0,\r\n        monthlyViews: 0,\r\n        popularityScore: 0,\r\n        lastViewedAt: new Date(),\r\n        topSources: []\r\n      };\r\n    }\r\n\r\n    // Update view counts\r\n    product.analytics.views.total += 1;\r\n    if (userType === 'corporate') {\r\n      product.analytics.views.corporate += 1;\r\n    } else {\r\n      product.analytics.views.individual += 1;\r\n    }\r\n\r\n    // Update time-based views (simplified - would need proper time window logic in production)\r\n    product.analytics.dailyViews += 1;\r\n    product.analytics.weeklyViews += 1;\r\n    product.analytics.monthlyViews += 1;\r\n    product.analytics.lastViewedAt = new Date();\r\n\r\n    // Update popularity score (using the virtual method)\r\n    const totalViews = product.analytics.views.total;\r\n    const recentViews = product.analytics.weeklyViews;\r\n    const corporateViews = product.analytics.views.corporate;\r\n    product.analytics.popularityScore = (totalViews * 0.3) + (recentViews * 0.5) + (corporateViews * 0.2);\r\n\r\n    // Track top sources\r\n    if (source) {\r\n      const existingSource = product.analytics.topSources?.find(s => s.source === source);\r\n      if (existingSource) {\r\n        existingSource.views += 1;\r\n      } else {\r\n        if (!product.analytics.topSources) product.analytics.topSources = [];\r\n        product.analytics.topSources.push({ source, views: 1 });\r\n      }\r\n      \r\n      // Keep only top 5 sources\r\n      product.analytics.topSources = product.analytics.topSources\r\n        .sort((a, b) => b.views - a.views)\r\n        .slice(0, 5);\r\n    }\r\n\r\n    // Save the updated product\r\n    await product.save();\r\n\r\n    res.json({\r\n      success: true,\r\n      message: 'Product view tracked successfully',\r\n      data: {\r\n        productId: product._id,\r\n        totalViews: product.analytics.views.total,\r\n        popularityScore: product.analytics.popularityScore\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error tracking product view:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Failed to track product view',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Get product analytics\r\n */\r\nconst getProductAnalytics = async (req, res) => {\r\n  try {\r\n    const { productId } = req.params;\r\n\r\n    const product = await Product.findById(productId)\r\n      .select('name analytics')\r\n      .lean();\r\n\r\n    if (!product) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Product not found'\r\n      });\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        productId: product._id,\r\n        productName: product.name,\r\n        analytics: product.analytics || {\r\n          views: { total: 0, individual: 0, corporate: 0 },\r\n          dailyViews: 0,\r\n          weeklyViews: 0,\r\n          monthlyViews: 0,\r\n          popularityScore: 0,\r\n          topSources: []\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching product analytics:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Failed to fetch product analytics',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Get popular products\r\n */\r\nconst getPopularProducts = async (req, res) => {\r\n  try {\r\n    const { \r\n      limit = 10, \r\n      userType = 'all',\r\n      category,\r\n      timeFrame = 'all' // all, daily, weekly, monthly\r\n    } = req.query;\r\n\r\n    let sortField = 'analytics.popularityScore';\r\n    \r\n    // Adjust sorting based on time frame\r\n    if (timeFrame === 'daily') {\r\n      sortField = 'analytics.dailyViews';\r\n    } else if (timeFrame === 'weekly') {\r\n      sortField = 'analytics.weeklyViews';\r\n    } else if (timeFrame === 'monthly') {\r\n      sortField = 'analytics.monthlyViews';\r\n    }\r\n\r\n    // Build query\r\n    let query = {};\r\n    if (category) {\r\n      query.category = category;\r\n    }\r\n\r\n    const products = await Product.find(query)\r\n      .select('name price retailPrice corporatePricing analytics images category')\r\n      .sort({ [sortField]: -1 })\r\n      .limit(parseInt(limit))\r\n      .lean();\r\n\r\n    // Filter and enhance results\r\n    const enhancedProducts = products.map(product => ({\r\n      ...product,\r\n      displayPrice: product.retailPrice?.sellingPrice || product.price || 0,\r\n      hasActiveCorporatePricing: product.corporatePricing?.enabled && \r\n                                 product.corporatePricing?.priceTiers?.length > 0,\r\n      popularityRank: product.analytics?.popularityScore || 0,\r\n      totalViews: product.analytics?.views?.total || 0,\r\n      recentViews: product.analytics?.[timeFrame === 'daily' ? 'dailyViews' : \r\n                                     timeFrame === 'weekly' ? 'weeklyViews' : \r\n                                     timeFrame === 'monthly' ? 'monthlyViews' : 'views.total'] || 0\r\n    }));\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        products: enhancedProducts,\r\n        metadata: {\r\n          total: enhancedProducts.length,\r\n          timeFrame,\r\n          userType,\r\n          category: category || 'all'\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching popular products:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Failed to fetch popular products',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Reset analytics (admin only)\r\n */\r\nconst resetProductAnalytics = async (req, res) => {\r\n  try {\r\n    const { productId } = req.params;\r\n    const { resetType = 'all' } = req.body; // all, daily, weekly, monthly\r\n\r\n    const product = await Product.findById(productId);\r\n    if (!product) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        message: 'Product not found'\r\n      });\r\n    }\r\n\r\n    if (!product.analytics) {\r\n      return res.json({\r\n        success: true,\r\n        message: 'Product analytics already empty'\r\n      });\r\n    }\r\n\r\n    // Reset based on type\r\n    if (resetType === 'all') {\r\n      product.analytics = {\r\n        views: { total: 0, individual: 0, corporate: 0 },\r\n        dailyViews: 0,\r\n        weeklyViews: 0,\r\n        monthlyViews: 0,\r\n        popularityScore: 0,\r\n        lastViewedAt: new Date(),\r\n        topSources: []\r\n      };\r\n    } else if (resetType === 'daily') {\r\n      product.analytics.dailyViews = 0;\r\n    } else if (resetType === 'weekly') {\r\n      product.analytics.weeklyViews = 0;\r\n    } else if (resetType === 'monthly') {\r\n      product.analytics.monthlyViews = 0;\r\n    }\r\n\r\n    await product.save();\r\n\r\n    res.json({\r\n      success: true,\r\n      message: `Product analytics ${resetType} data reset successfully`,\r\n      data: {\r\n        productId: product._id,\r\n        analytics: product.analytics\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error resetting product analytics:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Failed to reset product analytics',\r\n      error: error.message\r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  trackProductView,\r\n  getProductAnalytics,\r\n  getPopularProducts,\r\n  resetProductAnalytics\r\n};\r\n"
        }
    ]
}