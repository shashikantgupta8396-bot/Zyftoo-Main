{
    "sourceFile": "backend/src/controllers/subcategoryController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753116436732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753121118032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,10 @@\n     console.log('Fetched subcategories from DB:', JSON.stringify(subcategories, null, 2));\r\n     \r\n     res.json({\r\n       success: true,\r\n-      data: subcategories\r\n+      data: subcategories,\r\n+      count: subcategories.length\r\n     });\r\n   } catch (err) {\r\n     console.error('Get subcategories error:', err);\r\n     res.status(500).json({ \r\n"
                }
            ],
            "date": 1753116436732,
            "name": "Commit-0",
            "content": "const Subcategory = require('../models/Subcategory');\r\nconst Category = require('../models/Category');\r\nconst Media = require('../models/Media');\r\nconst { getImageUrl, deleteImageFile } = require('../utils/fileUpload');\r\n\r\n// Create subcategory\r\nexports.createSubcategory = async (req, res) => {\r\n  try {\r\n    const {\r\n      name = 'Default Subcategory',\r\n      description = '',\r\n      parent,\r\n      status = true\r\n    } = req.body || {};\r\n    \r\n    // Validate parent category exists\r\n    if (!parent) {\r\n      return res.status(400).json({ error: 'Parent category is required' });\r\n    }\r\n    \r\n    const parentCategory = await Category.findById(parent);\r\n    if (!parentCategory) {\r\n      return res.status(400).json({ error: 'Parent category not found' });\r\n    }\r\n    \r\n    const subcategoryData = { name, description, parent, status };\r\n    \r\n    // Handle image upload if file is present\r\n    if (req.file) {\r\n      const imageUrl = getImageUrl(req.file.path, req);\r\n      subcategoryData.image = {\r\n        url: imageUrl,\r\n        path: req.file.path,\r\n        filename: req.file.filename\r\n      };\r\n      \r\n      // Create media record\r\n      const media = new Media({\r\n        filename: req.file.filename,\r\n        originalName: req.file.originalname,\r\n        mimetype: req.file.mimetype,\r\n        size: req.file.size,\r\n        path: req.file.path,\r\n        url: imageUrl,\r\n        category: 'subcategory',\r\n        alt: `${name} image`\r\n      });\r\n      await media.save();\r\n    }\r\n    \r\n    console.log('Creating subcategory with data:', subcategoryData);\r\n    const subcategory = new Subcategory(subcategoryData);\r\n    await subcategory.save();\r\n    \r\n    // Populate parent category for response\r\n    await subcategory.populate('parent', 'name _id');\r\n    \r\n    console.log('Subcategory saved:', subcategory);\r\n    res.status(201).json({\r\n      success: true,\r\n      data: subcategory,\r\n      message: 'Subcategory created successfully'\r\n    });\r\n  } catch (err) {\r\n    console.error('Subcategory create error:', err);\r\n    res.status(400).json({ \r\n      success: false,\r\n      error: err.message \r\n    });\r\n  }\r\n};\r\n\r\n// Get all subcategories\r\nexports.getSubcategories = async (req, res) => {\r\n  try {\r\n    const subcategories = await Subcategory.find()\r\n      .populate('parent', 'name _id')\r\n      .sort({ createdAt: -1 });\r\n    \r\n    console.log('Fetched subcategories from DB:', JSON.stringify(subcategories, null, 2));\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: subcategories\r\n    });\r\n  } catch (err) {\r\n    console.error('Get subcategories error:', err);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: err.message \r\n    });\r\n  }\r\n};\r\n\r\n// Get subcategories by parent category\r\nexports.getSubcategoriesByParent = async (req, res) => {\r\n  try {\r\n    const { parentId } = req.params;\r\n    \r\n    const subcategories = await Subcategory.find({ parent: parentId })\r\n      .populate('parent', 'name _id')\r\n      .sort({ name: 1 });\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: subcategories\r\n    });\r\n  } catch (err) {\r\n    console.error('Get subcategories by parent error:', err);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: err.message \r\n    });\r\n  }\r\n};\r\n\r\n// Get single subcategory\r\nexports.getSubcategory = async (req, res) => {\r\n  try {\r\n    const subcategory = await Subcategory.findById(req.params.id).populate('parent', 'name _id');\r\n    if (!subcategory) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Subcategory not found' \r\n      });\r\n    }\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: subcategory\r\n    });\r\n  } catch (err) {\r\n    console.error('Get subcategory error:', err);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: err.message \r\n    });\r\n  }\r\n};\r\n\r\n// Update subcategory\r\nexports.updateSubcategory = async (req, res) => {\r\n  try {\r\n    const existingSubcategory = await Subcategory.findById(req.params.id);\r\n    if (!existingSubcategory) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Subcategory not found' \r\n      });\r\n    }\r\n    \r\n    const updateData = { ...req.body };\r\n    \r\n    // Validate parent category if being updated\r\n    if (updateData.parent) {\r\n      const parentCategory = await Category.findById(updateData.parent);\r\n      if (!parentCategory) {\r\n        return res.status(400).json({ \r\n          success: false,\r\n          error: 'Parent category not found' \r\n        });\r\n      }\r\n    }\r\n    \r\n    // Handle image upload if file is present\r\n    if (req.file) {\r\n      // Delete old image if it exists\r\n      if (existingSubcategory.image && existingSubcategory.image.path) {\r\n        deleteImageFile(existingSubcategory.image.path);\r\n      }\r\n      \r\n      // Set new image data\r\n      const imageUrl = getImageUrl(req.file.path, req);\r\n      updateData.image = {\r\n        url: imageUrl,\r\n        path: req.file.path,\r\n        filename: req.file.filename\r\n      };\r\n      \r\n      // Create media record\r\n      const media = new Media({\r\n        filename: req.file.filename,\r\n        originalName: req.file.originalname,\r\n        mimetype: req.file.mimetype,\r\n        size: req.file.size,\r\n        path: req.file.path,\r\n        url: imageUrl,\r\n        category: 'subcategory',\r\n        alt: `${updateData.name || existingSubcategory.name} image`\r\n      });\r\n      await media.save();\r\n    }\r\n    \r\n    const subcategory = await Subcategory.findByIdAndUpdate(\r\n      req.params.id, \r\n      updateData, \r\n      { new: true }\r\n    ).populate('parent', 'name _id');\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: subcategory,\r\n      message: 'Subcategory updated successfully'\r\n    });\r\n  } catch (err) {\r\n    console.error('Update subcategory error:', err);\r\n    res.status(400).json({ \r\n      success: false,\r\n      error: err.message \r\n    });\r\n  }\r\n};\r\n\r\n// Delete subcategory\r\nexports.deleteSubcategory = async (req, res) => {\r\n  try {\r\n    const subcategory = await Subcategory.findById(req.params.id);\r\n    if (!subcategory) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Subcategory not found' \r\n      });\r\n    }\r\n    \r\n    // Delete image file if it exists\r\n    if (subcategory.image && subcategory.image.path) {\r\n      deleteImageFile(subcategory.image.path);\r\n    }\r\n    \r\n    await Subcategory.findByIdAndDelete(req.params.id);\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'Subcategory deleted successfully'\r\n    });\r\n  } catch (err) {\r\n    console.error('Delete subcategory error:', err);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: err.message \r\n    });\r\n  }\r\n};\r\n"
        }
    ]
}