{
    "sourceFile": "backend/src/controllers/categoryController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753113503122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753121117991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,12 +61,19 @@\n       ...cat.toObject(),\r\n       id: cat._id.toString(), // Add id field for frontend compatibility\r\n     }));\r\n     \r\n-    res.json(transformedCategories);\r\n+    res.json({\r\n+      success: true,\r\n+      data: transformedCategories,\r\n+      count: transformedCategories.length\r\n+    });\r\n   } catch (err) {\r\n     console.error('Get categories error:', err);\r\n-    res.status(500).json({ error: err.message });\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: err.message \r\n+    });\r\n   }\r\n };\r\n \r\n // Get single category\r\n"
                },
                {
                    "date": 1753121554442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,19 +61,12 @@\n       ...cat.toObject(),\r\n       id: cat._id.toString(), // Add id field for frontend compatibility\r\n     }));\r\n     \r\n-    res.json({\r\n-      success: true,\r\n-      data: transformedCategories,\r\n-      count: transformedCategories.length\r\n-    });\r\n+    res.json(transformedCategories);\r\n   } catch (err) {\r\n     console.error('Get categories error:', err);\r\n-    res.status(500).json({ \r\n-      success: false,\r\n-      error: err.message \r\n-    });\r\n+    res.status(500).json({ error: err.message });\r\n   }\r\n };\r\n \r\n // Get single category\r\n"
                }
            ],
            "date": 1753113503122,
            "name": "Commit-0",
            "content": "const Category = require('../models/Category');\r\nconst Media = require('../models/Media');\r\nconst { getImageUrl, deleteImageFile } = require('../utils/fileUpload');\r\nconst path = require('path');\r\n\r\n// Create category\r\nexports.createCategory = async (req, res) => {\r\n  try {\r\n    // Fill missing fields with defaults\r\n    const {\r\n      name = 'Default Category',\r\n      description = '',\r\n      parent = null,\r\n      status = true\r\n    } = req.body || {};\r\n    \r\n    const categoryData = { name, description, parent, status };\r\n    \r\n    // Handle image upload if file is present\r\n    if (req.file) {\r\n      const imageUrl = getImageUrl(req.file.path, req);\r\n      categoryData.image = {\r\n        url: imageUrl,\r\n        path: req.file.path,\r\n        filename: req.file.filename\r\n      };\r\n      \r\n      // Create media record\r\n      const media = new Media({\r\n        filename: req.file.filename,\r\n        originalName: req.file.originalname,\r\n        mimetype: req.file.mimetype,\r\n        size: req.file.size,\r\n        path: req.file.path,\r\n        url: imageUrl,\r\n        category: parent ? 'subcategory' : 'category',\r\n        alt: `${name} image`\r\n      });\r\n      await media.save();\r\n    }\r\n    \r\n    console.log('REQ BODY (with defaults):', categoryData);\r\n    const category = new Category(categoryData);\r\n    await category.save();\r\n    console.log('CATEGORY SAVED:', category);\r\n    res.status(201).json(category);\r\n  } catch (err) {\r\n    console.error('CATEGORY CREATE ERROR:', err);\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Get all categories\r\nexports.getCategories = async (req, res) => {\r\n  try {\r\n    const categories = await Category.find().populate('parent', 'name _id');\r\n    console.log('Fetched categories from DB:', JSON.stringify(categories, null, 2));\r\n    \r\n    // Transform categories to include both id and _id fields for frontend compatibility\r\n    const transformedCategories = categories.map(cat => ({\r\n      ...cat.toObject(),\r\n      id: cat._id.toString(), // Add id field for frontend compatibility\r\n    }));\r\n    \r\n    res.json(transformedCategories);\r\n  } catch (err) {\r\n    console.error('Get categories error:', err);\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Get single category\r\nexports.getCategory = async (req, res) => {\r\n  try {\r\n    const category = await Category.findById(req.params.id).populate('parent');\r\n    if (!category) return res.status(404).json({ error: 'Category not found' });\r\n    \r\n    // Transform category to include id field\r\n    const transformedCategory = {\r\n      ...category.toObject(),\r\n      id: category._id.toString()\r\n    };\r\n    \r\n    res.json(transformedCategory);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Update category\r\nexports.updateCategory = async (req, res) => {\r\n  try {\r\n    const existingCategory = await Category.findById(req.params.id);\r\n    if (!existingCategory) return res.status(404).json({ error: 'Category not found' });\r\n    \r\n    const updateData = { ...req.body };\r\n    \r\n    // Handle image upload if file is present\r\n    if (req.file) {\r\n      // Delete old image if it exists\r\n      if (existingCategory.image && existingCategory.image.path) {\r\n        deleteImageFile(existingCategory.image.path);\r\n      }\r\n      \r\n      // Set new image data\r\n      const imageUrl = getImageUrl(req.file.path, req);\r\n      updateData.image = {\r\n        url: imageUrl,\r\n        path: req.file.path,\r\n        filename: req.file.filename\r\n      };\r\n      \r\n      // Create media record\r\n      const media = new Media({\r\n        filename: req.file.filename,\r\n        originalName: req.file.originalname,\r\n        mimetype: req.file.mimetype,\r\n        size: req.file.size,\r\n        path: req.file.path,\r\n        url: imageUrl,\r\n        category: existingCategory.parent ? 'subcategory' : 'category',\r\n        alt: `${updateData.name || existingCategory.name} image`\r\n      });\r\n      await media.save();\r\n    }\r\n    \r\n    const category = await Category.findByIdAndUpdate(req.params.id, updateData, { new: true });\r\n    res.json(category);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Delete category\r\nexports.deleteCategory = async (req, res) => {\r\n  try {\r\n    const category = await Category.findById(req.params.id);\r\n    if (!category) return res.status(404).json({ error: 'Category not found' });\r\n    \r\n    // Delete image file if it exists\r\n    if (category.image && category.image.path) {\r\n      deleteImageFile(category.image.path);\r\n    }\r\n    \r\n    // Check if this category has subcategories\r\n    const subcategories = await Category.find({ parent: req.params.id });\r\n    if (subcategories.length > 0) {\r\n      return res.status(400).json({ \r\n        error: 'Cannot delete category with subcategories. Delete subcategories first.' \r\n      });\r\n    }\r\n    \r\n    await Category.findByIdAndDelete(req.params.id);\r\n    res.json({ message: 'Category deleted successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n"
        }
    ]
}