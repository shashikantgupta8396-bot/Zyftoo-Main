{
    "sourceFile": "backend/src/controllers/corporateController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753632430623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753632430623,
            "name": "Commit-0",
            "content": "const XLSX = require('xlsx');\r\nconst crypto = require('crypto');\r\nconst Cart = require('../models/Cart');\r\nconst Order = require('../models/Order');\r\nconst Product = require('../models/Product');\r\nconst CorporateEmployeeList = require('../models/CorporateEmployeeList');\r\nconst sendEmail = require('../utils/sendEmail');\r\n\r\n// üîç Helper: Parse file buffer\r\nconst parseFileToEmployees = (file) => {\r\n  const ext = file.originalname.split('.').pop().toLowerCase();\r\n\r\n  if (ext === 'json') {\r\n    return JSON.parse(file.buffer.toString());\r\n  }\r\n\r\n  if (ext === 'csv' || ext === 'xlsx') {\r\n    const workbook = XLSX.read(file.buffer, { type: 'buffer' });\r\n    const sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n    return XLSX.utils.sheet_to_json(sheet);\r\n  }\r\n\r\n  throw new Error('Unsupported file format. Only CSV, XLSX, and JSON allowed.');\r\n};\r\n\r\n// ‚úÖ Upload Employees (CSV, XLSX, JSON)\r\nconst uploadEmployees = async (req, res) => {\r\n  const user = req.user;\r\n\r\n  if (user.userType !== 'Corporate') {\r\n    return res.status(403).json({ message: 'Only corporate users can upload employee data' });\r\n  }\r\n\r\n  if (!req.file) {\r\n    return res.status(400).json({ message: 'No file uploaded' });\r\n  }\r\n\r\n  try {\r\n    const employees = parseFileToEmployees(req.file);\r\n\r\n    const validEmployees = employees.filter(emp =>\r\n      emp.fullName && emp.email && emp.address && emp.city && emp.state && emp.postalCode\r\n    );\r\n\r\n    if (validEmployees.length === 0) {\r\n      return res.status(400).json({ message: 'No valid employee records found in the file' });\r\n    }\r\n\r\n    await CorporateEmployeeList.deleteMany({ corporateUser: user._id });\r\n\r\n    const list = new CorporateEmployeeList({\r\n      corporateUser: user._id,\r\n      deliveryMode: req.body.deliveryMode || 'employee',\r\n      employees: validEmployees\r\n    });\r\n\r\n    await list.save();\r\n\r\n    res.status(200).json({\r\n      message: 'Employee list uploaded successfully',\r\n      count: validEmployees.length\r\n    });\r\n  } catch (err) {\r\n    console.error('Upload failed:', err);\r\n    res.status(500).json({ message: 'Failed to upload employees', error: err.message });\r\n  }\r\n};\r\n\r\n// ‚úÖ Place Bulk Order per Employee\r\nconst placeCorporateOrder = async (req, res) => {\r\n  const user = req.user;\r\n\r\n  try {\r\n    const list = await CorporateEmployeeList.findOne({ corporateUser: user._id });\r\n\r\n    if (!list || list.employees.length === 0) {\r\n      return res.status(400).json({ message: 'No employee list found. Please upload first.' });\r\n    }\r\n\r\n    const cart = await Cart.findOne({ user: user._id }).populate('items.product');\r\n    if (!cart || cart.items.length === 0) {\r\n      return res.status(400).json({ message: 'Cart is empty' });\r\n    }\r\n\r\n    let createdOrders = [];\r\n\r\n    for (const employee of list.employees) {\r\n      let totalAmount = 0;\r\n      const orderItems = [];\r\n\r\n      for (const item of cart.items) {\r\n        const product = item.product;\r\n        if (!product || product.stock < item.quantity) {\r\n          return res.status(400).json({ message: `Insufficient stock for ${product?.name}` });\r\n        }\r\n\r\n        // Deduct stock\r\n        product.stock -= item.quantity;\r\n        await product.save();\r\n\r\n        totalAmount += product.price * item.quantity;\r\n\r\n        orderItems.push({\r\n          product: product._id,\r\n          quantity: item.quantity\r\n        });\r\n      }\r\n\r\n      const token = crypto.randomBytes(16).toString('hex');\r\n\r\n      const order = new Order({\r\n        user: user._id,\r\n        items: orderItems,\r\n        shippingAddress: {\r\n          fullName: employee.fullName,\r\n          address: employee.address,\r\n          city: employee.city,\r\n          state: employee.state,\r\n          country: employee.country,\r\n          postalCode: employee.postalCode,\r\n          phone: employee.phone\r\n        },\r\n        employeeEmail: employee.email,\r\n        employeeName: employee.fullName,\r\n        trackingToken: token,\r\n        trackingExpiresAt: Date.now() + 7 * 24 * 60 * 60 * 1000,\r\n        paymentMethod: req.body.paymentMethod || 'invoice',\r\n        totalAmount,\r\n        createdByCorporate: user._id\r\n      });\r\n\r\n      await order.save();\r\n\r\n      const trackingURL = `https://yourdomain.com/track-order/${token}?email=${employee.email}`;\r\n\r\n      const emailHTML = `\r\n        <p>Hi ${employee.fullName},</p>\r\n        <p>Your gift from <strong>${user.companyDetails?.companyName || 'your company'}</strong> is on the way!</p>\r\n        <p><a href=\"${trackingURL}\">Click here to track your gift</a></p>\r\n        <p>This link is valid for 7 days.</p>\r\n      `;\r\n\r\n      await sendEmail({\r\n        to: employee.email,\r\n        subject: `üéÅ Your Gift from ${user.companyDetails?.companyName || 'Your Company'}`,\r\n        html: emailHTML\r\n      });\r\n\r\n      createdOrders.push(order);\r\n    }\r\n\r\n    cart.items = [];\r\n    await cart.save();\r\n    await list.deleteOne();\r\n\r\n    res.status(201).json({\r\n      message: 'Corporate bulk order placed successfully',\r\n      orderCount: createdOrders.length\r\n    });\r\n\r\n  } catch (err) {\r\n    console.error('Bulk order error:', err);\r\n    res.status(500).json({ message: 'Bulk order failed', error: err.message });\r\n  }\r\n};\r\n\r\nmodule.exports = { uploadEmployees, placeCorporateOrder };\r\n"
        }
    ]
}