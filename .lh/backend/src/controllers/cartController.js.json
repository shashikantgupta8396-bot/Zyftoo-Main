{
    "sourceFile": "backend/src/controllers/cartController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753722023565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753722023565,
            "name": "Commit-0",
            "content": "const Cart = require('../models/Cart');\r\nconst Product = require('../models/Product');\r\n\r\n// Helper function to determine user type\r\nconst getUserType = (user) => {\r\n  return user.accountType === 'corporate' || user.userType === 'Corporate' ? 'corporate' : 'individual';\r\n};\r\n\r\n// Helper function to get effective price for a product\r\nconst getEffectivePrice = (product, user, quantity = 1) => {\r\n  const userType = getUserType(user);\r\n  \r\n  // If corporate user and product has corporate pricing\r\n  if (userType === 'corporate' && product.corporatePricing?.enabled && product.corporatePricing.priceTiers?.length > 0) {\r\n    // Find the appropriate tier based on quantity\r\n    const applicableTier = product.corporatePricing.priceTiers\r\n      .filter(tier => quantity >= tier.minQuantity && (!tier.maxQuantity || quantity <= tier.maxQuantity))\r\n      .sort((a, b) => b.minQuantity - a.minQuantity)[0]; // Get the highest minimum quantity tier that applies\r\n    \r\n    if (applicableTier) {\r\n      return applicableTier.pricePerUnit;\r\n    }\r\n  }\r\n  \r\n  // Fallback to regular pricing\r\n  return product.finalPrice || product.retailPrice?.sellingPrice || product.sale_price || product.price;\r\n};\r\n\r\n// Helper function to validate product access\r\nconst canUserAccessProduct = (product, user) => {\r\n  const userType = getUserType(user);\r\n  \r\n  // Check if product is corporate-only but user is not corporate\r\n  if (product.is_corporate_only && userType !== 'corporate') {\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n// Helper function to validate stock and availability\r\nconst validateProductAvailability = (product, requestedQuantity) => {\r\n  // Check if product is published\r\n  if (!product.status) {\r\n    return { valid: false, message: 'Product is not available' };\r\n  }\r\n  \r\n  // Check stock status\r\n  if (product.stock_status === 'out_of_stock') {\r\n    return { valid: false, message: 'Product is out of stock' };\r\n  }\r\n  \r\n  // Check quantity availability\r\n  if (product.stock_status === 'in_stock' && product.quantity < requestedQuantity) {\r\n    return { valid: false, message: `Only ${product.quantity} items available in stock` };\r\n  }\r\n  \r\n  // Pre-order and back-order are allowed\r\n  return { valid: true };\r\n};\r\n\r\n// ➕ Add to Cart\r\nconst addToCart = async (req, res) => {\r\n  const userId = req.user._id;\r\n  const productId = req.params.productId;\r\n  const { quantity = 1 } = req.body; // Allow specifying quantity\r\n\r\n  try {\r\n    const product = await Product.findById(productId);\r\n    if (!product) {\r\n      return res.status(404).json({ message: 'Product not found' });\r\n    }\r\n\r\n    // Check if user can access this product\r\n    if (!canUserAccessProduct(product, req.user)) {\r\n      return res.status(403).json({ \r\n        message: 'This product is only available to corporate customers',\r\n        productAccess: 'corporate_only'\r\n      });\r\n    }\r\n\r\n    let cart = await Cart.findOne({ user: userId });\r\n    let existingQuantity = 0;\r\n\r\n    // Check existing quantity in cart\r\n    if (cart) {\r\n      const existingItem = cart.items.find(item => item.product.equals(productId));\r\n      existingQuantity = existingItem ? existingItem.quantity : 0;\r\n    }\r\n\r\n    const totalQuantity = existingQuantity + quantity;\r\n\r\n    // Validate stock availability\r\n    const stockValidation = validateProductAvailability(product, totalQuantity);\r\n    if (!stockValidation.valid) {\r\n      return res.status(400).json({ \r\n        message: stockValidation.message,\r\n        availableQuantity: product.quantity,\r\n        stockStatus: product.stock_status\r\n      });\r\n    }\r\n\r\n    // Check corporate minimum order quantity\r\n    const userType = getUserType(req.user);\r\n    if (userType === 'corporate' && product.corporatePricing?.enabled) {\r\n      const minOrderQty = product.corporatePricing.minimumOrderQuantity || 1;\r\n      if (totalQuantity < minOrderQty) {\r\n        return res.status(400).json({\r\n          message: `Minimum order quantity for corporate customers is ${minOrderQty}`,\r\n          minimumQuantity: minOrderQty,\r\n          currentQuantity: totalQuantity\r\n        });\r\n      }\r\n    }\r\n\r\n    // Calculate effective price\r\n    const effectivePrice = getEffectivePrice(product, req.user, totalQuantity);\r\n\r\n    if (!cart) {\r\n      cart = new Cart({\r\n        user: userId,\r\n        items: [{ \r\n          product: productId, \r\n          quantity: quantity,\r\n          priceAtTime: effectivePrice,\r\n          userType: userType\r\n        }]\r\n      });\r\n    } else {\r\n      const itemIndex = cart.items.findIndex(item => item.product.equals(productId));\r\n      if (itemIndex > -1) {\r\n        cart.items[itemIndex].quantity = totalQuantity;\r\n        cart.items[itemIndex].priceAtTime = effectivePrice; // Update price\r\n      } else {\r\n        cart.items.push({ \r\n          product: productId, \r\n          quantity: quantity,\r\n          priceAtTime: effectivePrice,\r\n          userType: userType\r\n        });\r\n      }\r\n    }\r\n\r\n    await cart.save();\r\n\r\n    // Populate the cart for response\r\n    await cart.populate('items.product');\r\n\r\n    res.status(200).json({ \r\n      message: 'Product added to cart successfully', \r\n      cart,\r\n      effectivePrice,\r\n      stockStatus: product.stock_status,\r\n      userType\r\n    });\r\n  } catch (error) {\r\n    console.error('Add to cart error:', error);\r\n    res.status(500).json({ error: 'Failed to add to cart' });\r\n  }\r\n};\r\n\r\n// ✏️ Update Quantity\r\nconst updateCartItem = async (req, res) => {\r\n  const userId = req.user._id;\r\n  const { quantity } = req.body;\r\n  const productId = req.params.productId;\r\n\r\n  if (quantity < 1) {\r\n    return res.status(400).json({ message: 'Quantity must be at least 1' });\r\n  }\r\n\r\n  try {\r\n    const cart = await Cart.findOne({ user: userId });\r\n    if (!cart) {\r\n      return res.status(404).json({ message: 'Cart not found' });\r\n    }\r\n\r\n    const item = cart.items.find(item => item.product.equals(productId));\r\n    if (!item) {\r\n      return res.status(404).json({ message: 'Product not in cart' });\r\n    }\r\n\r\n    // Get product details for validation\r\n    const product = await Product.findById(productId);\r\n    if (!product) {\r\n      return res.status(404).json({ message: 'Product not found' });\r\n    }\r\n\r\n    // Validate stock availability\r\n    const stockValidation = validateProductAvailability(product, quantity);\r\n    if (!stockValidation.valid) {\r\n      return res.status(400).json({ \r\n        message: stockValidation.message,\r\n        availableQuantity: product.quantity,\r\n        stockStatus: product.stock_status\r\n      });\r\n    }\r\n\r\n    // Check corporate minimum order quantity\r\n    const userType = getUserType(req.user);\r\n    if (userType === 'corporate' && product.corporatePricing?.enabled) {\r\n      const minOrderQty = product.corporatePricing.minimumOrderQuantity || 1;\r\n      if (quantity < minOrderQty) {\r\n        return res.status(400).json({\r\n          message: `Minimum order quantity for corporate customers is ${minOrderQty}`,\r\n          minimumQuantity: minOrderQty,\r\n          requestedQuantity: quantity\r\n        });\r\n      }\r\n    }\r\n\r\n    // Update quantity and recalculate price\r\n    item.quantity = quantity;\r\n    item.priceAtTime = getEffectivePrice(product, req.user, quantity);\r\n\r\n    await cart.save();\r\n\r\n    // Populate the cart for response\r\n    await cart.populate('items.product');\r\n\r\n    res.status(200).json({ \r\n      message: 'Cart item updated successfully', \r\n      cart,\r\n      updatedPrice: item.priceAtTime\r\n    });\r\n  } catch (error) {\r\n    console.error('Update cart error:', error);\r\n    res.status(500).json({ error: 'Failed to update cart' });\r\n  }\r\n};\r\n\r\n// ❌ Remove from Cart\r\nconst removeFromCart = async (req, res) => {\r\n  const userId = req.user._id;\r\n  const productId = req.params.productId;\r\n\r\n  try {\r\n    const cart = await Cart.findOne({ user: userId });\r\n    if (!cart) return res.status(404).json({ message: 'Cart not found' });\r\n\r\n    cart.items = cart.items.filter(item => !item.product.equals(productId));\r\n    await cart.save();\r\n\r\n    res.status(200).json({ message: 'Product removed from cart', cart });\r\n  } catch (error) {\r\n    console.error('Remove from cart error:', error);\r\n    res.status(500).json({ error: 'Failed to remove from cart' });\r\n  }\r\n};\r\n\r\n// 📦 Get Full Cart\r\nconst getCart = async (req, res) => {\r\n  const userId = req.user._id;\r\n\r\n  try {\r\n    const cart = await Cart.findOne({ user: userId }).populate('items.product');\r\n    if (!cart) {\r\n      return res.status(200).json({ \r\n        message: 'Cart is empty', \r\n        items: [],\r\n        summary: {\r\n          totalItems: 0,\r\n          totalAmount: 0,\r\n          userType: getUserType(req.user)\r\n        }\r\n      });\r\n    }\r\n\r\n    const userType = getUserType(req.user);\r\n    let totalAmount = 0;\r\n    let totalItems = 0;\r\n\r\n    // Enhanced cart items with pricing and availability info\r\n    const enhancedItems = cart.items.map(item => {\r\n      const product = item.product;\r\n      \r\n      // Check if product is still available\r\n      const availability = validateProductAvailability(product, item.quantity);\r\n      \r\n      // Calculate current effective price (prices might have changed)\r\n      const currentPrice = getEffectivePrice(product, req.user, item.quantity);\r\n      \r\n      // Calculate item total\r\n      const itemTotal = currentPrice * item.quantity;\r\n      totalAmount += itemTotal;\r\n      totalItems += item.quantity;\r\n\r\n      return {\r\n        ...item.toObject(),\r\n        currentPrice,\r\n        itemTotal,\r\n        availability,\r\n        priceChanged: Math.abs(currentPrice - (item.priceAtTime || 0)) > 0.01,\r\n        corporatePricing: product.corporatePricing?.enabled && userType === 'corporate' ? {\r\n          enabled: true,\r\n          minimumOrderQuantity: product.corporatePricing.minimumOrderQuantity,\r\n          tierApplied: product.corporatePricing.priceTiers?.find(tier => \r\n            item.quantity >= tier.minQuantity && (!tier.maxQuantity || item.quantity <= tier.maxQuantity)\r\n          )\r\n        } : null\r\n      };\r\n    });\r\n\r\n    // Cart summary\r\n    const summary = {\r\n      totalItems,\r\n      totalAmount: Math.round(totalAmount * 100) / 100, // Round to 2 decimal places\r\n      userType,\r\n      hasUnavailableItems: enhancedItems.some(item => !item.availability.valid),\r\n      hasPriceChanges: enhancedItems.some(item => item.priceChanged)\r\n    };\r\n\r\n    res.status(200).json({ \r\n      items: enhancedItems,\r\n      summary\r\n    });\r\n  } catch (error) {\r\n    console.error('Get cart error:', error);\r\n    res.status(500).json({ error: 'Failed to fetch cart' });\r\n  }\r\n};\r\n\r\n// 🗑️ Clear Cart\r\nconst clearCart = async (req, res) => {\r\n  const userId = req.user._id;\r\n\r\n  try {\r\n    const cart = await Cart.findOne({ user: userId });\r\n    if (!cart) return res.status(404).json({ message: 'Cart not found' });\r\n\r\n    cart.items = [];\r\n    await cart.save();\r\n\r\n    res.status(200).json({ message: 'Cart cleared' });\r\n  } catch (error) {\r\n    console.error('Clear cart error:', error);\r\n    res.status(500).json({ error: 'Failed to clear cart' });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addToCart,\r\n  updateCartItem,\r\n  removeFromCart,\r\n  getCart,\r\n  clearCart\r\n};\r\n"
        }
    ]
}