{
    "sourceFile": "backend/src/controllers/enhancedAuthController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831493455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831493455,
            "name": "Commit-0",
            "content": "const User = require('../models/User');\r\nconst OTP = require('../models/OTP');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst crypto = require('crypto');\r\nconst sendEmail = require('../utils/sendEmail');\r\nconst { generateToken } = require('../middleware/authMiddleware');\r\n\r\n// ‚úÖ ENHANCED SIGNUP CONTROLLER WITH ENCRYPTION SUPPORT\r\nconst signupUser = async (req, res) => {\r\n  try {\r\n    // Use decryptedBody if available, otherwise use body\r\n    const data = req.decryptedBody || req.body;\r\n    \r\n    const {\r\n      name,\r\n      email,\r\n      phone,\r\n      password,\r\n      confirmPassword,\r\n      otp,\r\n      userType,\r\n      companyDetails,\r\n      role,\r\n      gender,\r\n      dob,\r\n      pincode\r\n    } = data;\r\n\r\n    console.log('üîç Signup attempt for phone:', phone);\r\n\r\n    // 1. Basic required fields validation\r\n    if (\r\n      !name ||\r\n      !phone ||\r\n      !password ||\r\n      !confirmPassword ||\r\n      !otp ||\r\n      !userType ||\r\n      !gender ||\r\n      !dob ||\r\n      !pincode\r\n    ) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Missing required fields',\r\n        required: ['name', 'phone', 'password', 'confirmPassword', 'otp', 'userType', 'gender', 'dob', 'pincode']\r\n      });\r\n    }\r\n\r\n    // 2. Password match check\r\n    if (password !== confirmPassword) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Password and Confirm Password do not match' \r\n      });\r\n    }\r\n\r\n    // 3. Corporate user validation\r\n    if (userType === 'corporate') {\r\n      if (\r\n        !companyDetails ||\r\n        !companyDetails.companyName ||\r\n        !companyDetails.gstNumber ||\r\n        !companyDetails.address\r\n      ) {\r\n        return res.status(400).json({ \r\n          success: false,\r\n          error: 'Corporate details are required',\r\n          required: ['companyDetails.companyName', 'companyDetails.gstNumber', 'companyDetails.address']\r\n        });\r\n      }\r\n    }\r\n\r\n    // 4. Check if user already exists\r\n    const existingUser = await User.findOne({ phone });\r\n    if (existingUser) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'User already exists with this phone number' \r\n      });\r\n    }\r\n\r\n    // 5. Admin role restriction\r\n    if ((role === 'admin' || role === 'tempAdmin') && (!email || !email.endsWith('@zyftoo.com'))) {\r\n      return res.status(403).json({ \r\n        success: false,\r\n        error: 'Only @zyftoo.com emails allowed for admin roles' \r\n      });\r\n    }\r\n\r\n    // 6. Verify OTP before creating user\r\n    const validOTP = await OTP.findOne({ \r\n      phone, \r\n      otp,\r\n      purpose: 'registration',\r\n      expiresAt: { $gt: new Date() }\r\n    });\r\n\r\n    if (!validOTP) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Invalid or expired OTP' \r\n      });\r\n    }\r\n\r\n    // 7. Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 12);\r\n\r\n    // 8. Email verification token\r\n    const emailVerificationToken = crypto.randomBytes(32).toString('hex');\r\n\r\n    // 9. Prepare user data\r\n    const newUser = new User({\r\n      name,\r\n      email,\r\n      phone,\r\n      password: hashedPassword,\r\n      userType,\r\n      role: role || 'user',\r\n      gender,\r\n      dob,\r\n      pincode,\r\n      companyDetails: userType === 'corporate' ? {\r\n        companyName: companyDetails.companyName,\r\n        gstNumber: companyDetails.gstNumber,\r\n        address: companyDetails.address\r\n      } : undefined,\r\n      isEmailVerified: false,\r\n      emailVerificationToken\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    // 10. Delete used OTP\r\n    await OTP.deleteOne({ phone, otp });\r\n\r\n    // 11. Generate JWT token\r\n    const token = generateToken(newUser._id);\r\n\r\n    // 12. Send verification email if email provided\r\n    if (email) {\r\n      try {\r\n        const verificationUrl = `${process.env.CLIENT_ORIGIN || 'http://localhost:3000'}/verify-email/${emailVerificationToken}`;\r\n        \r\n        await sendEmail({\r\n          to: email,\r\n          subject: 'Verify Your Email - Ninico',\r\n          html: `\r\n            <h2>Welcome to Ninico!</h2>\r\n            <p>Please click the link below to verify your email address:</p>\r\n            <a href=\"${verificationUrl}\" style=\"background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Verify Email</a>\r\n            <p>If you didn't create this account, please ignore this email.</p>\r\n          `\r\n        });\r\n        \r\n        console.log(`üìß Verification email sent to: ${email}`);\r\n      } catch (emailError) {\r\n        console.error('Failed to send verification email:', emailError);\r\n        // Don't fail the registration if email fails\r\n      }\r\n    }\r\n\r\n    // 13. Return success response (encrypted)\r\n    return res.status(201).json({\r\n      success: true,\r\n      message: 'User registered successfully',\r\n      token,\r\n      user: {\r\n        id: newUser._id,\r\n        name: newUser.name,\r\n        email: newUser.email,\r\n        phone: newUser.phone,\r\n        userType: newUser.userType,\r\n        role: newUser.role,\r\n        isEmailVerified: newUser.isEmailVerified\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('üö® Signup error:', error);\r\n    return res.status(500).json({ \r\n      success: false,\r\n      error: 'Registration failed',\r\n      message: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'\r\n    });\r\n  }\r\n};\r\n\r\n// ‚úÖ ENHANCED LOGIN CONTROLLER WITH ENCRYPTION SUPPORT\r\nconst loginUser = async (req, res) => {\r\n  try {\r\n    // Use decryptedBody if available, otherwise use body\r\n    const data = req.decryptedBody || req.body;\r\n    const { phone, email, password } = data;\r\n    \r\n    console.log('üîç Login attempt for:', phone || email);\r\n\r\n    if ((!phone && !email) || !password) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Phone/Email and password are required' \r\n      });\r\n    }\r\n\r\n    // Find user by phone or email\r\n    const query = phone ? { phone } : { email };\r\n    const user = await User.findOne(query);\r\n    \r\n    if (!user) {\r\n      return res.status(401).json({ \r\n        success: false,\r\n        error: 'Invalid credentials' \r\n      });\r\n    }\r\n\r\n    // Verify password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ \r\n        success: false,\r\n        error: 'Invalid credentials' \r\n      });\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = generateToken(user._id);\r\n\r\n    // Update last login\r\n    user.lastLogin = new Date();\r\n    await user.save();\r\n\r\n    // Return success response (encrypted)\r\n    return res.status(200).json({\r\n      success: true,\r\n      message: 'Login successful',\r\n      token,\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        userType: user.userType,\r\n        role: user.role,\r\n        isEmailVerified: user.isEmailVerified,\r\n        profileComplete: !!(user.name && user.email && user.phone)\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('üö® Login error:', error);\r\n    return res.status(500).json({ \r\n      success: false,\r\n      error: 'Login failed',\r\n      message: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'\r\n    });\r\n  }\r\n};\r\n\r\n// ‚úÖ ENHANCED EMAIL VERIFICATION\r\nconst verifyEmail = async (req, res) => {\r\n  try {\r\n    const { token } = req.params;\r\n\r\n    const user = await User.findOne({ emailVerificationToken: token });\r\n\r\n    if (!user) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Invalid or expired verification token' \r\n      });\r\n    }\r\n\r\n    user.isEmailVerified = true;\r\n    user.emailVerificationToken = undefined;\r\n    await user.save();\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      message: 'Email verified successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Email verification error:', error);\r\n    return res.status(500).json({ \r\n      success: false,\r\n      error: 'Email verification failed' \r\n    });\r\n  }\r\n};\r\n\r\n// ‚úÖ FORGOT PASSWORD WITH ENCRYPTION SUPPORT\r\nconst forgotPassword = async (req, res) => {\r\n  try {\r\n    const data = req.decryptedBody || req.body;\r\n    const { email } = data;\r\n\r\n    if (!email) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Email is required' \r\n      });\r\n    }\r\n\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'User not found with this email' \r\n      });\r\n    }\r\n\r\n    // Generate reset token\r\n    const resetToken = crypto.randomBytes(32).toString('hex');\r\n    const resetTokenExpires = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\r\n\r\n    user.resetPasswordToken = resetToken;\r\n    user.resetPasswordExpires = resetTokenExpires;\r\n    await user.save();\r\n\r\n    // Send reset email\r\n    const resetUrl = `${process.env.CLIENT_ORIGIN || 'http://localhost:3000'}/reset-password/${resetToken}`;\r\n    \r\n    await sendEmail({\r\n      to: email,\r\n      subject: 'Password Reset - Ninico',\r\n      html: `\r\n        <h2>Password Reset Request</h2>\r\n        <p>You requested a password reset. Click the link below to reset your password:</p>\r\n        <a href=\"${resetUrl}\" style=\"background: #dc3545; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">Reset Password</a>\r\n        <p>This link will expire in 10 minutes.</p>\r\n        <p>If you didn't request this, please ignore this email.</p>\r\n      `\r\n    });\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      message: 'Password reset email sent'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Forgot password error:', error);\r\n    return res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to process password reset request' \r\n    });\r\n  }\r\n};\r\n\r\n// ‚úÖ RESET PASSWORD WITH ENCRYPTION SUPPORT\r\nconst resetPassword = async (req, res) => {\r\n  try {\r\n    const { token } = req.params;\r\n    const data = req.decryptedBody || req.body;\r\n    const { password } = data;\r\n\r\n    if (!password) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Password is required' \r\n      });\r\n    }\r\n\r\n    const user = await User.findOne({\r\n      resetPasswordToken: token,\r\n      resetPasswordExpires: { $gt: new Date() }\r\n    });\r\n\r\n    if (!user) {\r\n      return res.status(400).json({ \r\n        success: false,\r\n        error: 'Invalid or expired reset token' \r\n      });\r\n    }\r\n\r\n    // Hash new password\r\n    const hashedPassword = await bcrypt.hash(password, 12);\r\n\r\n    user.password = hashedPassword;\r\n    user.resetPasswordToken = undefined;\r\n    user.resetPasswordExpires = undefined;\r\n    await user.save();\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      message: 'Password reset successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Reset password error:', error);\r\n    return res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to reset password' \r\n    });\r\n  }\r\n};\r\n\r\n// ‚úÖ GET USER PROFILE WITH ENCRYPTION SUPPORT\r\nconst getUserProfile = async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.user.id).select('-password -resetPasswordToken -resetPasswordExpires');\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'User not found' \r\n      });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        userType: user.userType,\r\n        role: user.role,\r\n        gender: user.gender,\r\n        dob: user.dob,\r\n        pincode: user.pincode,\r\n        companyDetails: user.companyDetails,\r\n        isEmailVerified: user.isEmailVerified,\r\n        createdAt: user.createdAt,\r\n        lastLogin: user.lastLogin\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Get profile error:', error);\r\n    return res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to get user profile' \r\n    });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  signupUser,\r\n  loginUser,\r\n  verifyEmail,\r\n  forgotPassword,\r\n  resetPassword,\r\n  getUserProfile\r\n};\r\n"
        }
    ]
}