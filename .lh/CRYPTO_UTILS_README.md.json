{
    "sourceFile": "CRYPTO_UTILS_README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752835582010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752835582010,
            "name": "Commit-0",
            "content": "# Encryption Utilities for Ninico Project\r\n\r\nThis document explains how to use the AES encryption utilities implemented for both the Next.js frontend and Node.js backend.\r\n\r\n## 🔐 Overview\r\n\r\nBoth frontend and backend use **AES encryption** with `crypto-js` library for consistency and compatibility.\r\n\r\n## 📁 File Structure\r\n\r\n```\r\nFrontend (Next.js):\r\n├── util/cryptoHelper.ts      # Main encryption utilities\r\n├── util/cryptoExamples.js    # Usage examples\r\n└── .env.local               # Environment variables\r\n\r\nBackend (Node.js):\r\n├── src/utils/cryptoUtil.js   # Main encryption utilities\r\n├── src/utils/cryptoExamples.js # Usage examples\r\n├── src/utils/cryptoTest.js   # Test file\r\n└── .env                     # Environment variables\r\n```\r\n\r\n## ⚙️ Environment Setup\r\n\r\n### Frontend (.env.local)\r\n```bash\r\nNEXT_PUBLIC_ENCRYPTION_KEY=your-32-character-secret-key-here\r\n```\r\n\r\n### Backend (.env)\r\n```bash\r\nENCRYPTION_KEY=your-32-character-secret-key-here\r\n```\r\n\r\n⚠️ **Important**: Use the same encryption key for both frontend and backend to ensure compatibility.\r\n\r\n## 🚀 Frontend Usage (Next.js)\r\n\r\n### Basic Encryption/Decryption\r\n```typescript\r\nimport { encryptData, decryptData } from '../util/cryptoHelper';\r\n\r\n// Encrypt any data\r\nconst userData = { name: 'John', email: 'john@example.com' };\r\nconst encrypted = encryptData(userData);\r\n\r\n// Decrypt data\r\nconst decrypted = decryptData(encrypted);\r\n```\r\n\r\n### LocalStorage with Encryption\r\n```typescript\r\nimport { encryptAndStore, decryptAndRetrieve } from '../util/cryptoHelper';\r\n\r\n// Store encrypted data\r\nencryptAndStore('userPreferences', { theme: 'dark', language: 'en' });\r\n\r\n// Retrieve and decrypt data\r\nconst preferences = decryptAndRetrieve('userPreferences');\r\n```\r\n\r\n### API Requests with Encryption\r\n```typescript\r\n// Encrypt sensitive data before API call\r\nconst encryptedProfile = encryptData(profileData);\r\n\r\nconst response = await fetch('/api/user/profile', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ encryptedData: encryptedProfile })\r\n});\r\n```\r\n\r\n## 🖥️ Backend Usage (Node.js)\r\n\r\n### Basic Encryption/Decryption\r\n```javascript\r\nconst { encryptData, decryptData } = require('./utils/cryptoUtil');\r\n\r\n// Encrypt data\r\nconst userData = { name: 'John', email: 'john@example.com' };\r\nconst encrypted = encryptData(userData);\r\n\r\n// Decrypt data\r\nconst decrypted = decryptData(encrypted);\r\n```\r\n\r\n### Database Storage with Encryption\r\n```javascript\r\nconst { encryptUserFields, decryptUserFields } = require('./utils/cryptoUtil');\r\n\r\n// Before saving to database\r\nconst sensitiveFields = ['phone', 'address', 'bankDetails'];\r\nconst encryptedUser = encryptUserFields(userData, sensitiveFields);\r\nawait user.create(encryptedUser);\r\n\r\n// After retrieving from database\r\nconst user = await User.findById(userId);\r\nconst decryptedUser = decryptUserFields(user.toObject(), sensitiveFields);\r\n```\r\n\r\n### API Middleware for Encrypted Requests\r\n```javascript\r\nconst { decryptData } = require('./utils/cryptoUtil');\r\n\r\nconst handleEncryptedRequest = (req, res, next) => {\r\n    try {\r\n        if (req.body.encryptedData) {\r\n            req.body.decryptedData = decryptData(req.body.encryptedData);\r\n        }\r\n        next();\r\n    } catch (error) {\r\n        res.status(400).json({ error: 'Invalid encrypted data' });\r\n    }\r\n};\r\n```\r\n\r\n## 🧪 Testing\r\n\r\n### Run Backend Tests\r\n```bash\r\ncd backend\r\nnode src/utils/cryptoTest.js\r\n```\r\n\r\n### Test Frontend (in browser console)\r\n```javascript\r\nimport { encryptData, decryptData } from './util/cryptoHelper';\r\n\r\nconst testData = { message: 'Hello World' };\r\nconst encrypted = encryptData(testData);\r\nconst decrypted = decryptData(encrypted);\r\nconsole.log('Test passed:', JSON.stringify(testData) === JSON.stringify(decrypted));\r\n```\r\n\r\n## 🔒 Security Best Practices\r\n\r\n1. **Environment Variables**\r\n   - Never commit encryption keys to version control\r\n   - Use different keys for development/production\r\n   - Keys should be at least 32 characters long\r\n\r\n2. **Key Management**\r\n   - Rotate keys periodically\r\n   - Use secure key storage in production\r\n   - Consider using environment-specific keys\r\n\r\n3. **Data Handling**\r\n   - Only encrypt sensitive data\r\n   - Validate data before encryption/decryption\r\n   - Handle encryption errors gracefully\r\n\r\n4. **Performance**\r\n   - Don't encrypt large amounts of data unnecessarily\r\n   - Consider caching decrypted data when appropriate\r\n   - Use encryption selectively for sensitive fields\r\n\r\n## 📋 Available Functions\r\n\r\n### Frontend (cryptoHelper.ts)\r\n- `encryptData(data: any): string` - Encrypt any data\r\n- `decryptData(cipherText: string): any` - Decrypt cipher text\r\n- `encryptAndStore(key: string, data: any): void` - Encrypt and store in localStorage\r\n- `decryptAndRetrieve(key: string): any` - Decrypt and retrieve from localStorage\r\n\r\n### Backend (cryptoUtil.js)\r\n- `encryptData(data: object): string` - Encrypt object data\r\n- `decryptData(cipher: string): object` - Decrypt cipher string\r\n- `encryptForStorage(data: object): string` - Encrypt for database storage\r\n- `decryptFromStorage(encryptedData: string): object` - Decrypt from database\r\n- `encryptUserFields(userData: object, fields: string[]): object` - Encrypt specific fields\r\n- `decryptUserFields(userData: object, fields: string[]): object` - Decrypt specific fields\r\n\r\n## 🚨 Common Issues\r\n\r\n1. **\"ENCRYPTION_KEY not defined\"**\r\n   - Ensure environment variables are set correctly\r\n   - Check .env.local (frontend) and .env (backend) files\r\n\r\n2. **\"Failed to decrypt data\"**\r\n   - Verify the same key is used for encryption/decryption\r\n   - Check if data was properly encrypted\r\n   - Ensure cipher text is not corrupted\r\n\r\n3. **Installation Issues**\r\n   - Use `npm install crypto-js --legacy-peer-deps` if you encounter dependency conflicts\r\n\r\n## 📞 Support\r\n\r\nFor questions or issues with the encryption utilities, please refer to the example files or create a detailed issue with error messages and steps to reproduce.\r\n"
        }
    ]
}