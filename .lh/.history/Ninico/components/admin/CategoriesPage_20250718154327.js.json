{
    "sourceFile": ".history/Ninico/components/admin/CategoriesPage_20250718154327.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753281586764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753283608358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   // API base URL - consistent with AddProductPage\n   const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'\n   \n   // Hardcoded admin token for testing\n-  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MzI4MTMyMCwiZXhwIjoxNzUzODg2MTIwfQ.3wEx7ZCDvYtUQppFM9CcXjhG1zTQX9_RYY_dy3Y6MZs'\n+  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\n \n   // Utility function to format hierarchical category names\n   const formatCategoryHierarchy = (category) => {\n     if (!category.parent || !category.parent.name) {\n"
                }
            ],
            "date": 1753281586764,
            "name": "Commit-0",
            "content": "'use client'\nimport React, { useState, useEffect } from 'react'\nimport { get, post, put, del } from '@/util/apiService'\nimport { CATEGORY } from '@/util/apiEndpoints'\n\nexport default function CategoriesPage({ onNavigate }) {\n  const [activeView, setActiveView] = useState('list') // 'list' or 'add'\n  const [categories, setCategories] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [editingCategory, setEditingCategory] = useState(null)\n\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    parent: '', // For subcategories (using 'parent' to match backend schema)\n    status: true,\n    image: null // File object for upload\n  })\n\n  // API base URL - consistent with AddProductPage\n  const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'\n  \n  // Hardcoded admin token for testing\n  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MzI4MTMyMCwiZXhwIjoxNzUzODg2MTIwfQ.3wEx7ZCDvYtUQppFM9CcXjhG1zTQX9_RYY_dy3Y6MZs'\n\n  // Utility function to format hierarchical category names\n  const formatCategoryHierarchy = (category) => {\n    if (!category.parent || !category.parent.name) {\n      return category.name\n    }\n    return `${category.parent.name} > ${category.name}`\n  }\n\n  // Fetch categories from backend\n  const fetchCategories = async () => {\n    try {\n      setLoading(true)\n      console.log('Fetching categories from:', `${API_BASE_URL}/categories`)\n      const response = await fetch(`${API_BASE_URL}/categories`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${ADMIN_TOKEN}`\n        },\n        credentials: 'include'\n      })\n      \n      console.log('Response status:', response.status)\n      console.log('Response ok:', response.ok)\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      console.log('Fetched categories:', data)\n      \n      // Sort categories to show main categories first, then subcategories\n      const sortedCategories = data.sort((a, b) => {\n        // Main categories first\n        if (!a.parent && b.parent) return -1\n        if (a.parent && !b.parent) return 1\n        \n        // Within same level, sort alphabetically\n        if (!a.parent && !b.parent) {\n          return a.name.localeCompare(b.name)\n        }\n        \n        // For subcategories, sort by parent name first, then by subcategory name\n        if (a.parent && b.parent) {\n          const parentCompare = (a.parent.name || '').localeCompare(b.parent.name || '')\n          if (parentCompare !== 0) return parentCompare\n          return a.name.localeCompare(b.name)\n        }\n        \n        return 0\n      })\n      \n      console.log('Sorted categories:', sortedCategories)\n      setCategories(sortedCategories)\n      setError('')\n    } catch (err) {\n      console.error('Fetch categories error:', err)\n      setError('Failed to load categories: ' + err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Create or update category\n  const saveCategory = async (categoryData) => {\n    try {\n      const url = editingCategory \n        ? `${API_BASE_URL}/categories/${editingCategory._id}`\n        : `${API_BASE_URL}/categories`\n      \n      const method = editingCategory ? 'PUT' : 'POST'\n      \n      // Create FormData for file upload\n      const formDataToSend = new FormData()\n      formDataToSend.append('name', categoryData.name)\n      formDataToSend.append('description', categoryData.description || '')\n      formDataToSend.append('status', categoryData.status)\n      \n      if (categoryData.parent) {\n        formDataToSend.append('parent', categoryData.parent)\n        formDataToSend.append('isSubcategory', 'true')\n        \n        // Find parent category name for proper folder structure\n        const parentCategory = categories.find(cat => cat._id === categoryData.parent)\n        if (parentCategory) {\n          formDataToSend.append('parentCategoryName', parentCategory.name)\n        }\n      } else {\n        formDataToSend.append('isSubcategory', 'false')\n      }\n      \n      // Add category name for folder creation\n      formDataToSend.append('categoryName', categoryData.name)\n      \n      // Add image file if selected\n      if (categoryData.image) {\n        formDataToSend.append('image', categoryData.image)\n      }\n      \n      // Log all FormData key-value pairs\n      for (let pair of formDataToSend.entries()) {\n        console.log(pair[0]+ ':', pair[1]);\n      }\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Authorization': `Bearer ${ADMIN_TOKEN}`\n        },\n        body: formDataToSend\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || 'Failed to save category')\n      }\n\n      const savedCategory = await response.json()\n      \n      // Refresh categories list\n      fetchCategories()\n      setActiveView('list')\n      setEditingCategory(null)\n      setFormData({ name: '', description: '', parent: '', status: true, image: null })\n      \n      return savedCategory\n    } catch (err) {\n      setError('Failed to save category: ' + err.message)\n      throw err\n    }\n  }\n\n  // Delete category\n  const deleteCategory = async (categoryId) => {\n    if (!window.confirm('Are you sure you want to delete this category?')) {\n      return\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/categories/${categoryId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${ADMIN_TOKEN}`\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to delete category')\n      }\n\n      // Refresh categories list\n      fetchCategories()\n    } catch (err) {\n      setError('Failed to delete category: ' + err.message)\n    }\n  }\n\n  // Load categories on component mount\n  useEffect(() => {\n    fetchCategories()\n  }, [])\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked, files } = e.target\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : type === 'file' ? files[0] : value\n    }))\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      if (formData.image && formData.image.size > 5 * 1024 * 1024) {\n        alert('Image must be less than 5MB');\n        return;\n      }\n      await saveCategory(formData)\n    } catch (err) {\n      // Error is already handled in saveCategory\n    }\n  }\n\n  const handleEdit = (category) => {\n    setEditingCategory(category)\n    setFormData({\n      name: category.name,\n      description: category.description || '',\n      parent: category.parent ? (category.parent._id || category.parent) : '',\n      status: category.status\n    })\n    setActiveView('add')\n  }\n\n  const renderCategoryList = () => {\n    if (loading) {\n      return (\n        <div className=\"text-center py-5\">\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </div>\n          <p className=\"mt-2 text-muted\">Loading categories...</p>\n        </div>\n      )\n    }\n\n    if (error) {\n      return (\n        <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n          <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n          <div>{error}</div>\n          <button \n            className=\"btn btn-outline-danger btn-sm ms-auto\"\n            onClick={fetchCategories}\n          >\n            Retry\n          </button>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        {/* Stats Cards */}\n        <div className=\"row mb-4\">\n          <div className=\"col-md-4\">\n            <div className=\"card border-0 shadow-sm\">\n              <div className=\"card-body text-center\">\n                <i className=\"bi bi-grid text-primary\" style={{ fontSize: '2rem' }}></i>\n                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => !cat.parent).length}</h4>\n                <small className=\"text-muted\">Main Categories</small>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"card border-0 shadow-sm\">\n              <div className=\"card-body text-center\">\n                <i className=\"bi bi-diagram-3 text-success\" style={{ fontSize: '2rem' }}></i>\n                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.parent).length}</h4>\n                <small className=\"text-muted\">Sub Categories</small>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <div className=\"card border-0 shadow-sm\">\n              <div className=\"card-body text-center\">\n                <i className=\"bi bi-check-circle text-info\" style={{ fontSize: '2rem' }}></i>\n                <h4 className=\"mt-2 mb-0\">{categories.filter(cat => cat.status).length}</h4>\n                <small className=\"text-muted\">Active Categories</small>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Categories Table */}\n        <div className=\"card border-0 shadow-sm\">\n          <div className=\"card-header bg-white border-bottom\">\n            <h5 className=\"mb-0 fw-semibold\">All Categories</h5>\n          </div>\n          <div className=\"card-body p-0\">\n            {categories.length === 0 ? (\n              <div className=\"text-center py-5\">\n                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\n                <p className=\"mt-2 text-muted\">No categories found. Create your first category!</p>\n                <button\n                  className=\"btn btn-success\"\n                  onClick={() => setActiveView('add')}\n                >\n                  <i className=\"bi bi-plus-circle me-2\"></i>\n                  Add Category\n                </button>\n              </div>\n            ) : (\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover mb-0\">\n                  <thead className=\"table-light\">\n                    <tr>\n                      <th className=\"ps-4\">Category Name</th>\n                      <th>Image</th>\n                      <th>Description</th>\n                      <th>Type</th>\n                      <th>Status</th>\n                      <th className=\"text-center\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {categories.map(category => (\n                      <tr key={category._id} className={category.parent ? 'table-light' : ''}>\n                        <td className=\"ps-4\">\n                          <div className=\"d-flex align-items-center\">\n                            {category.parent ? (\n                              <>\n                                <i className=\"bi bi-arrow-return-right text-muted me-2\"></i>\n                                <i className=\"bi bi-tag text-secondary me-2\"></i>\n                                <span>{formatCategoryHierarchy(category)}</span>\n                              </>\n                            ) : (\n                              <>\n                                <i className=\"bi bi-grid text-primary me-2\"></i>\n                                <strong>{category.name}</strong>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                        <td>\n                          {category.image?.url ? (\n                            <img \n                              src={category.image.url} \n                              alt={category.name}\n                              className=\"rounded\"\n                              style={{ width: '40px', height: '40px', objectFit: 'cover' }}\n                            />\n                          ) : (\n                            <div \n                              className=\"bg-light rounded d-flex align-items-center justify-content-center\"\n                              style={{ width: '40px', height: '40px' }}\n                            >\n                              <i className=\"bi bi-image text-muted\"></i>\n                            </div>\n                          )}\n                        </td>\n                        <td>{category.description || '-'}</td>\n                        <td>\n                          <span className={`badge ${category.parent ? 'bg-secondary' : 'bg-primary'}`}>\n                            {category.parent ? 'Sub Category' : 'Main Category'}\n                          </span>\n                        </td>\n                        <td>\n                          <span className={`badge ${category.status ? 'bg-success' : 'bg-danger'}`}>\n                            {category.status ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td className=\"text-center\">\n                          <button \n                            className=\"btn btn-sm btn-outline-primary me-1\"\n                            onClick={() => handleEdit(category)}\n                            title=\"Edit Category\"\n                          >\n                            <i className=\"bi bi-pencil\"></i>\n                          </button>\n                          <button \n                            className=\"btn btn-sm btn-outline-danger\"\n                            onClick={() => deleteCategory(category._id)}\n                            title=\"Delete Category\"\n                          >\n                            <i className=\"bi bi-trash\"></i>\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const renderAddCategoryForm = () => (\n    <div className=\"card border-0 shadow-sm\">\n      <div className=\"card-header bg-white border-bottom\">\n        <h5 className=\"mb-0 fw-semibold\">\n          {editingCategory ? 'Edit Category' : 'Add New Category'}\n        </h5>\n      </div>\n      <div className=\"card-body\">\n        {error && (\n          <div className=\"alert alert-danger d-flex align-items-center mb-3\" role=\"alert\">\n            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n            <div>{error}</div>\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Category Name *</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Parent Category</label>\n                <select\n                  className=\"form-select\"\n                  name=\"parent\"\n                  value={formData.parent}\n                  onChange={handleInputChange}\n                >\n                  <option value=\"\">Main Category</option>\n                  {categories.filter(cat => !cat.parent).map(category => (\n                    <option key={category._id} value={category._id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"form-text\">Leave empty for main category, select parent for subcategory</div>\n              </div>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  rows=\"3\"\n                />\n              </div>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Category Image</label>\n                <input\n                  type=\"file\"\n                  className=\"form-control\"\n                  name=\"image\"\n                  onChange={handleInputChange}\n                  accept=\"image/*\"\n                />\n                <div className=\"form-text\">\n                  Upload an image for this category. Recommended size: 300x300px. \n                  {formData.parent ? ' Will be saved in subcategories folder.' : ' Will be saved in main category folder.'}\n                </div>\n                {formData.image && (\n                  <div className=\"mt-2\">\n                    <small className=\"text-success\">\n                      <i className=\"bi bi-check-circle me-1\"></i>\n                      Selected: {formData.image.name}\n                    </small>\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"col-12\">\n              <div className=\"mb-3\">\n                <div className=\"form-check\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    name=\"status\"\n                    checked={formData.status}\n                    onChange={handleInputChange}\n                  />\n                  <label className=\"form-check-label\">Active Status</label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"d-flex gap-2\">\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-secondary\"\n              onClick={() => {\n                setActiveView('list')\n                setEditingCategory(null)\n                setFormData({ name: '', description: '', parent: '', status: true })\n                setError('')\n              }}\n            >\n              <i className=\"bi bi-arrow-left me-2\"></i>\n              Back to List\n            </button>\n            <button type=\"submit\" className=\"btn btn-success\">\n              <i className=\"bi bi-check-circle me-2\"></i>\n              {editingCategory ? 'Update Category' : 'Save Category'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className=\"container-fluid\">\n      {/* Page Header */}\n      <div className=\"row mb-4\">\n        <div className=\"col-12\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div>\n              <h2 className=\"fw-bold text-dark mb-1\">Categories Management</h2>\n              <p className=\"text-muted mb-0\">Manage product categories and subcategories</p>\n            </div>\n            <div className=\"d-flex gap-2\">\n              {activeView === 'list' ? (\n                <button\n                  className=\"btn btn-success\"\n                  onClick={() => setActiveView('add')}\n                >\n                  <i className=\"bi bi-plus-circle me-2\"></i>\n                  Add Category\n                </button>\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {activeView === 'list' ? renderCategoryList() : renderAddCategoryForm()}\n    </div>\n  )\n}\n"
        }
    ]
}