{
    "sourceFile": ".history/Ninico/components/admin/PagesManagement_20250722102858.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753198546000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753199156350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n         layout: categoryConfig.layout,\r\n         showSubcategories: categoryConfig.showSubcategories\r\n       }\r\n       \r\n-      const response = await put('/api/pages/home/sections/category', configData)\r\n+      const response = await put('/pages/home/sections/category', configData)\r\n       console.log('Save response:', response)\r\n       \r\n       // Handle the double-wrapped response from apiService\r\n       const actualData = response.data // This contains the backend response\r\n"
                }
            ],
            "date": 1753198546000,
            "name": "Commit-0",
            "content": "'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { get, post, put } from '@/util/apiService'\r\n\r\nconst PAGES = [\r\n  { \r\n    key: \"home\", \r\n    label: \"Home Page\",\r\n    description: \"Manage sections displayed on the homepage\"\r\n  },\r\n  { \r\n    key: \"corporate\", \r\n    label: \"Corporate Page\",\r\n    description: \"Manage sections for corporate customers\"\r\n  }\r\n]\r\n\r\nexport default function PagesManagement({ onNavigate }) {\r\n  const [selectedPage, setSelectedPage] = useState(\"home\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const [success, setSuccess] = useState('')\r\n  const [showCategoryConfig, setShowCategoryConfig] = useState(false)\r\n  const [availableCategories, setAvailableCategories] = useState([])\r\n  const [pageConfig, setPageConfig] = useState(null)\r\n\r\n  // Category section configuration state\r\n  const [categoryConfig, setCategoryConfig] = useState({\r\n    enabled: true,\r\n    maxCategories: 6,\r\n    categoryIds: [],\r\n    layout: 'grid',\r\n    showSubcategories: true\r\n  })\r\n\r\n  // Define sections for each page\r\n  const homeSections = [\r\n    { \r\n      key: \"giftCategories\", \r\n      label: \"Gift Categories\", \r\n      description: \"Display category grid with gifts\",\r\n      order: 1,\r\n      hasConfig: true\r\n    },\r\n    { \r\n      key: \"slider\", \r\n      label: \"Main Slider\", \r\n      description: \"Hero banner with promotional slides\",\r\n      order: 2\r\n    },\r\n    { \r\n      key: \"services\", \r\n      label: \"Services Section\", \r\n      description: \"Highlight key services and benefits\",\r\n      order: 3\r\n    },\r\n    { \r\n      key: \"products\", \r\n      label: \"Featured Products\", \r\n      description: \"Showcase featured/trending products\",\r\n      order: 4\r\n    },\r\n    { \r\n      key: \"banner\", \r\n      label: \"Promotional Banner\", \r\n      description: \"Secondary promotional content\",\r\n      order: 5\r\n    },\r\n    { \r\n      key: \"dealProduct\", \r\n      label: \"Deal Products\", \r\n      description: \"Special offers and discounted items\",\r\n      order: 6\r\n    }\r\n  ]\r\n\r\n  const corporateSections = [\r\n    { \r\n      key: \"corporateBanner\", \r\n      label: \"Corporate Banner\", \r\n      description: \"Hero section for corporate clients\",\r\n      order: 1\r\n    },\r\n    { \r\n      key: \"corporateServices\", \r\n      label: \"Corporate Services\", \r\n      description: \"B2B services and solutions\",\r\n      order: 2\r\n    },\r\n    { \r\n      key: \"corporateTestimonials\", \r\n      label: \"Client Testimonials\", \r\n      description: \"Corporate client reviews and case studies\",\r\n      order: 3\r\n    },\r\n    { \r\n      key: \"corporatePartners\", \r\n      label: \"Partner Logos\", \r\n      description: \"Display trusted corporate partners\",\r\n      order: 4\r\n    }\r\n  ]\r\n\r\n  // Section visibility state\r\n  const [visibleSections, setVisibleSections] = useState({\r\n    home: {\r\n      giftCategories: true,\r\n      slider: true,\r\n      services: true,\r\n      products: true,\r\n      banner: true,\r\n      dealProduct: true,\r\n    },\r\n    corporate: {\r\n      corporateBanner: true,\r\n      corporateServices: true,\r\n      corporateTestimonials: false,\r\n      corporatePartners: false,\r\n    },\r\n  })\r\n\r\n  // Hardcoded admin token for testing\r\n  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\r\n\r\n  // Load page configuration\r\n  const loadPageConfig = async (pageKey) => {\r\n    try {\r\n      setLoading(true)\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const response = await get(`/api/pages/${pageKey}`)\r\n      console.log('Page config response:', response)\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      const actualData = response.data // This contains the backend response\r\n      \r\n      if (actualData && actualData.success) {\r\n        setPageConfig(actualData.data)\r\n        \r\n        // Extract category section config\r\n        const categorySection = actualData.data.sections.find(s => s.sectionType === 'categorySection')\r\n        if (categorySection) {\r\n          setCategoryConfig({\r\n            enabled: categorySection.enabled,\r\n            maxCategories: categorySection.config.maxCategories || 6,\r\n            categoryIds: categorySection.config.categoryIds || [],\r\n            layout: categorySection.config.layout || 'grid',\r\n            showSubcategories: categorySection.config.showSubcategories || true\r\n          })\r\n          \r\n          // Update visibility state\r\n          setVisibleSections(prev => ({\r\n            ...prev,\r\n            [pageKey]: {\r\n              ...prev[pageKey],\r\n              giftCategories: categorySection.enabled\r\n            }\r\n          }))\r\n        }\r\n      }\r\n      \r\n      setError('')\r\n    } catch (err) {\r\n      console.error('Load page config error:', err)\r\n      setError('Failed to load page configuration: ' + err.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Load available categories\r\n  const loadCategories = async () => {\r\n    try {\r\n      console.log('Loading categories...')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const response = await get('/api/categories')\r\n      console.log('Raw categories response:', response)\r\n      console.log('Response type:', typeof response)\r\n      console.log('Response keys:', Object.keys(response || {}))\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      const actualData = response?.data // This contains the backend response\r\n      console.log('Actual data:', actualData)\r\n      console.log('Actual data type:', typeof actualData)\r\n      console.log('Actual data keys:', Object.keys(actualData || {}))\r\n      \r\n      if (actualData && actualData.success && actualData.data && Array.isArray(actualData.data)) {\r\n        console.log('Categories loaded successfully (nested format):', actualData.data.length, 'categories')\r\n        console.log('First category sample:', actualData.data[0])\r\n        \r\n        // Transform to ensure proper format for the modal\r\n        const transformedCategories = actualData.data.map(cat => ({\r\n          id: cat.id || cat._id,\r\n          value: cat.id || cat._id,\r\n          label: cat.name,\r\n          name: cat.name,\r\n          image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n          description: cat.description || ''\r\n        }))\r\n        console.log('Transformed categories:', transformedCategories)\r\n        setAvailableCategories(transformedCategories)\r\n        \r\n      } else if (actualData && Array.isArray(actualData)) {\r\n        // Handle case where actualData is directly an array\r\n        console.log('Categories loaded (direct array format):', actualData.length, 'categories')\r\n        console.log('First category sample:', actualData[0])\r\n        \r\n        const transformedCategories = actualData.map(cat => ({\r\n          id: cat.id || cat._id,\r\n          value: cat.id || cat._id,\r\n          label: cat.name,\r\n          name: cat.name,\r\n          image: cat.image?.url || cat.image || '/assets/img/product/category/default-category.svg',\r\n          description: cat.description || ''\r\n        }))\r\n        setAvailableCategories(transformedCategories)\r\n        \r\n      } else if (response && Array.isArray(response)) {\r\n        // Handle case where response itself is an array (no wrapping)\r\n        console.log('Categories loaded (response array format):', response.length, 'categories')\r\n        console.log('First category sample:', response[0])\r\n        \r\n        const transformedCategories = response.map(cat => ({\r\n          id: cat.id || cat._id,\r\n          value: cat.id || cat._id,\r\n          label: cat.name,\r\n          name: cat.name,\r\n          image: cat.image?.url || cat.image || '/assets/img/product/category/default-category.svg',\r\n          description: cat.description || ''\r\n        }))\r\n        setAvailableCategories(transformedCategories)\r\n        \r\n      } else {\r\n        console.error('Unexpected response format:')\r\n        console.error('- response:', response)\r\n        console.error('- actualData:', actualData)\r\n        console.error('- actualData.success:', actualData?.success)\r\n        console.error('- actualData.data:', actualData?.data)\r\n        console.error('- actualData.data type:', typeof actualData?.data)\r\n        setError('Failed to load categories: Invalid response format')\r\n        setAvailableCategories([]) // Explicitly set to empty array\r\n      }\r\n    } catch (err) {\r\n      console.error('Load categories error:', err)\r\n      console.error('Error details:', {\r\n        message: err.message,\r\n        stack: err.stack,\r\n        response: err.response\r\n      })\r\n      setError('Failed to load categories: ' + err.message)\r\n      \r\n      // Set some dummy categories for testing purposes\r\n      const dummyCategories = [\r\n        {\r\n          id: 'dummy1',\r\n          value: 'dummy1',\r\n          label: 'Electronics',\r\n          name: 'Electronics',\r\n          image: '/assets/img/product/category/default-category.svg',\r\n          description: 'Electronic devices and gadgets'\r\n        },\r\n        {\r\n          id: 'dummy2',\r\n          value: 'dummy2',\r\n          label: 'Fashion',\r\n          name: 'Fashion',\r\n          image: '/assets/img/product/category/default-category.svg',\r\n          description: 'Clothing and accessories'\r\n        },\r\n        {\r\n          id: 'dummy3',\r\n          value: 'dummy3',\r\n          label: 'Home & Garden',\r\n          name: 'Home & Garden',\r\n          image: '/assets/img/product/category/default-category.svg',\r\n          description: 'Home improvement and garden supplies'\r\n        }\r\n      ]\r\n      \r\n      console.log('Setting dummy categories for testing:', dummyCategories)\r\n      setAvailableCategories(dummyCategories)\r\n    }\r\n  }\r\n\r\n  // Save category section configuration\r\n  const saveCategoryConfig = async () => {\r\n    try {\r\n      setLoading(true)\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const configData = {\r\n        enabled: categoryConfig.enabled,\r\n        maxCategories: categoryConfig.maxCategories,\r\n        categories: categoryConfig.categoryIds.map((id, index) => ({\r\n          categoryId: id,\r\n          enabled: true,\r\n          order: index\r\n        })),\r\n        layout: categoryConfig.layout,\r\n        showSubcategories: categoryConfig.showSubcategories\r\n      }\r\n      \r\n      const response = await put('/api/pages/home/sections/category', configData)\r\n      console.log('Save response:', response)\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      const actualData = response.data // This contains the backend response\r\n      \r\n      if (actualData && actualData.success) {\r\n        setSuccess('Category section configuration saved successfully!')\r\n        setTimeout(() => setSuccess(''), 3000)\r\n        setShowCategoryConfig(false)\r\n        \r\n        // Trigger refresh notification (optional)\r\n        try {\r\n          await get('/pages/home/refresh/categorySection')\r\n        } catch (refreshError) {\r\n          console.log('Refresh notification failed, but save was successful')\r\n        }\r\n        \r\n        await loadPageConfig(selectedPage) // Reload to get updated config\r\n      } else {\r\n        setError('Failed to save configuration: ' + (actualData?.message || 'Unknown error'))\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('Save category config error:', err)\r\n      setError('Failed to save category configuration: ' + err.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Toggle section visibility\r\n  const handleToggleSection = async (page, section) => {\r\n    if (section === 'giftCategories') {\r\n      // For category section, update the actual config\r\n      setCategoryConfig(prev => ({ ...prev, enabled: !prev.enabled }))\r\n      return\r\n    }\r\n    \r\n    const newVisibility = {\r\n      ...visibleSections,\r\n      [page]: {\r\n        ...visibleSections[page],\r\n        [section]: !visibleSections[page][section],\r\n      }\r\n    }\r\n    \r\n    setVisibleSections(newVisibility)\r\n  }\r\n\r\n  // Open category configuration modal\r\n  const openCategoryConfig = () => {\r\n    setShowCategoryConfig(true)\r\n  }\r\n\r\n  // Handle category selection\r\n  const handleCategoryToggle = (categoryId) => {\r\n    setCategoryConfig(prev => {\r\n      const isSelected = prev.categoryIds.includes(categoryId)\r\n      const newCategoryIds = isSelected \r\n        ? prev.categoryIds.filter(id => id !== categoryId)\r\n        : [...prev.categoryIds, categoryId]\r\n      \r\n      return { ...prev, categoryIds: newCategoryIds }\r\n    })\r\n  }\r\n\r\n  // Handle max categories change\r\n  const handleMaxCategoriesChange = (value) => {\r\n    const numValue = parseInt(value) || 0\r\n    setCategoryConfig(prev => ({ ...prev, maxCategories: numValue }))\r\n  }\r\n\r\n  // Load data when page changes\r\n  useEffect(() => {\r\n    loadPageConfig(selectedPage)\r\n    loadCategories()\r\n  }, [selectedPage])\r\n\r\n  // Get sections for current page\r\n  const getCurrentSections = () => {\r\n    return selectedPage === \"home\" ? homeSections : corporateSections\r\n  }\r\n\r\n  // Render category configuration modal\r\n  const renderCategoryConfigModal = () => {\r\n    if (!showCategoryConfig) return null\r\n\r\n    console.log('Rendering category modal with availableCategories:', availableCategories.length, availableCategories)\r\n\r\n    return (\r\n      <div className=\"modal show d-block\" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n        <div className=\"modal-dialog modal-lg\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\">\r\n                <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n                Category Section Configuration\r\n              </h5>\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn-close\" \r\n                onClick={() => setShowCategoryConfig(false)}\r\n              ></button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {/* Enable/Disable Section */}\r\n              <div className=\"row mb-4\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"form-check form-switch\">\r\n                    <input \r\n                      className=\"form-check-input\" \r\n                      type=\"checkbox\" \r\n                      id=\"enableCategorySection\"\r\n                      checked={categoryConfig.enabled}\r\n                      onChange={(e) => setCategoryConfig(prev => ({ ...prev, enabled: e.target.checked }))}\r\n                    />\r\n                    <label className=\"form-check-label fw-semibold\" htmlFor=\"enableCategorySection\">\r\n                      Enable Category Section\r\n                    </label>\r\n                  </div>\r\n                  <small className=\"text-muted\">Turn on/off the category section on the homepage</small>\r\n                </div>\r\n              </div>\r\n\r\n              {categoryConfig.enabled && (\r\n                <>\r\n                  {/* Max Categories */}\r\n                  <div className=\"row mb-4\">\r\n                    <div className=\"col-md-6\">\r\n                      <label className=\"form-label fw-semibold\">Maximum Categories to Show</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        className=\"form-control\"\r\n                        min=\"1\"\r\n                        max=\"20\"\r\n                        value={categoryConfig.maxCategories}\r\n                        onChange={(e) => handleMaxCategoriesChange(e.target.value)}\r\n                      />\r\n                      <small className=\"text-muted\">Limit how many categories appear (0 = no limit)</small>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                      <label className=\"form-label fw-semibold\">Layout Style</label>\r\n                      <select \r\n                        className=\"form-select\"\r\n                        value={categoryConfig.layout}\r\n                        onChange={(e) => setCategoryConfig(prev => ({ ...prev, layout: e.target.value }))}\r\n                      >\r\n                        <option value=\"grid\">Grid Layout</option>\r\n                        <option value=\"carousel\">Carousel</option>\r\n                        <option value=\"list\">List View</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Category Selection */}\r\n                  <div className=\"row mb-4\">\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label fw-semibold\">Select Categories to Display</label>\r\n                      <div className=\"text-muted mb-3\">\r\n                        Choose which categories to show. Leave empty to show all categories.\r\n                      </div>\r\n                      \r\n                      <div className=\"row\">\r\n                        {availableCategories.map(category => (\r\n                          <div key={category.id} className=\"col-md-6 col-lg-4 mb-3\">\r\n                            <div className={`card h-100 ${categoryConfig.categoryIds.includes(category.id) ? 'border-primary bg-light' : ''}`}>\r\n                              <div className=\"card-body p-3\">\r\n                                <div className=\"form-check\">\r\n                                  <input \r\n                                    className=\"form-check-input\" \r\n                                    type=\"checkbox\" \r\n                                    id={`category-${category.id}`}\r\n                                    checked={categoryConfig.categoryIds.includes(category.id)}\r\n                                    onChange={() => handleCategoryToggle(category.id)}\r\n                                  />\r\n                                  <label className=\"form-check-label\" htmlFor={`category-${category.id}`}>\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                      {category.image && (\r\n                                        <img \r\n                                          src={category.image} \r\n                                          alt={category.name}\r\n                                          className=\"me-2\"\r\n                                          style={{ width: '32px', height: '32px', objectFit: 'cover', borderRadius: '4px' }}\r\n                                        />\r\n                                      )}\r\n                                      <div>\r\n                                        <div className=\"fw-semibold\">{category.name}</div>\r\n                                        {category.description && (\r\n                                          <small className=\"text-muted\">{category.description}</small>\r\n                                        )}\r\n                                      </div>\r\n                                    </div>\r\n                                  </label>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                      \r\n                      {availableCategories.length === 0 && (\r\n                        <div className=\"text-center py-4\">\r\n                          <i className=\"bi bi-folder2-open\" style={{ fontSize: '2rem', color: '#6c757d' }}></i>\r\n                          <p className=\"mt-2 text-muted\">No categories available. Create categories first.</p>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Additional Options */}\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                      <div className=\"form-check\">\r\n                        <input \r\n                          className=\"form-check-input\" \r\n                          type=\"checkbox\" \r\n                          id=\"showSubcategories\"\r\n                          checked={categoryConfig.showSubcategories}\r\n                          onChange={(e) => setCategoryConfig(prev => ({ ...prev, showSubcategories: e.target.checked }))}\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"showSubcategories\">\r\n                          Show subcategories on hover\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-secondary\" \r\n                onClick={() => setShowCategoryConfig(false)}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-primary\" \r\n                onClick={saveCategoryConfig}\r\n                disabled={loading}\r\n              >\r\n                {loading ? (\r\n                  <>\r\n                    <span className=\"spinner-border spinner-border-sm me-2\"></span>\r\n                    Saving...\r\n                  </>\r\n                ) : (\r\n                  'Save Configuration'\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Move section up/down\r\n  const handleMoveSection = async (page, sectionKey, direction) => {\r\n    const sections = page === \"home\" ? homeSections : corporateSections\r\n    const currentIndex = sections.findIndex(s => s.key === sectionKey)\r\n    \r\n    if (direction === 'up' && currentIndex > 0) {\r\n      // Move up logic - would need to update order\r\n      console.log(`Moving ${sectionKey} up`)\r\n    } else if (direction === 'down' && currentIndex < sections.length - 1) {\r\n      // Move down logic - would need to update order\r\n      console.log(`Moving ${sectionKey} down`)\r\n    }\r\n    \r\n    // TODO: Implement actual reordering\r\n    setSuccess('Section order updated!')\r\n    setTimeout(() => setSuccess(''), 2000)\r\n  }\r\n\r\n  // Render section controls\r\n  const renderSections = () => {\r\n    const sections = getCurrentSections()\r\n    const currentPage = PAGES.find(p => p.key === selectedPage)\r\n    \r\n    return (\r\n      <div className=\"col-md-9\">\r\n        <div className=\"card border-0 shadow-sm\">\r\n          <div className=\"card-header bg-white border-bottom\">\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n              <div>\r\n                <h5 className=\"mb-1 fw-semibold\">{currentPage.label}</h5>\r\n                <p className=\"text-muted mb-0 small\">{currentPage.description}</p>\r\n              </div>\r\n              <span className=\"badge bg-primary\">\r\n                {sections.filter(s => visibleSections[selectedPage][s.key]).length} active\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"card-body p-0\">\r\n            {sections.length === 0 ? (\r\n              <div className=\"text-center py-5\">\r\n                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\r\n                <p className=\"mt-2 text-muted\">No sections configured for this page.</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-hover mb-0\">\r\n                  <thead className=\"table-light\">\r\n                    <tr>\r\n                      <th className=\"ps-4\">Section</th>\r\n                      <th>Description</th>\r\n                      <th>Order</th>\r\n                      <th>Status</th>\r\n                      <th className=\"text-center\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {sections.map((section, index) => {\r\n                      const isVisible = visibleSections[selectedPage][section.key]\r\n                      const isCategorySection = section.key === 'giftCategories'\r\n                      \r\n                      return (\r\n                        <tr key={section.key} className={isVisible ? '' : 'table-secondary'}>\r\n                          <td className=\"ps-4\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                              <div>\r\n                                <div className=\"fw-semibold\">{section.label}</div>\r\n                                {isCategorySection && categoryConfig.categoryIds.length > 0 && (\r\n                                  <small className=\"text-muted\">\r\n                                    {categoryConfig.categoryIds.length} categories selected\r\n                                  </small>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"text-muted\">{section.description}</span>\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"badge bg-light text-dark\">{section.order}</span>\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"form-check form-switch\">\r\n                              <input \r\n                                className=\"form-check-input\" \r\n                                type=\"checkbox\" \r\n                                checked={isCategorySection ? categoryConfig.enabled : isVisible}\r\n                                onChange={() => handleToggleSection(selectedPage, section.key)}\r\n                                id={`toggle-${section.key}`}\r\n                              />\r\n                              <label className=\"form-check-label\" htmlFor={`toggle-${section.key}`}>\r\n                                {isCategorySection ? (categoryConfig.enabled ? 'Enabled' : 'Disabled') : (isVisible ? 'Visible' : 'Hidden')}\r\n                              </label>\r\n                            </div>\r\n                          </td>\r\n                          <td className=\"text-center\">\r\n                            <div className=\"btn-group btn-group-sm\">\r\n                              {section.hasConfig && (\r\n                                <button\r\n                                  className=\"btn btn-outline-primary\"\r\n                                  onClick={openCategoryConfig}\r\n                                  title=\"Configure section\"\r\n                                >\r\n                                  <i className=\"bi bi-gear\"></i>\r\n                                </button>\r\n                              )}\r\n                              <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                onClick={() => handleMoveSection(selectedPage, section.key, 'up')}\r\n                                disabled={index === 0}\r\n                                title=\"Move up\"\r\n                              >\r\n                                <i className=\"bi bi-arrow-up\"></i>\r\n                              </button>\r\n                              <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                onClick={() => handleMoveSection(selectedPage, section.key, 'down')}\r\n                                disabled={index === sections.length - 1}\r\n                                title=\"Move down\"\r\n                              >\r\n                                <i className=\"bi bi-arrow-down\"></i>\r\n                              </button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Render page sidebar\r\n  const renderPageSidebar = () => (\r\n    <div className=\"col-md-3\">\r\n      <div className=\"card border-0 shadow-sm\">\r\n        <div className=\"card-header bg-white border-bottom\">\r\n          <h6 className=\"mb-0 fw-semibold\">\r\n            <i className=\"bi bi-file-earmark-text me-2\"></i>\r\n            Pages\r\n          </h6>\r\n        </div>\r\n        <div className=\"card-body p-0\">\r\n          <div className=\"list-group list-group-flush\">\r\n            {PAGES.map((page) => {\r\n              const isActive = selectedPage === page.key\r\n              const activeCount = visibleSections[page.key] ? \r\n                Object.values(visibleSections[page.key]).filter(Boolean).length : 0\r\n              \r\n              return (\r\n                <button\r\n                  key={page.key}\r\n                  className={`list-group-item list-group-item-action border-0 ${isActive ? 'active' : ''}`}\r\n                  onClick={() => setSelectedPage(page.key)}\r\n                  disabled={loading}\r\n                >\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <div>\r\n                      <div className=\"fw-semibold\">{page.label}</div>\r\n                      <small className={isActive ? 'text-white-50' : 'text-muted'}>\r\n                        {page.description}\r\n                      </small>\r\n                    </div>\r\n                    <span className={`badge ${isActive ? 'bg-white text-primary' : 'bg-primary'}`}>\r\n                      {activeCount}\r\n                    </span>\r\n                  </div>\r\n                </button>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* Page Header */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-12\">\r\n          <div className=\"d-flex justify-content-between align-items-center\">\r\n            <div>\r\n              <h2 className=\"fw-bold text-dark mb-1\">Pages Management</h2>\r\n              <p className=\"text-muted mb-0\">Control which sections appear on each page</p>\r\n            </div>\r\n            <div className=\"d-flex gap-2\">\r\n              <button\r\n                className=\"btn btn-outline-primary\"\r\n                onClick={() => loadPageConfig(selectedPage)}\r\n                disabled={loading}\r\n              >\r\n                <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n                Refresh\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Status Messages */}\r\n      {error && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n              <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\r\n              <div>{error}</div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close ms-auto\"\r\n                onClick={() => setError('')}\r\n              ></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {success && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <div className=\"alert alert-success d-flex align-items-center\" role=\"alert\">\r\n              <i className=\"bi bi-check-circle-fill me-2\"></i>\r\n              <div>{success}</div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close ms-auto\"\r\n                onClick={() => setSuccess('')}\r\n              ></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Content */}\r\n      <div className=\"row\">\r\n        {renderPageSidebar()}\r\n        {renderSections()}\r\n      </div>\r\n\r\n      {/* Category Configuration Modal */}\r\n      {renderCategoryConfigModal()}\r\n\r\n      {/* Loading Overlay */}\r\n      {loading && (\r\n        <div className=\"position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center\" \r\n             style={{ backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 9999 }}>\r\n          <div className=\"spinner-border text-primary\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}