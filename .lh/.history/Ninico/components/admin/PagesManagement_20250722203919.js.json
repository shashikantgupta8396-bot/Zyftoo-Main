{
    "sourceFile": ".history/Ninico/components/admin/PagesManagement_20250722203919.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753198882722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753198896892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1764 @@\n+'use client'\r\n+import React, { useState, useEffect } from 'react'\r\n+import { get, post, put } from '@/util/apiService'\r\n+import { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\n+\r\n+const PAGES = [\r\n+  { \r\n+    key: \"home\", \r\n+    label: \"Home Page\",\r\n+    description: \"Manage sections displayed on the homepage\"\r\n+  },\r\n+  { \r\n+    key: \"corporate\", \r\n+    label: \"Corporate Page\",\r\n+    description: \"Manage sections for corporate customers\"\r\n+  }\r\n+]\r\n+\r\n+export default function PagesManagement({ onNavigate }) {\r\n+  const [selectedPage, setSelectedPage] = useState(\"home\")\r\n+  const [loading, setLoading] = useState(false)\r\n+  const [error, setError] = useState('')\r\n+  const [success, setSuccess] = useState('')\r\n+  const [showCategoryConfig, setShowCategoryConfig] = useState(false)\r\n+  const [availableCategories, setAvailableCategories] = useState([])\r\n+  const [subcategories, setSubcategories] = useState([])\r\n+  const [pageConfig, setPageConfig] = useState(null)\r\n+\r\n+  // Category section configuration state - NEW HIERARCHICAL STRUCTURE\r\n+  const [categoryConfig, setCategoryConfig] = useState({\r\n+    enabled: true,\r\n+    maxCategories: 10, // Keep for UI display\r\n+    layout: 'grid',\r\n+    showSubcategories: true,\r\n+    // New hierarchical structure\r\n+    categories: [\r\n+      // Structure: { categoryId, enabled, order, type: 'main', subcategories: [...] }\r\n+    ],\r\n+    // Keep for backward compatibility and quick lookups\r\n+    categoryIds: []\r\n+  })\r\n+\r\n+  // Business rule constants\r\n+  const MAX_MAIN_CATEGORIES = 10\r\n+  const MIN_MAIN_CATEGORIES = 1\r\n+  const MAX_SUBCATEGORIES_PER_CATEGORY = 10\r\n+\r\n+  // UI state for category selection\r\n+  const [selectedMainCategory, setSelectedMainCategory] = useState(null)\r\n+\r\n+  // Define sections for each page\r\n+  const homeSections = [\r\n+    { \r\n+      key: \"giftCategories\", \r\n+      label: \"Gift Categories\", \r\n+      description: \"Display category grid with gifts\",\r\n+      order: 1,\r\n+      hasConfig: true\r\n+    },\r\n+    { \r\n+      key: \"slider\", \r\n+      label: \"Main Slider\", \r\n+      description: \"Hero banner with promotional slides\",\r\n+      order: 2\r\n+    },\r\n+    { \r\n+      key: \"services\", \r\n+      label: \"Services Section\", \r\n+      description: \"Highlight key services and benefits\",\r\n+      order: 3\r\n+    },\r\n+    { \r\n+      key: \"products\", \r\n+      label: \"Featured Products\", \r\n+      description: \"Showcase featured/trending products\",\r\n+      order: 4\r\n+    },\r\n+    { \r\n+      key: \"banner\", \r\n+      label: \"Promotional Banner\", \r\n+      description: \"Secondary promotional content\",\r\n+      order: 5\r\n+    },\r\n+    { \r\n+      key: \"dealProduct\", \r\n+      label: \"Deal Products\", \r\n+      description: \"Special offers and discounted items\",\r\n+      order: 6\r\n+    }\r\n+  ]\r\n+\r\n+  const corporateSections = [\r\n+    { \r\n+      key: \"corporateBanner\", \r\n+      label: \"Corporate Banner\", \r\n+      description: \"Hero section for corporate clients\",\r\n+      order: 1\r\n+    },\r\n+    { \r\n+      key: \"corporateServices\", \r\n+      label: \"Corporate Services\", \r\n+      description: \"B2B services and solutions\",\r\n+      order: 2\r\n+    },\r\n+    { \r\n+      key: \"corporateTestimonials\", \r\n+      label: \"Client Testimonials\", \r\n+      description: \"Corporate client reviews and case studies\",\r\n+      order: 3\r\n+    },\r\n+    { \r\n+      key: \"corporatePartners\", \r\n+      label: \"Partner Logos\", \r\n+      description: \"Display trusted corporate partners\",\r\n+      order: 4\r\n+    }\r\n+  ]\r\n+\r\n+  // Section visibility state\r\n+  const [visibleSections, setVisibleSections] = useState({\r\n+    home: {\r\n+      giftCategories: true,\r\n+      slider: true,\r\n+      services: true,\r\n+      products: true,\r\n+      banner: true,\r\n+      dealProduct: true,\r\n+    },\r\n+    corporate: {\r\n+      corporateBanner: true,\r\n+      corporateServices: true,\r\n+      corporateTestimonials: false,\r\n+      corporatePartners: false,\r\n+    },\r\n+  })\r\n+\r\n+  // Hardcoded admin token for testing\r\n+  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\r\n+\r\n+  // ========== HIERARCHICAL DATA MANAGEMENT HELPERS ==========\r\n+  \r\n+  // Get current counts for validation\r\n+  const getCurrentCounts = () => {\r\n+    // Handle both old array structure and new object structure\r\n+    let mainCategoriesCount = 0\r\n+    let totalSubcategoriesCount = 0\r\n+    let selectedCategorySubCount = 0\r\n+    const subcategoryCounts = {}\r\n+    \r\n+    if (Array.isArray(categoryConfig.categories)) {\r\n+      // Old structure: array of category objects\r\n+      mainCategoriesCount = categoryConfig.categories.filter(cat => cat.enabled).length\r\n+      \r\n+      categoryConfig.categories.forEach(category => {\r\n+        const subCount = category.subcategories ? category.subcategories.filter(sub => sub.enabled).length : 0\r\n+        subcategoryCounts[category.categoryId] = subCount\r\n+        totalSubcategoriesCount += subCount\r\n+        \r\n+        // Get subcategory count for currently selected main category\r\n+        if (selectedMainCategory && category.categoryId === selectedMainCategory) {\r\n+          selectedCategorySubCount = subCount\r\n+        }\r\n+      })\r\n+    } else if (typeof categoryConfig.categories === 'object' && categoryConfig.categories !== null) {\r\n+      // New structure: object with category IDs as keys\r\n+      mainCategoriesCount = Object.keys(categoryConfig.categories).filter(\r\n+        categoryId => categoryConfig.categories[categoryId]?.selected\r\n+      ).length\r\n+      \r\n+      Object.keys(categoryConfig.categories).forEach(categoryId => {\r\n+        const categoryData = categoryConfig.categories[categoryId]\r\n+        let subCount = 0\r\n+        \r\n+        if (categoryData && categoryData.subcategories) {\r\n+          subCount = Object.keys(categoryData.subcategories).filter(\r\n+            subId => categoryData.subcategories[subId]?.selected\r\n+          ).length\r\n+        }\r\n+        \r\n+        subcategoryCounts[categoryId] = subCount\r\n+        totalSubcategoriesCount += subCount\r\n+        \r\n+        // Get subcategory count for currently selected main category\r\n+        if (selectedMainCategory && categoryId === selectedMainCategory) {\r\n+          selectedCategorySubCount = subCount\r\n+        }\r\n+      })\r\n+    } else {\r\n+      // Fallback: use categoryIds for backward compatibility\r\n+      if (availableCategories.length > 0) {\r\n+        mainCategoriesCount = categoryConfig.categoryIds ? \r\n+          categoryConfig.categoryIds.filter(id => \r\n+            availableCategories.some(cat => cat.id === id && !cat.parent)\r\n+          ).length : 0\r\n+        \r\n+        totalSubcategoriesCount = categoryConfig.categoryIds ? \r\n+          categoryConfig.categoryIds.filter(id => \r\n+            subcategories.some(sub => sub.id === id)\r\n+          ).length : 0\r\n+          \r\n+        selectedCategorySubCount = selectedMainCategory && categoryConfig.categoryIds ? \r\n+          categoryConfig.categoryIds.filter(id => \r\n+            subcategories.some(sub => sub.id === id && \r\n+              (sub.parent?._id === selectedMainCategory || sub.parent === selectedMainCategory)\r\n+            )\r\n+          ).length : 0\r\n+      }\r\n+    }\r\n+    \r\n+    return { \r\n+      mainCategoriesCount, \r\n+      subcategoryCounts, \r\n+      totalSubcategoriesCount,\r\n+      selectedCategorySubCount \r\n+    }\r\n+  }\r\n+\r\n+  // Check if we can select more main categories\r\n+  const canSelectMoreMainCategories = () => {\r\n+    const { mainCategoriesCount } = getCurrentCounts()\r\n+    return mainCategoriesCount < MAX_MAIN_CATEGORIES\r\n+  }\r\n+\r\n+  // Check if we can select more subcategories for a specific category\r\n+  const canSelectMoreSubcategories = (categoryId) => {\r\n+    const { subcategoryCounts } = getCurrentCounts()\r\n+    const currentCount = subcategoryCounts[categoryId] || 0\r\n+    return currentCount < MAX_SUBCATEGORIES_PER_CATEGORY\r\n+  }\r\n+\r\n+  // Check if a main category is selected\r\n+  const isMainCategorySelected = (categoryId) => {\r\n+    if (Array.isArray(categoryConfig.categories)) {\r\n+      // Old structure\r\n+      const category = categoryConfig.categories.find(cat => cat.categoryId === categoryId)\r\n+      return category ? category.enabled : false\r\n+    } else if (typeof categoryConfig.categories === 'object') {\r\n+      // New structure\r\n+      return categoryConfig.categories[categoryId]?.selected || false\r\n+    } else {\r\n+      // Fallback\r\n+      return categoryConfig.categoryIds ? categoryConfig.categoryIds.includes(categoryId) : false\r\n+    }\r\n+  }\r\n+\r\n+  // Check if a subcategory is selected\r\n+  const isSubcategorySelected = (subcategoryId, parentCategoryId = null) => {\r\n+    if (Array.isArray(categoryConfig.categories)) {\r\n+      // Old structure\r\n+      return categoryConfig.categories.some(category => \r\n+        category.subcategories && category.subcategories.some(sub => sub.categoryId === subcategoryId && sub.enabled)\r\n+      )\r\n+    } else if (typeof categoryConfig.categories === 'object' && parentCategoryId) {\r\n+      // New structure\r\n+      return categoryConfig.categories[parentCategoryId]?.subcategories?.[subcategoryId]?.selected || false\r\n+    } else {\r\n+      // Fallback\r\n+      return categoryConfig.categoryIds ? categoryConfig.categoryIds.includes(subcategoryId) : false\r\n+    }\r\n+  }\r\n+\r\n+  // Find which main category a subcategory belongs to\r\n+  const findParentCategory = (subcategoryId) => {\r\n+    const subcategory = subcategories.find(sub => sub.id === subcategoryId)\r\n+    return subcategory?.parent?._id || subcategory?.parent\r\n+  }\r\n+\r\n+  // Update hierarchical category selection\r\n+  // Function removed - using simpler handleCategoryToggle approach\r\n+\r\n+  // Transform hierarchical data for backend save\r\n+  const transformForSave = () => {\r\n+    const saveData = {\r\n+      enabled: categoryConfig.enabled,\r\n+      maxCategories: categoryConfig.maxCategories,\r\n+      layout: categoryConfig.layout,\r\n+      showSubcategories: categoryConfig.showSubcategories,\r\n+      categories: []\r\n+    }\r\n+    \r\n+    // Flatten hierarchical structure for backend\r\n+    categoryConfig.categories.forEach(category => {\r\n+      if (category.enabled) {\r\n+        saveData.categories.push({\r\n+          categoryId: category.categoryId,\r\n+          enabled: true,\r\n+          order: category.order,\r\n+          type: 'main'\r\n+        })\r\n+      }\r\n+      \r\n+      category.subcategories.forEach(subcategory => {\r\n+        if (subcategory.enabled) {\r\n+          saveData.categories.push({\r\n+            categoryId: subcategory.categoryId,\r\n+            enabled: true,\r\n+            order: subcategory.order,\r\n+            type: 'subcategory',\r\n+            parentId: category.categoryId\r\n+          })\r\n+        }\r\n+      })\r\n+    })\r\n+    \r\n+    // Sort by order\r\n+    saveData.categories.sort((a, b) => a.order - b.order)\r\n+    \r\n+    console.log('💾 Data prepared for save:', saveData)\r\n+    return saveData\r\n+  }\r\n+\r\n+  // Load page configuration\r\n+  const loadPageConfig = async (pageKey) => {\r\n+    try {\r\n+      setLoading(true)\r\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n+      \r\n+      const response = await get(`/api/pages/${pageKey}`)\r\n+      console.log('Page config response:', response)\r\n+      \r\n+      // Handle the double-wrapped response from apiService\r\n+      const actualData = response.data // This contains the backend response\r\n+      \r\n+      if (actualData && actualData.success) {\r\n+        setPageConfig(actualData.data)\r\n+        \r\n+        // Extract category section config\r\n+        const categorySection = actualData.data.sections.find(s => s.sectionType === 'categorySection')\r\n+        if (categorySection && categorySection.config) {\r\n+          // Convert the saved flat structure back to hierarchical state\r\n+          const hierarchicalConfig = {\r\n+            enabled: categorySection.enabled || false,\r\n+            maxCategories: categorySection.config.maxCategories || 10,\r\n+            layout: categorySection.config.layout || 'grid',\r\n+            showSubcategories: categorySection.config.showSubcategories || true,\r\n+            categories: {}\r\n+          }\r\n+          \r\n+          // Rebuild hierarchical structure from saved config\r\n+          if (categorySection.config.categories && Array.isArray(categorySection.config.categories)) {\r\n+            categorySection.config.categories.forEach(cat => {\r\n+              if (cat.categoryId) {\r\n+                hierarchicalConfig.categories[cat.categoryId] = {\r\n+                  selected: cat.enabled || false,\r\n+                  order: cat.order || 0,\r\n+                  subcategories: {}\r\n+                }\r\n+                \r\n+                // Add subcategories if they exist\r\n+                if (cat.subcategories && Array.isArray(cat.subcategories)) {\r\n+                  cat.subcategories.forEach(sub => {\r\n+                    if (sub.subcategoryId) {\r\n+                      hierarchicalConfig.categories[cat.categoryId].subcategories[sub.subcategoryId] = {\r\n+                        selected: sub.enabled || false,\r\n+                        order: sub.order || 0\r\n+                      }\r\n+                    }\r\n+                  })\r\n+                }\r\n+              }\r\n+            })\r\n+          }\r\n+          \r\n+          setCategoryConfig(hierarchicalConfig)\r\n+          console.log('📂 Loaded hierarchical config:', hierarchicalConfig)\r\n+          \r\n+          // Update visibility state\r\n+          setVisibleSections(prev => ({\r\n+            ...prev,\r\n+            [pageKey]: {\r\n+              ...prev[pageKey],\r\n+              giftCategories: categorySection.enabled\r\n+            }\r\n+          }))\r\n+        } else {\r\n+          // Initialize with default hierarchical structure if no config exists\r\n+          setCategoryConfig({\r\n+            enabled: false,\r\n+            maxCategories: 10,\r\n+            layout: 'grid',\r\n+            showSubcategories: true,\r\n+            categories: {}\r\n+          })\r\n+        }\r\n+      }\r\n+      \r\n+      setError('')\r\n+    } catch (err) {\r\n+      console.error('Load page config error:', err)\r\n+      setError('Failed to load page configuration: ' + err.message)\r\n+    } finally {\r\n+      setLoading(false)\r\n+    }\r\n+  }\r\n+\r\n+  // Load available categories (same approach as CategoriesPage.js)\r\n+  const loadCategories = async () => {\r\n+    try {\r\n+      console.log('🔄 === LOADING CATEGORIES DEBUG ===')\r\n+      console.log('1. Setting auth token...')\r\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n+      \r\n+      console.log('2. Making API call to:', CATEGORY.GET_ALL)\r\n+      const response = await get(CATEGORY.GET_ALL)\r\n+      \r\n+      console.log('3. Raw API response received:')\r\n+      console.log('   - Response object:', response)\r\n+      console.log('   - Response type:', typeof response)\r\n+      console.log('   - Response keys:', Object.keys(response || {}))\r\n+      console.log('   - Response.success:', response?.success)\r\n+      console.log('   - Response.data:', response?.data)\r\n+      console.log('   - Response.data type:', typeof response?.data)\r\n+      console.log('   - Response.data is array:', Array.isArray(response?.data))\r\n+      \r\n+      if (!response.success) {\r\n+        console.error('4. ❌ API response failed:', response.error)\r\n+        throw new Error(response.error || 'Failed to fetch categories')\r\n+      }\r\n+      \r\n+      console.log('4. ✅ API response successful')\r\n+      console.log('5. Processing response.data...')\r\n+      console.log('   - Raw response.data:', JSON.stringify(response.data, null, 2))\r\n+      \r\n+      // Ensure response.data is an array\r\n+      let categoriesData = []\r\n+      if (Array.isArray(response.data)) {\r\n+        console.log('   - Response.data is direct array with', response.data.length, 'items')\r\n+        categoriesData = response.data\r\n+      } else if (response.data && typeof response.data === 'object') {\r\n+        console.log('   - Response.data is object, checking for nested arrays...')\r\n+        if (Array.isArray(response.data.categories)) {\r\n+          console.log('   - Found response.data.categories array with', response.data.categories.length, 'items')\r\n+          categoriesData = response.data.categories\r\n+        } else if (Array.isArray(response.data.data)) {\r\n+          console.log('   - Found response.data.data array with', response.data.data.length, 'items')\r\n+          categoriesData = response.data.data\r\n+        } else {\r\n+          console.log('   - No recognizable array found in response.data')\r\n+          categoriesData = []\r\n+        }\r\n+      }\r\n+      \r\n+      console.log('6. Categories data to process:')\r\n+      console.log('   - Array length:', categoriesData.length)\r\n+      console.log('   - Sample items (first 3):')\r\n+      categoriesData.slice(0, 3).forEach((cat, index) => {\r\n+        console.log(`     ${index + 1}.`, cat)\r\n+      })\r\n+      \r\n+      // Transform categories for display in the admin panel\r\n+      console.log('7. Transforming categories...')\r\n+      const transformedCategories = categoriesData.map((cat, index) => {\r\n+        console.log(`   - Transforming category ${index + 1}:`, {\r\n+          originalId: cat._id,\r\n+          originalName: cat.name,\r\n+          hasParent: !!cat.parent,\r\n+          parentInfo: cat.parent\r\n+        })\r\n+        \r\n+        return {\r\n+          id: cat.id || cat._id,\r\n+          value: cat.id || cat._id,\r\n+          label: cat.name,\r\n+          name: cat.name,\r\n+          image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n+          description: cat.description || '',\r\n+          parent: cat.parent\r\n+        }\r\n+      })\r\n+      \r\n+      console.log('8. Final transformed categories:')\r\n+      console.log('   - Total transformed:', transformedCategories.length)\r\n+      console.log('   - Main categories:', transformedCategories.filter(cat => !cat.parent).length)\r\n+      console.log('   - Sub categories:', transformedCategories.filter(cat => cat.parent).length)\r\n+      console.log('   - Full transformed data:', transformedCategories)\r\n+      \r\n+      console.log('9. Setting availableCategories state...')\r\n+      setAvailableCategories(transformedCategories)\r\n+      setError('')\r\n+      \r\n+      console.log('10. ✅ Categories loaded successfully!')\r\n+      console.log('🔚 === END LOADING CATEGORIES DEBUG ===')\r\n+      \r\n+    } catch (err) {\r\n+      console.error('❌ === LOAD CATEGORIES ERROR ===')\r\n+      console.error('Error details:', {\r\n+        message: err.message,\r\n+        stack: err.stack,\r\n+        name: err.name\r\n+      })\r\n+      console.error('Raw error object:', err)\r\n+      setError('Failed to load categories: ' + err.message)\r\n+      setAvailableCategories([])\r\n+    }\r\n+  }\r\n+\r\n+  // Load subcategories from separate subcategories collection\r\n+  const loadSubcategories = async () => {\r\n+    try {\r\n+      console.log('🔄 === LOADING SUBCATEGORIES DEBUG ===')\r\n+      console.log('1. Setting auth token...')\r\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n+      \r\n+      console.log('2. Making API call to:', SUBCATEGORY.GET_ALL)\r\n+      const response = await get(SUBCATEGORY.GET_ALL)\r\n+      \r\n+      console.log('3. Raw subcategories response:')\r\n+      console.log('   - Response object:', response)\r\n+      console.log('   - Response.success:', response?.success)\r\n+      console.log('   - Response.data:', response?.data)\r\n+      console.log('   - Response.data is array:', Array.isArray(response?.data))\r\n+      \r\n+      if (!response.success) {\r\n+        console.error('4. ❌ Subcategories API response failed:', response.error)\r\n+        throw new Error(response.error || 'Failed to fetch subcategories')\r\n+      }\r\n+      \r\n+      console.log('4. ✅ Subcategories API response successful')\r\n+      console.log('5. Processing subcategories data...')\r\n+      \r\n+      let subcategoriesData = []\r\n+      if (Array.isArray(response.data)) {\r\n+        subcategoriesData = response.data\r\n+      } else if (response.data && Array.isArray(response.data.data)) {\r\n+        subcategoriesData = response.data.data\r\n+      }\r\n+      \r\n+      console.log('6. Subcategories data to process:')\r\n+      console.log('   - Array length:', subcategoriesData.length)\r\n+      console.log('   - Sample items (first 3):')\r\n+      subcategoriesData.slice(0, 3).forEach((subcat, index) => {\r\n+        console.log(`     ${index + 1}.`, {\r\n+          id: subcat._id,\r\n+          name: subcat.name,\r\n+          parent: subcat.parent,\r\n+          status: subcat.status\r\n+        })\r\n+      })\r\n+      \r\n+      // Transform subcategories for display\r\n+      const transformedSubcategories = subcategoriesData.map((subcat, index) => {\r\n+        console.log(`   - Transforming subcategory ${index + 1}:`, {\r\n+          originalId: subcat._id,\r\n+          originalName: subcat.name,\r\n+          parentId: subcat.parent?._id || subcat.parent,\r\n+          parentName: subcat.parent?.name\r\n+        })\r\n+        \r\n+        return {\r\n+          id: subcat.id || subcat._id,\r\n+          value: subcat.id || subcat._id,\r\n+          label: subcat.name,\r\n+          name: subcat.name,\r\n+          image: subcat.image?.url || '/assets/img/product/category/default-subcategory.svg',\r\n+          description: subcat.description || '',\r\n+          parent: subcat.parent,\r\n+          status: subcat.status\r\n+        }\r\n+      })\r\n+      \r\n+      console.log('7. Final transformed subcategories:')\r\n+      console.log('   - Total transformed:', transformedSubcategories.length)\r\n+      console.log('   - Full transformed data:', transformedSubcategories)\r\n+      \r\n+      console.log('8. Setting subcategories state...')\r\n+      setSubcategories(transformedSubcategories)\r\n+      \r\n+      console.log('9. ✅ Subcategories loaded successfully!')\r\n+      console.log('🔚 === END LOADING SUBCATEGORIES DEBUG ===')\r\n+      \r\n+    } catch (err) {\r\n+      console.error('❌ === LOAD SUBCATEGORIES ERROR ===')\r\n+      console.error('Error details:', {\r\n+        message: err.message,\r\n+        stack: err.stack,\r\n+        name: err.name\r\n+      })\r\n+      setSubcategories([])\r\n+    }\r\n+  }\r\n+\r\n+  // Save category section configuration\r\n+  const saveCategoryConfig = async () => {\r\n+    console.log('🚀 === SAVE CATEGORY CONFIG START ===')\r\n+    console.log('1. Save function triggered')\r\n+    \r\n+    try {\r\n+      console.log('2. Setting loading state to true')\r\n+      setLoading(true)\r\n+      \r\n+      console.log('3. Setting auth token in localStorage')\r\n+      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n+      console.log('   - Auth token set:', ADMIN_TOKEN.substring(0, 20) + '...')\r\n+      \r\n+      console.log('4. Getting current counts for validation')\r\n+      const { mainCategoriesCount } = getCurrentCounts()\r\n+      console.log('   - Main categories count:', mainCategoriesCount)\r\n+      console.log('   - MIN_MAIN_CATEGORIES:', MIN_MAIN_CATEGORIES)\r\n+      console.log('   - MAX_MAIN_CATEGORIES:', MAX_MAIN_CATEGORIES)\r\n+      \r\n+      if (mainCategoriesCount < MIN_MAIN_CATEGORIES) {\r\n+        console.log('❌ Validation failed: Too few main categories')\r\n+        setError(`Please select at least ${MIN_MAIN_CATEGORIES} main category before saving.`)\r\n+        return\r\n+      }\r\n+      \r\n+      if (mainCategoriesCount > MAX_MAIN_CATEGORIES) {\r\n+        console.log('❌ Validation failed: Too many main categories')\r\n+        setError(`Too many main categories selected. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n+        return\r\n+      }\r\n+      \r\n+      console.log('✅ Validation passed')\r\n+      \r\n+      console.log('5. Current categoryConfig state before transform:')\r\n+      console.log('   - categoryConfig.enabled:', categoryConfig.enabled)\r\n+      console.log('   - categoryConfig.maxCategories:', categoryConfig.maxCategories)\r\n+      console.log('   - categoryConfig.layout:', categoryConfig.layout)\r\n+      console.log('   - categoryConfig.showSubcategories:', categoryConfig.showSubcategories)\r\n+      console.log('   - categoryConfig.categories:', categoryConfig.categories)\r\n+      console.log('   - categoryConfig.categoryIds:', categoryConfig.categoryIds)\r\n+      \r\n+      // Transform hierarchical data for save\r\n+      console.log('6. Transforming data for save...')\r\n+      const configData = transformForSave()\r\n+      console.log('7. Transformed config data:')\r\n+      console.log('   - Full configData object:', JSON.stringify(configData, null, 2))\r\n+      console.log('   - configData.enabled:', configData.enabled)\r\n+      console.log('   - configData.categories length:', configData.categories?.length || 0)\r\n+      \r\n+      console.log('8. Preparing API request')\r\n+      const apiEndpoint = '/api/pages/home/sections/category'\r\n+      console.log('   - API endpoint:', apiEndpoint)\r\n+      console.log('   - Request method: PUT')\r\n+      console.log('   - Request data:', configData)\r\n+      console.log('   - Request headers will include auth token')\r\n+      \r\n+      console.log('9. Making API request...')\r\n+      const response = await put(apiEndpoint, configData)\r\n+      console.log('10. API response received:')\r\n+      console.log('    - Raw response:', response)\r\n+      console.log('    - Response type:', typeof response)\r\n+      console.log('    - Response keys:', Object.keys(response || {}))\r\n+      console.log('    - Response.data:', response?.data)\r\n+      console.log('    - Response.status:', response?.status)\r\n+      console.log('    - Response.success:', response?.success)\r\n+      \r\n+      // Handle the double-wrapped response from apiService\r\n+      console.log('11. Processing response data...')\r\n+      const actualData = response.data // This contains the backend response\r\n+      console.log('    - actualData:', actualData)\r\n+      console.log('    - actualData type:', typeof actualData)\r\n+      console.log('    - actualData.success:', actualData?.success)\r\n+      console.log('    - actualData.message:', actualData?.message)\r\n+      \r\n+      if (actualData && actualData.success) {\r\n+        console.log('✅ Save successful!')\r\n+        setSuccess('Category section configuration saved successfully!')\r\n+        setTimeout(() => setSuccess(''), 3000)\r\n+        setShowCategoryConfig(false)\r\n+        \r\n+        // Trigger refresh notification (optional)\r\n+        try {\r\n+          console.log('12. Triggering homepage refresh...')\r\n+          await get('/pages/home/refresh/categorySection')\r\n+          console.log('    - Homepage refresh successful')\r\n+        } catch (refreshError) {\r\n+          console.log('⚠️ Refresh notification failed, but save was successful:', refreshError)\r\n+        }\r\n+        \r\n+        console.log('13. Reloading page config...')\r\n+        await loadPageConfig(selectedPage) // Reload to get updated config\r\n+        console.log('14. Page config reloaded')\r\n+      } else {\r\n+        console.log('❌ Save failed - API returned unsuccessful response')\r\n+        console.log('    - actualData:', actualData)\r\n+        const errorMessage = actualData?.message || 'Unknown error'\r\n+        console.log('    - Error message:', errorMessage)\r\n+        setError('Failed to save configuration: ' + errorMessage)\r\n+      }\r\n+      \r\n+    } catch (err) {\r\n+      console.error('❌ === SAVE CATEGORY CONFIG ERROR ===')\r\n+      console.error('Error caught in try-catch:')\r\n+      console.error('   - Error object:', err)\r\n+      console.error('   - Error message:', err.message)\r\n+      console.error('   - Error name:', err.name)\r\n+      console.error('   - Error stack:', err.stack)\r\n+      \r\n+      if (err.response) {\r\n+        console.error('   - HTTP Response Error Details:')\r\n+        console.error('     - Status:', err.response.status)\r\n+        console.error('     - Status text:', err.response.statusText)\r\n+        console.error('     - Response data:', err.response.data)\r\n+        console.error('     - Response headers:', err.response.headers)\r\n+      }\r\n+      \r\n+      if (err.request) {\r\n+        console.error('   - Request Error Details:')\r\n+        console.error('     - Request object:', err.request)\r\n+      }\r\n+      \r\n+      setError('Failed to save category configuration: ' + err.message)\r\n+    } finally {\r\n+      console.log('15. Setting loading state to false')\r\n+      setLoading(false)\r\n+      console.log('🔚 === SAVE CATEGORY CONFIG END ===')\r\n+    }\r\n+  }\r\n+\r\n+  // Toggle section visibility\r\n+  const handleToggleSection = async (page, section) => {\r\n+    if (section === 'giftCategories') {\r\n+      // For category section, update the actual config\r\n+      setCategoryConfig(prev => ({ ...prev, enabled: !prev.enabled }))\r\n+      return\r\n+    }\r\n+    \r\n+    const newVisibility = {\r\n+      ...visibleSections,\r\n+      [page]: {\r\n+        ...visibleSections[page],\r\n+        [section]: !visibleSections[page][section],\r\n+      }\r\n+    }\r\n+    \r\n+    setVisibleSections(newVisibility)\r\n+  }\r\n+\r\n+  // Open category configuration modal\r\n+  const openCategoryConfig = () => {\r\n+    setShowCategoryConfig(true)\r\n+    // Reset to first main category when opening modal\r\n+    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n+    if (mainCategories.length > 0) {\r\n+      setSelectedMainCategory(mainCategories[0].id)\r\n+    }\r\n+  }\r\n+\r\n+  // Handle category selection with validation - SIMPLIFIED for current structure\r\n+  const handleCategoryToggle = (categoryId, parentCategoryId = null) => {\r\n+    const isMainCategory = !parentCategoryId && availableCategories.some(cat => cat.id === categoryId && !cat.parent)\r\n+    \r\n+    console.log('🎯 Category toggle triggered:', { categoryId, parentCategoryId, isMainCategory })\r\n+    \r\n+    if (isMainCategory) {\r\n+      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n+      const currentMainCount = categoryConfig.categoryIds.filter(id => \r\n+        availableCategories.some(cat => cat.id === id && !cat.parent)\r\n+      ).length\r\n+      \r\n+      console.log('📊 Main category status:', { isCurrentlySelected, currentCount: currentMainCount })\r\n+      \r\n+      // Validation for main categories\r\n+      if (!isCurrentlySelected) {\r\n+        // Trying to select\r\n+        if (currentMainCount >= MAX_MAIN_CATEGORIES) {\r\n+          setError(`Cannot select more main categories. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n+          return\r\n+        }\r\n+      } else {\r\n+        // Trying to deselect\r\n+        if (currentMainCount <= MIN_MAIN_CATEGORIES) {\r\n+          setError(`Cannot deselect this category. At least ${MIN_MAIN_CATEGORIES} main category must be selected.`)\r\n+          return\r\n+        }\r\n+      }\r\n+      \r\n+      // Clear any existing errors\r\n+      setError('')\r\n+      \r\n+      // Update categoryIds array\r\n+      setCategoryConfig(prev => {\r\n+        if (!isCurrentlySelected) {\r\n+          // Add to selection\r\n+          return {\r\n+            ...prev,\r\n+            categoryIds: [...prev.categoryIds, categoryId]\r\n+          }\r\n+        } else {\r\n+          // Remove from selection (and remove all its subcategories too)\r\n+          const subcategoriesOfThisCategory = subcategories\r\n+            .filter(sub => (sub.parent?._id || sub.parent) === categoryId)\r\n+            .map(sub => sub.id)\r\n+          \r\n+          return {\r\n+            ...prev,\r\n+            categoryIds: prev.categoryIds.filter(id => \r\n+              id !== categoryId && !subcategoriesOfThisCategory.includes(id)\r\n+            )\r\n+          }\r\n+        }\r\n+      })\r\n+      \r\n+    } else {\r\n+      // Subcategory logic\r\n+      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n+      const parentId = parentCategoryId || findParentCategory(categoryId)\r\n+      \r\n+      console.log('📊 Subcategory status:', { isCurrentlySelected, parentId })\r\n+      \r\n+      if (!isCurrentlySelected && parentId) {\r\n+        // Check subcategory limit for this parent\r\n+        const currentSubCount = categoryConfig.categoryIds.filter(id => \r\n+          subcategories.some(sub => sub.id === id && (sub.parent?._id || sub.parent) === parentId)\r\n+        ).length\r\n+        \r\n+        if (currentSubCount >= MAX_SUBCATEGORIES_PER_CATEGORY) {\r\n+          const parentName = availableCategories.find(cat => cat.id === parentId)?.name || 'this category'\r\n+          setError(`Cannot select more subcategories for ${parentName}. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} per category allowed.`)\r\n+          return\r\n+        }\r\n+      }\r\n+      \r\n+      // Clear any existing errors\r\n+      setError('')\r\n+      \r\n+      // Update categoryIds array\r\n+      setCategoryConfig(prev => {\r\n+        if (!isCurrentlySelected) {\r\n+          // Add to selection\r\n+          let newIds = [...prev.categoryIds, categoryId]\r\n+          \r\n+          // Also ensure parent is selected\r\n+          if (parentId && !prev.categoryIds.includes(parentId)) {\r\n+            newIds.push(parentId)\r\n+          }\r\n+          \r\n+          return {\r\n+            ...prev,\r\n+            categoryIds: newIds\r\n+          }\r\n+        } else {\r\n+          // Remove from selection\r\n+          return {\r\n+            ...prev,\r\n+            categoryIds: prev.categoryIds.filter(id => id !== categoryId)\r\n+          }\r\n+        }\r\n+      })\r\n+    }\r\n+  }\r\n+\r\n+  // Handle max categories change\r\n+  const handleMaxCategoriesChange = (value) => {\r\n+    const numValue = parseInt(value) || 0\r\n+    setCategoryConfig(prev => ({ ...prev, maxCategories: numValue }))\r\n+  }\r\n+\r\n+  // Load data when page changes\r\n+  useEffect(() => {\r\n+    const loadData = async () => {\r\n+      await loadPageConfig(selectedPage)\r\n+      await loadCategories()\r\n+      await loadSubcategories()\r\n+    }\r\n+    loadData()\r\n+  }, [selectedPage])\r\n+\r\n+  // Get sections for current page\r\n+  const getCurrentSections = () => {\r\n+    return selectedPage === \"home\" ? homeSections : corporateSections\r\n+  }\r\n+\r\n+  // Render category configuration modal\r\n+  const renderCategoryConfigModal = () => {\r\n+    if (!showCategoryConfig) return null\r\n+\r\n+    console.log('🎨 === RENDERING CATEGORY MODAL DEBUG ===')\r\n+    console.log('1. Modal render triggered')\r\n+    console.log('2. availableCategories state:')\r\n+    console.log('   - Length:', availableCategories.length)\r\n+    console.log('   - Is array:', Array.isArray(availableCategories))\r\n+    console.log('   - Full data:', availableCategories)\r\n+    \r\n+    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n+    const subCategories = subcategories // Use the separate subcategories state\r\n+    \r\n+    console.log('3. Category breakdown:')\r\n+    console.log('   - Main categories:', mainCategories.length, mainCategories)\r\n+    console.log('   - Sub categories:', subCategories.length, subCategories)\r\n+    \r\n+    // Get subcategories for selected main category\r\n+    const getSubcategoriesForCategory = (categoryId) => {\r\n+      console.log('🔍 Getting subcategories for category ID:', categoryId)\r\n+      const filtered = subCategories.filter(subCat => {\r\n+        const parentId = subCat.parent?._id || subCat.parent\r\n+        console.log(`   - Checking subcategory \"${subCat.name}\": parent=${parentId}, matches=${parentId === categoryId}`)\r\n+        return parentId === categoryId\r\n+      })\r\n+      console.log(`   - Found ${filtered.length} subcategories for category ${categoryId}:`, filtered)\r\n+      return filtered\r\n+    }\r\n+\r\n+    // Auto-select first main category if none selected\r\n+    if (!selectedMainCategory && mainCategories.length > 0) {\r\n+      setSelectedMainCategory(mainCategories[0].id)\r\n+    }\r\n+\r\n+    const selectedCategorySubcategories = selectedMainCategory ? \r\n+      getSubcategoriesForCategory(selectedMainCategory) : []\r\n+\r\n+    return (\r\n+      <div className=\"modal show d-block\" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n+        <div className=\"modal-dialog modal-xl\">\r\n+          <div className=\"modal-content\">\r\n+            <div className=\"modal-header\">\r\n+              <h5 className=\"modal-title\">\r\n+                <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n+                Category Section Configuration\r\n+              </h5>\r\n+              <button \r\n+                type=\"button\" \r\n+                className=\"btn-close\" \r\n+                onClick={() => setShowCategoryConfig(false)}\r\n+              ></button>\r\n+            </div>\r\n+            <div className=\"modal-body\">\r\n+              {/* Enable/Disable Section */}\r\n+              <div className=\"row mb-4\">\r\n+                <div className=\"col-12\">\r\n+                  <div className=\"form-check form-switch\">\r\n+                    <input \r\n+                      className=\"form-check-input\" \r\n+                      type=\"checkbox\" \r\n+                      id=\"enableCategorySection\"\r\n+                      checked={categoryConfig.enabled}\r\n+                      onChange={(e) => setCategoryConfig(prev => ({ ...prev, enabled: e.target.checked }))}\r\n+                    />\r\n+                    <label className=\"form-check-label fw-semibold\" htmlFor=\"enableCategorySection\">\r\n+                      Enable Category Section\r\n+                    </label>\r\n+                  </div>\r\n+                  <small className=\"text-muted\">Turn on/off the category section on the homepage</small>\r\n+                </div>\r\n+              </div>\r\n+\r\n+              {categoryConfig.enabled && (\r\n+                <>\r\n+                  {/* Selection Summary and Validation */}\r\n+                  <div className=\"row mb-4\">\r\n+                    <div className=\"col-12\">\r\n+                      <div className=\"card border-info\">\r\n+                        <div className=\"card-header bg-info bg-opacity-10\">\r\n+                          <h6 className=\"mb-0 text-info\">\r\n+                            <i className=\"bi bi-info-circle me-2\"></i>\r\n+                            Selection Summary\r\n+                          </h6>\r\n+                        </div>\r\n+                        <div className=\"card-body\">\r\n+                          <div className=\"row\">\r\n+                            <div className=\"col-md-6\">\r\n+                              <div className={`d-flex justify-content-between align-items-center p-2 rounded ${getCurrentCounts().mainCategoriesCount >= MIN_MAIN_CATEGORIES && getCurrentCounts().mainCategoriesCount <= MAX_MAIN_CATEGORIES ? 'bg-success bg-opacity-10 text-success' : 'bg-warning bg-opacity-10 text-warning'}`}>\r\n+                                <span className=\"fw-semibold\">\r\n+                                  <i className=\"bi bi-grid me-1\"></i>\r\n+                                  Main Categories:\r\n+                                </span>\r\n+                                <span className=\"badge bg-primary\">\r\n+                                  {getCurrentCounts().mainCategoriesCount} / {MAX_MAIN_CATEGORIES}\r\n+                                </span>\r\n+                              </div>\r\n+                              {getCurrentCounts().mainCategoriesCount < MIN_MAIN_CATEGORIES && (\r\n+                                <small className=\"text-warning\">\r\n+                                  <i className=\"bi bi-exclamation-triangle me-1\"></i>\r\n+                                  Minimum {MIN_MAIN_CATEGORIES} main category required\r\n+                                </small>\r\n+                              )}\r\n+                            </div>\r\n+                            <div className=\"col-md-6\">\r\n+                              <div className=\"d-flex justify-content-between align-items-center p-2 rounded bg-info bg-opacity-10 text-info\">\r\n+                                <span className=\"fw-semibold\">\r\n+                                  <i className=\"bi bi-tags me-1\"></i>\r\n+                                  Total Subcategories:\r\n+                                </span>\r\n+                                <span className=\"badge bg-info\">\r\n+                                  {getCurrentCounts().totalSubcategoriesCount}\r\n+                                </span>\r\n+                              </div>\r\n+                              {selectedMainCategory && (\r\n+                                <small className=\"text-muted\">\r\n+                                  <i className=\"bi bi-arrow-right me-1\"></i>\r\n+                                  Selected category: {getCurrentCounts().selectedCategorySubCount} / {MAX_SUBCATEGORIES_PER_CATEGORY}\r\n+                                </small>\r\n+                              )}\r\n+                            </div>\r\n+                          </div>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+\r\n+              {categoryConfig.enabled && (\r\n+                <>\r\n+                  {/* Configuration Options */}\r\n+                  <div className=\"row mb-4\">\r\n+                    <div className=\"col-md-4\">\r\n+                      <label className=\"form-label fw-semibold\">Maximum Categories to Show</label>\r\n+                      <input \r\n+                        type=\"number\" \r\n+                        className=\"form-control\"\r\n+                        min=\"1\"\r\n+                        max=\"20\"\r\n+                        value={categoryConfig.maxCategories}\r\n+                        onChange={(e) => handleMaxCategoriesChange(e.target.value)}\r\n+                      />\r\n+                      <small className=\"text-muted\">Limit how many categories appear (0 = no limit)</small>\r\n+                    </div>\r\n+                    <div className=\"col-md-4\">\r\n+                      <label className=\"form-label fw-semibold\">Layout Style</label>\r\n+                      <select \r\n+                        className=\"form-select\"\r\n+                        value={categoryConfig.layout}\r\n+                        onChange={(e) => setCategoryConfig(prev => ({ ...prev, layout: e.target.value }))}\r\n+                      >\r\n+                        <option value=\"grid\">Grid Layout</option>\r\n+                        <option value=\"carousel\">Carousel</option>\r\n+                        <option value=\"list\">List View</option>\r\n+                      </select>\r\n+                    </div>\r\n+                    <div className=\"col-md-4\">\r\n+                      <div className=\"form-check mt-4\">\r\n+                        <input \r\n+                          className=\"form-check-input\" \r\n+                          type=\"checkbox\" \r\n+                          id=\"showSubcategories\"\r\n+                          checked={categoryConfig.showSubcategories}\r\n+                          onChange={(e) => setCategoryConfig(prev => ({ ...prev, showSubcategories: e.target.checked }))}\r\n+                        />\r\n+                        <label className=\"form-check-label\" htmlFor=\"showSubcategories\">\r\n+                          Show subcategories on hover\r\n+                        </label>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+\r\n+                  {/* Selection Summary */}\r\n+                  <div className=\"row mb-4\">\r\n+                    <div className=\"col-12\">\r\n+                      <div className=\"alert alert-info d-flex align-items-center\">\r\n+                        <i className=\"bi bi-info-circle me-2\"></i>\r\n+                        <div>\r\n+                          <strong>Selection Summary:</strong> {categoryConfig.categoryIds.length} categories selected \r\n+                          ({categoryConfig.categoryIds.filter(id => mainCategories.some(cat => cat.id === id)).length} main categories, {categoryConfig.categoryIds.filter(id => subCategories.some(cat => cat.id === id)).length} subcategories)\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  </div>\r\n+\r\n+                  {/* Category Selection Interface */}\r\n+                  <div className=\"row mb-4\">\r\n+                    <div className=\"col-12\">\r\n+                      <label className=\"form-label fw-semibold mb-3\">Select Categories and Subcategories</label>\r\n+                      \r\n+                      {mainCategories.length > 0 ? (\r\n+                        <div className=\"row\">\r\n+                          {/* Left Side - Main Categories */}\r\n+                          <div className=\"col-md-6\">\r\n+                            <div className=\"card\">\r\n+                              <div className=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n+                                <h6 className=\"mb-0\">\r\n+                                  <i className=\"bi bi-grid text-primary me-2\"></i>\r\n+                                  Main Categories ({mainCategories.length})\r\n+                                </h6>\r\n+                                <span className=\"badge bg-primary\">\r\n+                                  {getCurrentCounts().mainCategoriesCount} selected\r\n+                                </span>\r\n+                              </div>\r\n+                              <div className=\"card-body p-0\">\r\n+                                <div className=\"list-group list-group-flush\" style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n+                                  {mainCategories.map((category, index) => {\r\n+                                    // Use the flat categoryIds array for now since categories is still an array\r\n+                                    const isSelected = categoryConfig.categoryIds.includes(category.id)\r\n+                                    const isActiveTab = selectedMainCategory === category.id\r\n+                                    const subcategoryCount = getSubcategoriesForCategory(category.id).length\r\n+                                    const selectedSubcategoryCount = getSubcategoriesForCategory(category.id)\r\n+                                      .filter(sub => categoryConfig.categoryIds.includes(sub.id)).length\r\n+                                    \r\n+                                    return (\r\n+                                      <div \r\n+                                        key={category.id} \r\n+                                        className={`list-group-item list-group-item-action border-0 ${isActiveTab ? 'active' : ''} ${isSelected ? 'bg-primary bg-opacity-10 border-start border-primary border-3' : ''}`}\r\n+                                        style={{ cursor: 'pointer' }}\r\n+                                        onClick={() => setSelectedMainCategory(category.id)}\r\n+                                      >\r\n+                                        <div className=\"d-flex align-items-center\">\r\n+                                          <div className=\"form-check me-3\" onClick={(e) => e.stopPropagation()}>\r\n+                                            <input \r\n+                                              className=\"form-check-input\" \r\n+                                              type=\"checkbox\" \r\n+                                              id={`main-category-${category.id}`}\r\n+                                              checked={isSelected}\r\n+                                              onChange={() => handleCategoryToggle(category.id)}\r\n+                                            />\r\n+                                          </div>\r\n+                                          \r\n+                                          {category.image && (\r\n+                                            <img \r\n+                                              src={category.image} \r\n+                                              alt={category.name}\r\n+                                              className=\"me-3 flex-shrink-0 border\"\r\n+                                              style={{ width: '42px', height: '42px', objectFit: 'cover', borderRadius: '8px' }}\r\n+                                            />\r\n+                                          )}\r\n+                                          \r\n+                                          <div className=\"flex-grow-1\">\r\n+                                            <div className=\"d-flex justify-content-between align-items-center\">\r\n+                                              <div>\r\n+                                                <h6 className={`mb-1 fw-semibold ${isActiveTab ? 'text-white' : 'text-dark'}`}>\r\n+                                                  <i className=\"bi bi-grid text-primary me-1\" style={{ fontSize: '14px' }}></i>\r\n+                                                  {category.name}\r\n+                                                </h6>\r\n+                                                {category.description && (\r\n+                                                  <p className={`mb-1 small ${isActiveTab ? 'text-white-50' : 'text-muted'}`}>\r\n+                                                    {category.description}\r\n+                                                  </p>\r\n+                                                )}\r\n+                                                <div className=\"d-flex gap-1 align-items-center\">\r\n+                                                  <span className={`badge ${isActiveTab ? 'bg-white text-primary' : 'bg-primary'}`} style={{ fontSize: '9px' }}>\r\n+                                                    Main Category\r\n+                                                  </span>\r\n+                                                  {isSelected && (\r\n+                                                    <span className={`badge ${isActiveTab ? 'bg-success text-white' : 'bg-success'}`} style={{ fontSize: '9px' }}>\r\n+                                                      <i className=\"bi bi-check-circle me-1\"></i>\r\n+                                                      Selected\r\n+                                                    </span>\r\n+                                                  )}\r\n+                                                </div>\r\n+                                              </div>\r\n+                                              <div className=\"text-end\">\r\n+                                                {subcategoryCount > 0 && (\r\n+                                                  <div className=\"mb-1\">\r\n+                                                    <span className={`badge ${isActiveTab ? 'bg-white text-primary' : 'bg-secondary'}`} style={{ fontSize: '10px' }}>\r\n+                                                      {subcategoryCount} subs\r\n+                                                    </span>\r\n+                                                  </div>\r\n+                                                )}\r\n+                                                {selectedSubcategoryCount > 0 && (\r\n+                                                  <div className=\"mb-1\">\r\n+                                                    <span className={`badge ${isActiveTab ? 'bg-success text-white' : 'bg-success'}`} style={{ fontSize: '10px' }}>\r\n+                                                      {selectedSubcategoryCount} selected\r\n+                                                    </span>\r\n+                                                  </div>\r\n+                                                )}\r\n+                                                <i className={`bi bi-chevron-right ${isActiveTab ? 'text-white' : 'text-muted'}`}></i>\r\n+                                              </div>\r\n+                                            </div>\r\n+                                          </div>\r\n+                                        </div>\r\n+                                      </div>\r\n+                                    )\r\n+                                  })}\r\n+                                </div>\r\n+                              </div>\r\n+                            </div>\r\n+                          </div>\r\n+\r\n+                          {/* Right Side - Subcategories */}\r\n+                          <div className=\"col-md-6\">\r\n+                            <div className=\"card\">\r\n+                              <div className=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n+                                <h6 className=\"mb-0\">\r\n+                                  <i className=\"bi bi-tag text-secondary me-2\"></i>\r\n+                                  Subcategories\r\n+                                  {selectedMainCategory && (\r\n+                                    <span className=\"text-muted ms-2\">\r\n+                                      for \"{mainCategories.find(cat => cat.id === selectedMainCategory)?.name}\"\r\n+                                    </span>\r\n+                                  )}\r\n+                                </h6>\r\n+                                {selectedCategorySubcategories.length > 0 && (\r\n+                                  <span className=\"badge bg-secondary\">\r\n+                                    {selectedCategorySubcategories.length} subcategories\r\n+                                  </span>\r\n+                                )}\r\n+                              </div>\r\n+                              <div className=\"card-body p-0\">\r\n+                                {selectedMainCategory ? (\r\n+                                  selectedCategorySubcategories.length > 0 ? (\r\n+                                    <>\r\n+                                      {/* Subcategories Stats */}\r\n+                                      <div className=\"p-3 bg-light border-bottom\">\r\n+                                        <div className=\"row text-center\">\r\n+                                          <div className=\"col-6\">\r\n+                                            <div className=\"small\">\r\n+                                              <strong>{selectedCategorySubcategories.filter(sub => categoryConfig.categoryIds.includes(sub.id)).length}</strong>\r\n+                                              <br />\r\n+                                              <span className=\"text-muted\">Selected</span>\r\n+                                            </div>\r\n+                                          </div>\r\n+                                          <div className=\"col-6\">\r\n+                                            <div className=\"small\">\r\n+                                              <strong>{selectedCategorySubcategories.filter(sub => sub.status).length}</strong>\r\n+                                              <br />\r\n+                                              <span className=\"text-muted\">Active</span>\r\n+                                            </div>\r\n+                                          </div>\r\n+                                        </div>\r\n+                                      </div>\r\n+\r\n+                                      {/* Quick Actions for Subcategories */}\r\n+                                      <div className=\"p-2 border-bottom\">\r\n+                                        <div className=\"d-flex gap-1\">\r\n+                                          <button \r\n+                                            type=\"button\" \r\n+                                            className=\"btn btn-outline-success btn-sm\"\r\n+                                            onClick={() => {\r\n+                                              const currentSubIds = selectedCategorySubcategories.map(cat => cat.id)\r\n+                                              setCategoryConfig(prev => ({\r\n+                                                ...prev,\r\n+                                                categoryIds: [...new Set([...prev.categoryIds, ...currentSubIds])]\r\n+                                              }))\r\n+                                            }}\r\n+                                          >\r\n+                                            <i className=\"bi bi-check-all me-1\"></i>\r\n+                                            Select All\r\n+                                          </button>\r\n+                                          \r\n+                                          <button \r\n+                                            type=\"button\" \r\n+                                            className=\"btn btn-outline-secondary btn-sm\"\r\n+                                            onClick={() => {\r\n+                                              const currentSubIds = selectedCategorySubcategories.map(cat => cat.id)\r\n+                                              setCategoryConfig(prev => ({\r\n+                                                ...prev,\r\n+                                                categoryIds: prev.categoryIds.filter(id => !currentSubIds.includes(id))\r\n+                                              }))\r\n+                                            }}\r\n+                                          >\r\n+                                            <i className=\"bi bi-x-circle me-1\"></i>\r\n+                                            Clear All\r\n+                                          </button>\r\n+                                        </div>\r\n+                                      </div>\r\n+\r\n+                                      {/* Subcategories List */}\r\n+                                      <div className=\"list-group list-group-flush\" style={{ maxHeight: '350px', overflowY: 'auto' }}>\r\n+                                        {selectedCategorySubcategories.map((subcategory, index) => {\r\n+                                          // Use the flat categoryIds array for now since categories is still an array\r\n+                                          const isSelected = categoryConfig.categoryIds.includes(subcategory.id)\r\n+                                          \r\n+                                          return (\r\n+                                            <div \r\n+                                              key={subcategory.id} \r\n+                                              className={`list-group-item list-group-item-action border-0 ${isSelected ? 'bg-success bg-opacity-10 border-start border-success border-3' : ''}`}\r\n+                                            >\r\n+                                              <div className=\"d-flex align-items-center\">\r\n+                                                <div className=\"form-check me-3\">\r\n+                                                  <input \r\n+                                                    className=\"form-check-input form-check-input-success\" \r\n+                                                    type=\"checkbox\" \r\n+                                                    id={`sub-category-${subcategory.id}`}\r\n+                                                    checked={isSelected}\r\n+                                                    onChange={() => handleCategoryToggle(subcategory.id, selectedMainCategory)}\r\n+                                                  />\r\n+                                                </div>\r\n+                                                \r\n+                                                {subcategory.image && (\r\n+                                                  <img \r\n+                                                    src={subcategory.image} \r\n+                                                    alt={subcategory.name}\r\n+                                                    className=\"me-3 flex-shrink-0 border\"\r\n+                                                    style={{ width: '36px', height: '36px', objectFit: 'cover', borderRadius: '6px' }}\r\n+                                                  />\r\n+                                                )}\r\n+                                                \r\n+                                                <div className=\"flex-grow-1\">\r\n+                                                  <div className=\"d-flex justify-content-between align-items-start\">\r\n+                                                    <div>\r\n+                                                      <h6 className=\"mb-1 text-dark fw-semibold\">\r\n+                                                        <i className=\"bi bi-tag text-success me-1\" style={{ fontSize: '12px' }}></i>\r\n+                                                        {subcategory.name}\r\n+                                                      </h6>\r\n+                                                      {subcategory.description && (\r\n+                                                        <p className=\"mb-1 text-muted small\">{subcategory.description}</p>\r\n+                                                      )}\r\n+                                                      <div className=\"d-flex gap-1 align-items-center\">\r\n+                                                        <span className=\"badge bg-secondary\" style={{ fontSize: '9px' }}>\r\n+                                                          Subcategory\r\n+                                                        </span>\r\n+                                                        <span className={`badge ${subcategory.status ? 'bg-success' : 'bg-danger'}`} style={{ fontSize: '9px' }}>\r\n+                                                          {subcategory.status ? 'Active' : 'Inactive'}\r\n+                                                        </span>\r\n+                                                        {isSelected && (\r\n+                                                          <span className=\"badge bg-primary\" style={{ fontSize: '9px' }}>\r\n+                                                            <i className=\"bi bi-check-circle me-1\"></i>\r\n+                                                            Selected\r\n+                                                          </span>\r\n+                                                        )}\r\n+                                                      </div>\r\n+                                                    </div>\r\n+                                                    <div className=\"text-end\">\r\n+                                                      <small className=\"text-muted\">#{index + 1}</small>\r\n+                                                    </div>\r\n+                                                  </div>\r\n+                                                </div>\r\n+                                              </div>\r\n+                                            </div>\r\n+                                          )\r\n+                                        })}\r\n+                                      </div>\r\n+\r\n+                                      {/* Footer Info */}\r\n+                                      <div className=\"p-2 bg-light border-top text-center\">\r\n+                                        <small className=\"text-muted\">\r\n+                                          <i className=\"bi bi-info-circle me-1\"></i>\r\n+                                          Click checkboxes to select subcategories for homepage display\r\n+                                        </small>\r\n+                                      </div>\r\n+                                    </>\r\n+                                  ) : (\r\n+                                    <div className=\"text-center py-5\">\r\n+                                      <i className=\"bi bi-folder2-open text-muted\" style={{ fontSize: '2.5rem' }}></i>\r\n+                                      <h6 className=\"mt-3 text-muted\">No subcategories found</h6>\r\n+                                      <p className=\"text-muted mb-3\">\r\n+                                        The category \"{mainCategories.find(cat => cat.id === selectedMainCategory)?.name}\" doesn't have any subcategories yet.\r\n+                                      </p>\r\n+                                      <button \r\n+                                        className=\"btn btn-outline-primary btn-sm\"\r\n+                                        onClick={() => {\r\n+                                          // You can add navigation to create subcategory here\r\n+                                          alert('Navigate to Categories > Subcategories to create subcategories for this category')\r\n+                                        }}\r\n+                                      >\r\n+                                        <i className=\"bi bi-plus-circle me-1\"></i>\r\n+                                        Create Subcategories\r\n+                                      </button>\r\n+                                    </div>\r\n+                                  )\r\n+                                ) : (\r\n+                                  <div className=\"text-center py-5\">\r\n+                                    <i className=\"bi bi-arrow-left text-primary\" style={{ fontSize: '2.5rem' }}></i>\r\n+                                    <h6 className=\"mt-3 text-muted\">Select a main category</h6>\r\n+                                    <p className=\"text-muted mb-0\">\r\n+                                      Click on a main category from the left panel to view and select its subcategories.\r\n+                                    </p>\r\n+                                  </div>\r\n+                                )}\r\n+                              </div>\r\n+                            </div>\r\n+                          </div>\r\n+                        </div>\r\n+                      ) : (\r\n+                        <div className=\"text-center py-5\">\r\n+                          <i className=\"bi bi-folder2-open text-muted\" style={{ fontSize: '3rem' }}></i>\r\n+                          <p className=\"mt-2 text-muted\">No categories available</p>\r\n+                          <small className=\"text-muted\">Create categories first to configure this section.</small>\r\n+                        </div>\r\n+                      )}\r\n+                    </div>\r\n+                  </div>\r\n+\r\n+                  {/* Quick Actions */}\r\n+                  {mainCategories.length > 0 && (\r\n+                    <div className=\"row\">\r\n+                      <div className=\"col-12\">\r\n+                        <div className=\"d-flex gap-2 flex-wrap\">\r\n+                          <button \r\n+                            type=\"button\" \r\n+                            className=\"btn btn-outline-primary btn-sm\"\r\n+                            onClick={() => {\r\n+                              const { mainCategoriesCount } = getCurrentCounts()\r\n+                              const availableSlots = MAX_MAIN_CATEGORIES - mainCategoriesCount\r\n+                              \r\n+                              if (availableSlots <= 0) {\r\n+                                setError(`Cannot select more categories. Maximum ${MAX_MAIN_CATEGORIES} main categories allowed.`)\r\n+                                return\r\n+                              }\r\n+                              \r\n+                              setCategoryConfig(prev => {\r\n+                                const newConfig = { ...prev, categories: { ...prev.categories } }\r\n+                                let added = 0\r\n+                                \r\n+                                mainCategories.forEach(cat => {\r\n+                                  if (added < availableSlots && !newConfig.categories[cat.id]?.selected) {\r\n+                                    newConfig.categories[cat.id] = {\r\n+                                      selected: true,\r\n+                                      order: Object.keys(newConfig.categories).filter(id => newConfig.categories[id]?.selected).length,\r\n+                                      subcategories: newConfig.categories[cat.id]?.subcategories || {}\r\n+                                    }\r\n+                                    added++\r\n+                                  }\r\n+                                })\r\n+                                \r\n+                                if (added < mainCategories.length - mainCategoriesCount) {\r\n+                                  setError(`Only selected ${added} more categories due to limit.`)\r\n+                                }\r\n+                                \r\n+                                return newConfig\r\n+                              })\r\n+                            }}\r\n+                          >\r\n+                            <i className=\"bi bi-check-all me-1\"></i>\r\n+                            Select All Main Categories\r\n+                          </button>\r\n+                          \r\n+                          <button \r\n+                            type=\"button\" \r\n+                            className=\"btn btn-outline-success btn-sm\"\r\n+                            onClick={() => {\r\n+                              if (!selectedMainCategory) {\r\n+                                setError('Please select a main category first to add subcategories.')\r\n+                                return\r\n+                              }\r\n+                              \r\n+                              const subcategoriesForMain = getSubcategoriesForCategory(selectedMainCategory)\r\n+                              const currentSubCount = subcategoriesForMain.filter(sub => \r\n+                                categoryConfig.categories[selectedMainCategory]?.subcategories?.[sub.id]?.selected\r\n+                              ).length\r\n+                              const availableSlots = MAX_SUBCATEGORIES_PER_CATEGORY - currentSubCount\r\n+                              \r\n+                              if (availableSlots <= 0) {\r\n+                                setError(`Cannot select more subcategories. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} subcategories per main category allowed.`)\r\n+                                return\r\n+                              }\r\n+                              \r\n+                              setCategoryConfig(prev => {\r\n+                                const newConfig = { ...prev, categories: { ...prev.categories } }\r\n+                                \r\n+                                // Ensure main category is selected and has structure\r\n+                                if (!newConfig.categories[selectedMainCategory]) {\r\n+                                  newConfig.categories[selectedMainCategory] = {\r\n+                                    selected: true,\r\n+                                    order: Object.keys(newConfig.categories).filter(id => newConfig.categories[id]?.selected).length,\r\n+                                    subcategories: {}\r\n+                                  }\r\n+                                }\r\n+                                \r\n+                                let added = 0\r\n+                                subcategoriesForMain.forEach(sub => {\r\n+                                  if (added < availableSlots && !newConfig.categories[selectedMainCategory].subcategories[sub.id]?.selected) {\r\n+                                    newConfig.categories[selectedMainCategory].subcategories[sub.id] = {\r\n+                                      selected: true,\r\n+                                      order: Object.keys(newConfig.categories[selectedMainCategory].subcategories).filter(id => \r\n+                                        newConfig.categories[selectedMainCategory].subcategories[id]?.selected\r\n+                                      ).length\r\n+                                    }\r\n+                                    added++\r\n+                                  }\r\n+                                })\r\n+                                \r\n+                                if (added < subcategoriesForMain.length - currentSubCount) {\r\n+                                  setError(`Only selected ${added} more subcategories due to limit.`)\r\n+                                }\r\n+                                \r\n+                                return newConfig\r\n+                              })\r\n+                            }}\r\n+                          >\r\n+                            <i className=\"bi bi-tags me-1\"></i>\r\n+                            Select All Subcategories\r\n+                          </button>\r\n+                          \r\n+                          <button \r\n+                            type=\"button\" \r\n+                            className=\"btn btn-outline-secondary btn-sm\"\r\n+                            onClick={() => {\r\n+                              setCategoryConfig(prev => ({\r\n+                                ...prev,\r\n+                                categories: {}\r\n+                              }))\r\n+                              setSelectedMainCategory(null)\r\n+                            }}\r\n+                          >\r\n+                            <i className=\"bi bi-x-circle me-1\"></i>\r\n+                            Clear All Selections\r\n+                          </button>\r\n+                        </div>\r\n+                      </div>\r\n+                    </div>\r\n+                  )}\r\n+                </>\r\n+              )}\r\n+            </div>\r\n+            <div className=\"modal-footer\">\r\n+              <button \r\n+                type=\"button\" \r\n+                className=\"btn btn-secondary\" \r\n+                onClick={() => setShowCategoryConfig(false)}\r\n+              >\r\n+                Cancel\r\n+              </button>\r\n+              <button \r\n+                type=\"button\" \r\n+                className=\"btn btn-primary\" \r\n+                onClick={saveCategoryConfig}\r\n+                disabled={loading}\r\n+              >\r\n+                {loading ? (\r\n+                  <>\r\n+                    <span className=\"spinner-border spinner-border-sm me-2\"></span>\r\n+                    Saving...\r\n+                  </>\r\n+                ) : (\r\n+                  'Save Configuration'\r\n+                )}\r\n+              </button>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    )\r\n+  }\r\n+\r\n+  // Move section up/down\r\n+  const handleMoveSection = async (page, sectionKey, direction) => {\r\n+    const sections = page === \"home\" ? homeSections : corporateSections\r\n+    const currentIndex = sections.findIndex(s => s.key === sectionKey)\r\n+    \r\n+    if (direction === 'up' && currentIndex > 0) {\r\n+      // Move up logic - would need to update order\r\n+      console.log(`Moving ${sectionKey} up`)\r\n+    } else if (direction === 'down' && currentIndex < sections.length - 1) {\r\n+      // Move down logic - would need to update order\r\n+      console.log(`Moving ${sectionKey} down`)\r\n+    }\r\n+    \r\n+    // TODO: Implement actual reordering\r\n+    setSuccess('Section order updated!')\r\n+    setTimeout(() => setSuccess(''), 2000)\r\n+  }\r\n+\r\n+  // Render section controls\r\n+  const renderSections = () => {\r\n+    const sections = getCurrentSections()\r\n+    const currentPage = PAGES.find(p => p.key === selectedPage)\r\n+    \r\n+    return (\r\n+      <div className=\"col-md-9\">\r\n+        <div className=\"card border-0 shadow-sm\">\r\n+          <div className=\"card-header bg-white border-bottom\">\r\n+            <div className=\"d-flex justify-content-between align-items-center\">\r\n+              <div>\r\n+                <h5 className=\"mb-1 fw-semibold\">{currentPage.label}</h5>\r\n+                <p className=\"text-muted mb-0 small\">{currentPage.description}</p>\r\n+              </div>\r\n+              <span className=\"badge bg-primary\">\r\n+                {sections.filter(s => visibleSections[selectedPage][s.key]).length} active\r\n+              </span>\r\n+            </div>\r\n+          </div>\r\n+          \r\n+          <div className=\"card-body p-0\">\r\n+            {sections.length === 0 ? (\r\n+              <div className=\"text-center py-5\">\r\n+                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\r\n+                <p className=\"mt-2 text-muted\">No sections configured for this page.</p>\r\n+              </div>\r\n+            ) : (\r\n+              <div className=\"table-responsive\">\r\n+                <table className=\"table table-hover mb-0\">\r\n+                  <thead className=\"table-light\">\r\n+                    <tr>\r\n+                      <th className=\"ps-4\">Section</th>\r\n+                      <th>Description</th>\r\n+                      <th>Order</th>\r\n+                      <th>Status</th>\r\n+                      <th className=\"text-center\">Actions</th>\r\n+                    </tr>\r\n+                  </thead>\r\n+                  <tbody>\r\n+                    {sections.map((section, index) => {\r\n+                      const isVisible = visibleSections[selectedPage][section.key]\r\n+                      const isCategorySection = section.key === 'giftCategories'\r\n+                      \r\n+                      return (\r\n+                        <tr key={section.key} className={isVisible ? '' : 'table-secondary'}>\r\n+                          <td className=\"ps-4\">\r\n+                            <div className=\"d-flex align-items-center\">\r\n+                              <div>\r\n+                                <div className=\"fw-semibold\">{section.label}</div>\r\n+                                {isCategorySection && categoryConfig.categoryIds.length > 0 && (\r\n+                                  <small className=\"text-muted\">\r\n+                                    {categoryConfig.categoryIds.length} categories selected\r\n+                                  </small>\r\n+                                )}\r\n+                              </div>\r\n+                            </div>\r\n+                          </td>\r\n+                          <td>\r\n+                            <span className=\"text-muted\">{section.description}</span>\r\n+                          </td>\r\n+                          <td>\r\n+                            <span className=\"badge bg-light text-dark\">{section.order}</span>\r\n+                          </td>\r\n+                          <td>\r\n+                            <div className=\"form-check form-switch\">\r\n+                              <input \r\n+                                className=\"form-check-input\" \r\n+                                type=\"checkbox\" \r\n+                                checked={isCategorySection ? categoryConfig.enabled : isVisible}\r\n+                                onChange={() => handleToggleSection(selectedPage, section.key)}\r\n+                                id={`toggle-${section.key}`}\r\n+                              />\r\n+                              <label className=\"form-check-label\" htmlFor={`toggle-${section.key}`}>\r\n+                                {isCategorySection ? (categoryConfig.enabled ? 'Enabled' : 'Disabled') : (isVisible ? 'Visible' : 'Hidden')}\r\n+                              </label>\r\n+                            </div>\r\n+                          </td>\r\n+                          <td className=\"text-center\">\r\n+                            <div className=\"btn-group btn-group-sm\">\r\n+                              {section.hasConfig && (\r\n+                                <button\r\n+                                  className=\"btn btn-outline-primary\"\r\n+                                  onClick={openCategoryConfig}\r\n+                                  title=\"Configure section\"\r\n+                                >\r\n+                                  <i className=\"bi bi-gear\"></i>\r\n+                                </button>\r\n+                              )}\r\n+                              <button\r\n+                                className=\"btn btn-outline-secondary\"\r\n+                                onClick={() => handleMoveSection(selectedPage, section.key, 'up')}\r\n+                                disabled={index === 0}\r\n+                                title=\"Move up\"\r\n+                              >\r\n+                                <i className=\"bi bi-arrow-up\"></i>\r\n+                              </button>\r\n+                              <button\r\n+                                className=\"btn btn-outline-secondary\"\r\n+                                onClick={() => handleMoveSection(selectedPage, section.key, 'down')}\r\n+                                disabled={index === sections.length - 1}\r\n+                                title=\"Move down\"\r\n+                              >\r\n+                                <i className=\"bi bi-arrow-down\"></i>\r\n+                              </button>\r\n+                            </div>\r\n+                          </td>\r\n+                        </tr>\r\n+                      )\r\n+                    })}\r\n+                  </tbody>\r\n+                </table>\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    )\r\n+  }\r\n+\r\n+  // Render page sidebar\r\n+  const renderPageSidebar = () => (\r\n+    <div className=\"col-md-3\">\r\n+      <div className=\"card border-0 shadow-sm\">\r\n+        <div className=\"card-header bg-white border-bottom\">\r\n+          <h6 className=\"mb-0 fw-semibold\">\r\n+            <i className=\"bi bi-file-earmark-text me-2\"></i>\r\n+            Pages\r\n+          </h6>\r\n+        </div>\r\n+        <div className=\"card-body p-0\">\r\n+          <div className=\"list-group list-group-flush\">\r\n+            {PAGES.map((page) => {\r\n+              const isActive = selectedPage === page.key\r\n+              const activeCount = visibleSections[page.key] ? \r\n+                Object.values(visibleSections[page.key]).filter(Boolean).length : 0\r\n+              \r\n+              return (\r\n+                <button\r\n+                  key={page.key}\r\n+                  className={`list-group-item list-group-item-action border-0 ${isActive ? 'active' : ''}`}\r\n+                  onClick={() => setSelectedPage(page.key)}\r\n+                  disabled={loading}\r\n+                >\r\n+                  <div className=\"d-flex justify-content-between align-items-center\">\r\n+                    <div>\r\n+                      <div className=\"fw-semibold\">{page.label}</div>\r\n+                      <small className={isActive ? 'text-white-50' : 'text-muted'}>\r\n+                        {page.description}\r\n+                      </small>\r\n+                    </div>\r\n+                    <span className={`badge ${isActive ? 'bg-white text-primary' : 'bg-primary'}`}>\r\n+                      {activeCount}\r\n+                    </span>\r\n+                  </div>\r\n+                </button>\r\n+              )\r\n+            })}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  )\r\n+\r\n+  return (\r\n+    <div className=\"container-fluid\">\r\n+      {/* Page Header */}\r\n+      <div className=\"row mb-4\">\r\n+        <div className=\"col-12\">\r\n+          <div className=\"d-flex justify-content-between align-items-center\">\r\n+            <div>\r\n+              <h2 className=\"fw-bold text-dark mb-1\">Pages Management</h2>\r\n+              <p className=\"text-muted mb-0\">Control which sections appear on each page</p>\r\n+            </div>\r\n+            <div className=\"d-flex gap-2\">\r\n+              <button\r\n+                className=\"btn btn-outline-primary\"\r\n+                onClick={() => loadPageConfig(selectedPage)}\r\n+                disabled={loading}\r\n+              >\r\n+                <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n+                Refresh\r\n+              </button>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Status Messages */}\r\n+      {error && (\r\n+        <div className=\"row mb-3\">\r\n+          <div className=\"col-12\">\r\n+            <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n+              <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\r\n+              <div>{error}</div>\r\n+              <button\r\n+                type=\"button\"\r\n+                className=\"btn-close ms-auto\"\r\n+                onClick={() => setError('')}\r\n+              ></button>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {success && (\r\n+        <div className=\"row mb-3\">\r\n+          <div className=\"col-12\">\r\n+            <div className=\"alert alert-success d-flex align-items-center\" role=\"alert\">\r\n+              <i className=\"bi bi-check-circle-fill me-2\"></i>\r\n+              <div>{success}</div>\r\n+              <button\r\n+                type=\"button\"\r\n+                className=\"btn-close ms-auto\"\r\n+                onClick={() => setSuccess('')}\r\n+              ></button>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Main Content */}\r\n+      <div className=\"row\">\r\n+        {renderPageSidebar()}\r\n+        {renderSections()}\r\n+      </div>\r\n+\r\n+      {/* Category Configuration Modal */}\r\n+      {renderCategoryConfigModal()}\r\n+\r\n+      {/* Loading Overlay */}\r\n+      {loading && (\r\n+        <div className=\"position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center\" \r\n+             style={{ backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 9999 }}>\r\n+          <div className=\"spinner-border text-primary\" role=\"status\">\r\n+            <span className=\"visually-hidden\">Loading...</span>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  )\r\n+}\r\n"
                },
                {
                    "date": 1753199527112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n     try {\r\n       setLoading(true)\r\n       localStorage.setItem('authToken', ADMIN_TOKEN)\r\n       \r\n-      const response = await get(`/api/pages/${pageKey}`)\r\n+      const response = await get(`/pages/${pageKey}`)\r\n       console.log('Page config response:', response)\r\n       \r\n       // Handle the double-wrapped response from apiService\r\n       const actualData = response.data // This contains the backend response\r\n@@ -1761,1768 +1761,4 @@\n       )}\r\n     </div>\r\n   )\r\n }\r\n-'use client'\r\n-import React, { useState, useEffect } from 'react'\r\n-import { get, post, put } from '@/util/apiService'\r\n-import { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\n-\r\n-const PAGES = [\r\n-  { \r\n-    key: \"home\", \r\n-    label: \"Home Page\",\r\n-    description: \"Manage sections displayed on the homepage\"\r\n-  },\r\n-  { \r\n-    key: \"corporate\", \r\n-    label: \"Corporate Page\",\r\n-    description: \"Manage sections for corporate customers\"\r\n-  }\r\n-]\r\n-\r\n-export default function PagesManagement({ onNavigate }) {\r\n-  const [selectedPage, setSelectedPage] = useState(\"home\")\r\n-  const [loading, setLoading] = useState(false)\r\n-  const [error, setError] = useState('')\r\n-  const [success, setSuccess] = useState('')\r\n-  const [showCategoryConfig, setShowCategoryConfig] = useState(false)\r\n-  const [availableCategories, setAvailableCategories] = useState([])\r\n-  const [subcategories, setSubcategories] = useState([])\r\n-  const [pageConfig, setPageConfig] = useState(null)\r\n-\r\n-  // Category section configuration state - NEW HIERARCHICAL STRUCTURE\r\n-  const [categoryConfig, setCategoryConfig] = useState({\r\n-    enabled: true,\r\n-    maxCategories: 10, // Keep for UI display\r\n-    layout: 'grid',\r\n-    showSubcategories: true,\r\n-    // New hierarchical structure\r\n-    categories: [\r\n-      // Structure: { categoryId, enabled, order, type: 'main', subcategories: [...] }\r\n-    ],\r\n-    // Keep for backward compatibility and quick lookups\r\n-    categoryIds: []\r\n-  })\r\n-\r\n-  // Business rule constants\r\n-  const MAX_MAIN_CATEGORIES = 10\r\n-  const MIN_MAIN_CATEGORIES = 1\r\n-  const MAX_SUBCATEGORIES_PER_CATEGORY = 10\r\n-\r\n-  // UI state for category selection\r\n-  const [selectedMainCategory, setSelectedMainCategory] = useState(null)\r\n-\r\n-  // Define sections for each page\r\n-  const homeSections = [\r\n-    { \r\n-      key: \"giftCategories\", \r\n-      label: \"Gift Categories\", \r\n-      description: \"Display category grid with gifts\",\r\n-      order: 1,\r\n-      hasConfig: true\r\n-    },\r\n-    { \r\n-      key: \"slider\", \r\n-      label: \"Main Slider\", \r\n-      description: \"Hero banner with promotional slides\",\r\n-      order: 2\r\n-    },\r\n-    { \r\n-      key: \"services\", \r\n-      label: \"Services Section\", \r\n-      description: \"Highlight key services and benefits\",\r\n-      order: 3\r\n-    },\r\n-    { \r\n-      key: \"products\", \r\n-      label: \"Featured Products\", \r\n-      description: \"Showcase featured/trending products\",\r\n-      order: 4\r\n-    },\r\n-    { \r\n-      key: \"banner\", \r\n-      label: \"Promotional Banner\", \r\n-      description: \"Secondary promotional content\",\r\n-      order: 5\r\n-    },\r\n-    { \r\n-      key: \"dealProduct\", \r\n-      label: \"Deal Products\", \r\n-      description: \"Special offers and discounted items\",\r\n-      order: 6\r\n-    }\r\n-  ]\r\n-\r\n-  const corporateSections = [\r\n-    { \r\n-      key: \"corporateBanner\", \r\n-      label: \"Corporate Banner\", \r\n-      description: \"Hero section for corporate clients\",\r\n-      order: 1\r\n-    },\r\n-    { \r\n-      key: \"corporateServices\", \r\n-      label: \"Corporate Services\", \r\n-      description: \"B2B services and solutions\",\r\n-      order: 2\r\n-    },\r\n-    { \r\n-      key: \"corporateTestimonials\", \r\n-      label: \"Client Testimonials\", \r\n-      description: \"Corporate client reviews and case studies\",\r\n-      order: 3\r\n-    },\r\n-    { \r\n-      key: \"corporatePartners\", \r\n-      label: \"Partner Logos\", \r\n-      description: \"Display trusted corporate partners\",\r\n-      order: 4\r\n-    }\r\n-  ]\r\n-\r\n-  // Section visibility state\r\n-  const [visibleSections, setVisibleSections] = useState({\r\n-    home: {\r\n-      giftCategories: true,\r\n-      slider: true,\r\n-      services: true,\r\n-      products: true,\r\n-      banner: true,\r\n-      dealProduct: true,\r\n-    },\r\n-    corporate: {\r\n-      corporateBanner: true,\r\n-      corporateServices: true,\r\n-      corporateTestimonials: false,\r\n-      corporatePartners: false,\r\n-    },\r\n-  })\r\n-\r\n-  // Hardcoded admin token for testing\r\n-  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\r\n-\r\n-  // ========== HIERARCHICAL DATA MANAGEMENT HELPERS ==========\r\n-  \r\n-  // Get current counts for validation\r\n-  const getCurrentCounts = () => {\r\n-    // Handle both old array structure and new object structure\r\n-    let mainCategoriesCount = 0\r\n-    let totalSubcategoriesCount = 0\r\n-    let selectedCategorySubCount = 0\r\n-    const subcategoryCounts = {}\r\n-    \r\n-    if (Array.isArray(categoryConfig.categories)) {\r\n-      // Old structure: array of category objects\r\n-      mainCategoriesCount = categoryConfig.categories.filter(cat => cat.enabled).length\r\n-      \r\n-      categoryConfig.categories.forEach(category => {\r\n-        const subCount = category.subcategories ? category.subcategories.filter(sub => sub.enabled).length : 0\r\n-        subcategoryCounts[category.categoryId] = subCount\r\n-        totalSubcategoriesCount += subCount\r\n-        \r\n-        // Get subcategory count for currently selected main category\r\n-        if (selectedMainCategory && category.categoryId === selectedMainCategory) {\r\n-          selectedCategorySubCount = subCount\r\n-        }\r\n-      })\r\n-    } else if (typeof categoryConfig.categories === 'object' && categoryConfig.categories !== null) {\r\n-      // New structure: object with category IDs as keys\r\n-      mainCategoriesCount = Object.keys(categoryConfig.categories).filter(\r\n-        categoryId => categoryConfig.categories[categoryId]?.selected\r\n-      ).length\r\n-      \r\n-      Object.keys(categoryConfig.categories).forEach(categoryId => {\r\n-        const categoryData = categoryConfig.categories[categoryId]\r\n-        let subCount = 0\r\n-        \r\n-        if (categoryData && categoryData.subcategories) {\r\n-          subCount = Object.keys(categoryData.subcategories).filter(\r\n-            subId => categoryData.subcategories[subId]?.selected\r\n-          ).length\r\n-        }\r\n-        \r\n-        subcategoryCounts[categoryId] = subCount\r\n-        totalSubcategoriesCount += subCount\r\n-        \r\n-        // Get subcategory count for currently selected main category\r\n-        if (selectedMainCategory && categoryId === selectedMainCategory) {\r\n-          selectedCategorySubCount = subCount\r\n-        }\r\n-      })\r\n-    } else {\r\n-      // Fallback: use categoryIds for backward compatibility\r\n-      if (availableCategories.length > 0) {\r\n-        mainCategoriesCount = categoryConfig.categoryIds ? \r\n-          categoryConfig.categoryIds.filter(id => \r\n-            availableCategories.some(cat => cat.id === id && !cat.parent)\r\n-          ).length : 0\r\n-        \r\n-        totalSubcategoriesCount = categoryConfig.categoryIds ? \r\n-          categoryConfig.categoryIds.filter(id => \r\n-            subcategories.some(sub => sub.id === id)\r\n-          ).length : 0\r\n-          \r\n-        selectedCategorySubCount = selectedMainCategory && categoryConfig.categoryIds ? \r\n-          categoryConfig.categoryIds.filter(id => \r\n-            subcategories.some(sub => sub.id === id && \r\n-              (sub.parent?._id === selectedMainCategory || sub.parent === selectedMainCategory)\r\n-            )\r\n-          ).length : 0\r\n-      }\r\n-    }\r\n-    \r\n-    return { \r\n-      mainCategoriesCount, \r\n-      subcategoryCounts, \r\n-      totalSubcategoriesCount,\r\n-      selectedCategorySubCount \r\n-    }\r\n-  }\r\n-\r\n-  // Check if we can select more main categories\r\n-  const canSelectMoreMainCategories = () => {\r\n-    const { mainCategoriesCount } = getCurrentCounts()\r\n-    return mainCategoriesCount < MAX_MAIN_CATEGORIES\r\n-  }\r\n-\r\n-  // Check if we can select more subcategories for a specific category\r\n-  const canSelectMoreSubcategories = (categoryId) => {\r\n-    const { subcategoryCounts } = getCurrentCounts()\r\n-    const currentCount = subcategoryCounts[categoryId] || 0\r\n-    return currentCount < MAX_SUBCATEGORIES_PER_CATEGORY\r\n-  }\r\n-\r\n-  // Check if a main category is selected\r\n-  const isMainCategorySelected = (categoryId) => {\r\n-    if (Array.isArray(categoryConfig.categories)) {\r\n-      // Old structure\r\n-      const category = categoryConfig.categories.find(cat => cat.categoryId === categoryId)\r\n-      return category ? category.enabled : false\r\n-    } else if (typeof categoryConfig.categories === 'object') {\r\n-      // New structure\r\n-      return categoryConfig.categories[categoryId]?.selected || false\r\n-    } else {\r\n-      // Fallback\r\n-      return categoryConfig.categoryIds ? categoryConfig.categoryIds.includes(categoryId) : false\r\n-    }\r\n-  }\r\n-\r\n-  // Check if a subcategory is selected\r\n-  const isSubcategorySelected = (subcategoryId, parentCategoryId = null) => {\r\n-    if (Array.isArray(categoryConfig.categories)) {\r\n-      // Old structure\r\n-      return categoryConfig.categories.some(category => \r\n-        category.subcategories && category.subcategories.some(sub => sub.categoryId === subcategoryId && sub.enabled)\r\n-      )\r\n-    } else if (typeof categoryConfig.categories === 'object' && parentCategoryId) {\r\n-      // New structure\r\n-      return categoryConfig.categories[parentCategoryId]?.subcategories?.[subcategoryId]?.selected || false\r\n-    } else {\r\n-      // Fallback\r\n-      return categoryConfig.categoryIds ? categoryConfig.categoryIds.includes(subcategoryId) : false\r\n-    }\r\n-  }\r\n-\r\n-  // Find which main category a subcategory belongs to\r\n-  const findParentCategory = (subcategoryId) => {\r\n-    const subcategory = subcategories.find(sub => sub.id === subcategoryId)\r\n-    return subcategory?.parent?._id || subcategory?.parent\r\n-  }\r\n-\r\n-  // Update hierarchical category selection\r\n-  // Function removed - using simpler handleCategoryToggle approach\r\n-\r\n-  // Transform hierarchical data for backend save\r\n-  const transformForSave = () => {\r\n-    const saveData = {\r\n-      enabled: categoryConfig.enabled,\r\n-      maxCategories: categoryConfig.maxCategories,\r\n-      layout: categoryConfig.layout,\r\n-      showSubcategories: categoryConfig.showSubcategories,\r\n-      categories: []\r\n-    }\r\n-    \r\n-    // Flatten hierarchical structure for backend\r\n-    categoryConfig.categories.forEach(category => {\r\n-      if (category.enabled) {\r\n-        saveData.categories.push({\r\n-          categoryId: category.categoryId,\r\n-          enabled: true,\r\n-          order: category.order,\r\n-          type: 'main'\r\n-        })\r\n-      }\r\n-      \r\n-      category.subcategories.forEach(subcategory => {\r\n-        if (subcategory.enabled) {\r\n-          saveData.categories.push({\r\n-            categoryId: subcategory.categoryId,\r\n-            enabled: true,\r\n-            order: subcategory.order,\r\n-            type: 'subcategory',\r\n-            parentId: category.categoryId\r\n-          })\r\n-        }\r\n-      })\r\n-    })\r\n-    \r\n-    // Sort by order\r\n-    saveData.categories.sort((a, b) => a.order - b.order)\r\n-    \r\n-    console.log('💾 Data prepared for save:', saveData)\r\n-    return saveData\r\n-  }\r\n-\r\n-  // Load page configuration\r\n-  const loadPageConfig = async (pageKey) => {\r\n-    try {\r\n-      setLoading(true)\r\n-      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n-      \r\n-      const response = await get(`/api/pages/${pageKey}`)\r\n-      console.log('Page config response:', response)\r\n-      \r\n-      // Handle the double-wrapped response from apiService\r\n-      const actualData = response.data // This contains the backend response\r\n-      \r\n-      if (actualData && actualData.success) {\r\n-        setPageConfig(actualData.data)\r\n-        \r\n-        // Extract category section config\r\n-        const categorySection = actualData.data.sections.find(s => s.sectionType === 'categorySection')\r\n-        if (categorySection && categorySection.config) {\r\n-          // Convert the saved flat structure back to hierarchical state\r\n-          const hierarchicalConfig = {\r\n-            enabled: categorySection.enabled || false,\r\n-            maxCategories: categorySection.config.maxCategories || 10,\r\n-            layout: categorySection.config.layout || 'grid',\r\n-            showSubcategories: categorySection.config.showSubcategories || true,\r\n-            categories: {}\r\n-          }\r\n-          \r\n-          // Rebuild hierarchical structure from saved config\r\n-          if (categorySection.config.categories && Array.isArray(categorySection.config.categories)) {\r\n-            categorySection.config.categories.forEach(cat => {\r\n-              if (cat.categoryId) {\r\n-                hierarchicalConfig.categories[cat.categoryId] = {\r\n-                  selected: cat.enabled || false,\r\n-                  order: cat.order || 0,\r\n-                  subcategories: {}\r\n-                }\r\n-                \r\n-                // Add subcategories if they exist\r\n-                if (cat.subcategories && Array.isArray(cat.subcategories)) {\r\n-                  cat.subcategories.forEach(sub => {\r\n-                    if (sub.subcategoryId) {\r\n-                      hierarchicalConfig.categories[cat.categoryId].subcategories[sub.subcategoryId] = {\r\n-                        selected: sub.enabled || false,\r\n-                        order: sub.order || 0\r\n-                      }\r\n-                    }\r\n-                  })\r\n-                }\r\n-              }\r\n-            })\r\n-          }\r\n-          \r\n-          setCategoryConfig(hierarchicalConfig)\r\n-          console.log('📂 Loaded hierarchical config:', hierarchicalConfig)\r\n-          \r\n-          // Update visibility state\r\n-          setVisibleSections(prev => ({\r\n-            ...prev,\r\n-            [pageKey]: {\r\n-              ...prev[pageKey],\r\n-              giftCategories: categorySection.enabled\r\n-            }\r\n-          }))\r\n-        } else {\r\n-          // Initialize with default hierarchical structure if no config exists\r\n-          setCategoryConfig({\r\n-            enabled: false,\r\n-            maxCategories: 10,\r\n-            layout: 'grid',\r\n-            showSubcategories: true,\r\n-            categories: {}\r\n-          })\r\n-        }\r\n-      }\r\n-      \r\n-      setError('')\r\n-    } catch (err) {\r\n-      console.error('Load page config error:', err)\r\n-      setError('Failed to load page configuration: ' + err.message)\r\n-    } finally {\r\n-      setLoading(false)\r\n-    }\r\n-  }\r\n-\r\n-  // Load available categories (same approach as CategoriesPage.js)\r\n-  const loadCategories = async () => {\r\n-    try {\r\n-      console.log('🔄 === LOADING CATEGORIES DEBUG ===')\r\n-      console.log('1. Setting auth token...')\r\n-      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n-      \r\n-      console.log('2. Making API call to:', CATEGORY.GET_ALL)\r\n-      const response = await get(CATEGORY.GET_ALL)\r\n-      \r\n-      console.log('3. Raw API response received:')\r\n-      console.log('   - Response object:', response)\r\n-      console.log('   - Response type:', typeof response)\r\n-      console.log('   - Response keys:', Object.keys(response || {}))\r\n-      console.log('   - Response.success:', response?.success)\r\n-      console.log('   - Response.data:', response?.data)\r\n-      console.log('   - Response.data type:', typeof response?.data)\r\n-      console.log('   - Response.data is array:', Array.isArray(response?.data))\r\n-      \r\n-      if (!response.success) {\r\n-        console.error('4. ❌ API response failed:', response.error)\r\n-        throw new Error(response.error || 'Failed to fetch categories')\r\n-      }\r\n-      \r\n-      console.log('4. ✅ API response successful')\r\n-      console.log('5. Processing response.data...')\r\n-      console.log('   - Raw response.data:', JSON.stringify(response.data, null, 2))\r\n-      \r\n-      // Ensure response.data is an array\r\n-      let categoriesData = []\r\n-      if (Array.isArray(response.data)) {\r\n-        console.log('   - Response.data is direct array with', response.data.length, 'items')\r\n-        categoriesData = response.data\r\n-      } else if (response.data && typeof response.data === 'object') {\r\n-        console.log('   - Response.data is object, checking for nested arrays...')\r\n-        if (Array.isArray(response.data.categories)) {\r\n-          console.log('   - Found response.data.categories array with', response.data.categories.length, 'items')\r\n-          categoriesData = response.data.categories\r\n-        } else if (Array.isArray(response.data.data)) {\r\n-          console.log('   - Found response.data.data array with', response.data.data.length, 'items')\r\n-          categoriesData = response.data.data\r\n-        } else {\r\n-          console.log('   - No recognizable array found in response.data')\r\n-          categoriesData = []\r\n-        }\r\n-      }\r\n-      \r\n-      console.log('6. Categories data to process:')\r\n-      console.log('   - Array length:', categoriesData.length)\r\n-      console.log('   - Sample items (first 3):')\r\n-      categoriesData.slice(0, 3).forEach((cat, index) => {\r\n-        console.log(`     ${index + 1}.`, cat)\r\n-      })\r\n-      \r\n-      // Transform categories for display in the admin panel\r\n-      console.log('7. Transforming categories...')\r\n-      const transformedCategories = categoriesData.map((cat, index) => {\r\n-        console.log(`   - Transforming category ${index + 1}:`, {\r\n-          originalId: cat._id,\r\n-          originalName: cat.name,\r\n-          hasParent: !!cat.parent,\r\n-          parentInfo: cat.parent\r\n-        })\r\n-        \r\n-        return {\r\n-          id: cat.id || cat._id,\r\n-          value: cat.id || cat._id,\r\n-          label: cat.name,\r\n-          name: cat.name,\r\n-          image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n-          description: cat.description || '',\r\n-          parent: cat.parent\r\n-        }\r\n-      })\r\n-      \r\n-      console.log('8. Final transformed categories:')\r\n-      console.log('   - Total transformed:', transformedCategories.length)\r\n-      console.log('   - Main categories:', transformedCategories.filter(cat => !cat.parent).length)\r\n-      console.log('   - Sub categories:', transformedCategories.filter(cat => cat.parent).length)\r\n-      console.log('   - Full transformed data:', transformedCategories)\r\n-      \r\n-      console.log('9. Setting availableCategories state...')\r\n-      setAvailableCategories(transformedCategories)\r\n-      setError('')\r\n-      \r\n-      console.log('10. ✅ Categories loaded successfully!')\r\n-      console.log('🔚 === END LOADING CATEGORIES DEBUG ===')\r\n-      \r\n-    } catch (err) {\r\n-      console.error('❌ === LOAD CATEGORIES ERROR ===')\r\n-      console.error('Error details:', {\r\n-        message: err.message,\r\n-        stack: err.stack,\r\n-        name: err.name\r\n-      })\r\n-      console.error('Raw error object:', err)\r\n-      setError('Failed to load categories: ' + err.message)\r\n-      setAvailableCategories([])\r\n-    }\r\n-  }\r\n-\r\n-  // Load subcategories from separate subcategories collection\r\n-  const loadSubcategories = async () => {\r\n-    try {\r\n-      console.log('🔄 === LOADING SUBCATEGORIES DEBUG ===')\r\n-      console.log('1. Setting auth token...')\r\n-      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n-      \r\n-      console.log('2. Making API call to:', SUBCATEGORY.GET_ALL)\r\n-      const response = await get(SUBCATEGORY.GET_ALL)\r\n-      \r\n-      console.log('3. Raw subcategories response:')\r\n-      console.log('   - Response object:', response)\r\n-      console.log('   - Response.success:', response?.success)\r\n-      console.log('   - Response.data:', response?.data)\r\n-      console.log('   - Response.data is array:', Array.isArray(response?.data))\r\n-      \r\n-      if (!response.success) {\r\n-        console.error('4. ❌ Subcategories API response failed:', response.error)\r\n-        throw new Error(response.error || 'Failed to fetch subcategories')\r\n-      }\r\n-      \r\n-      console.log('4. ✅ Subcategories API response successful')\r\n-      console.log('5. Processing subcategories data...')\r\n-      \r\n-      let subcategoriesData = []\r\n-      if (Array.isArray(response.data)) {\r\n-        subcategoriesData = response.data\r\n-      } else if (response.data && Array.isArray(response.data.data)) {\r\n-        subcategoriesData = response.data.data\r\n-      }\r\n-      \r\n-      console.log('6. Subcategories data to process:')\r\n-      console.log('   - Array length:', subcategoriesData.length)\r\n-      console.log('   - Sample items (first 3):')\r\n-      subcategoriesData.slice(0, 3).forEach((subcat, index) => {\r\n-        console.log(`     ${index + 1}.`, {\r\n-          id: subcat._id,\r\n-          name: subcat.name,\r\n-          parent: subcat.parent,\r\n-          status: subcat.status\r\n-        })\r\n-      })\r\n-      \r\n-      // Transform subcategories for display\r\n-      const transformedSubcategories = subcategoriesData.map((subcat, index) => {\r\n-        console.log(`   - Transforming subcategory ${index + 1}:`, {\r\n-          originalId: subcat._id,\r\n-          originalName: subcat.name,\r\n-          parentId: subcat.parent?._id || subcat.parent,\r\n-          parentName: subcat.parent?.name\r\n-        })\r\n-        \r\n-        return {\r\n-          id: subcat.id || subcat._id,\r\n-          value: subcat.id || subcat._id,\r\n-          label: subcat.name,\r\n-          name: subcat.name,\r\n-          image: subcat.image?.url || '/assets/img/product/category/default-subcategory.svg',\r\n-          description: subcat.description || '',\r\n-          parent: subcat.parent,\r\n-          status: subcat.status\r\n-        }\r\n-      })\r\n-      \r\n-      console.log('7. Final transformed subcategories:')\r\n-      console.log('   - Total transformed:', transformedSubcategories.length)\r\n-      console.log('   - Full transformed data:', transformedSubcategories)\r\n-      \r\n-      console.log('8. Setting subcategories state...')\r\n-      setSubcategories(transformedSubcategories)\r\n-      \r\n-      console.log('9. ✅ Subcategories loaded successfully!')\r\n-      console.log('🔚 === END LOADING SUBCATEGORIES DEBUG ===')\r\n-      \r\n-    } catch (err) {\r\n-      console.error('❌ === LOAD SUBCATEGORIES ERROR ===')\r\n-      console.error('Error details:', {\r\n-        message: err.message,\r\n-        stack: err.stack,\r\n-        name: err.name\r\n-      })\r\n-      setSubcategories([])\r\n-    }\r\n-  }\r\n-\r\n-  // Save category section configuration\r\n-  const saveCategoryConfig = async () => {\r\n-    console.log('🚀 === SAVE CATEGORY CONFIG START ===')\r\n-    console.log('1. Save function triggered')\r\n-    \r\n-    try {\r\n-      console.log('2. Setting loading state to true')\r\n-      setLoading(true)\r\n-      \r\n-      console.log('3. Setting auth token in localStorage')\r\n-      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n-      console.log('   - Auth token set:', ADMIN_TOKEN.substring(0, 20) + '...')\r\n-      \r\n-      console.log('4. Getting current counts for validation')\r\n-      const { mainCategoriesCount } = getCurrentCounts()\r\n-      console.log('   - Main categories count:', mainCategoriesCount)\r\n-      console.log('   - MIN_MAIN_CATEGORIES:', MIN_MAIN_CATEGORIES)\r\n-      console.log('   - MAX_MAIN_CATEGORIES:', MAX_MAIN_CATEGORIES)\r\n-      \r\n-      if (mainCategoriesCount < MIN_MAIN_CATEGORIES) {\r\n-        console.log('❌ Validation failed: Too few main categories')\r\n-        setError(`Please select at least ${MIN_MAIN_CATEGORIES} main category before saving.`)\r\n-        return\r\n-      }\r\n-      \r\n-      if (mainCategoriesCount > MAX_MAIN_CATEGORIES) {\r\n-        console.log('❌ Validation failed: Too many main categories')\r\n-        setError(`Too many main categories selected. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n-        return\r\n-      }\r\n-      \r\n-      console.log('✅ Validation passed')\r\n-      \r\n-      console.log('5. Current categoryConfig state before transform:')\r\n-      console.log('   - categoryConfig.enabled:', categoryConfig.enabled)\r\n-      console.log('   - categoryConfig.maxCategories:', categoryConfig.maxCategories)\r\n-      console.log('   - categoryConfig.layout:', categoryConfig.layout)\r\n-      console.log('   - categoryConfig.showSubcategories:', categoryConfig.showSubcategories)\r\n-      console.log('   - categoryConfig.categories:', categoryConfig.categories)\r\n-      console.log('   - categoryConfig.categoryIds:', categoryConfig.categoryIds)\r\n-      \r\n-      // Transform hierarchical data for save\r\n-      console.log('6. Transforming data for save...')\r\n-      const configData = transformForSave()\r\n-      console.log('7. Transformed config data:')\r\n-      console.log('   - Full configData object:', JSON.stringify(configData, null, 2))\r\n-      console.log('   - configData.enabled:', configData.enabled)\r\n-      console.log('   - configData.categories length:', configData.categories?.length || 0)\r\n-      \r\n-      console.log('8. Preparing API request')\r\n-      const apiEndpoint = '/api/pages/home/sections/category'\r\n-      console.log('   - API endpoint:', apiEndpoint)\r\n-      console.log('   - Request method: PUT')\r\n-      console.log('   - Request data:', configData)\r\n-      console.log('   - Request headers will include auth token')\r\n-      \r\n-      console.log('9. Making API request...')\r\n-      const response = await put(apiEndpoint, configData)\r\n-      console.log('10. API response received:')\r\n-      console.log('    - Raw response:', response)\r\n-      console.log('    - Response type:', typeof response)\r\n-      console.log('    - Response keys:', Object.keys(response || {}))\r\n-      console.log('    - Response.data:', response?.data)\r\n-      console.log('    - Response.status:', response?.status)\r\n-      console.log('    - Response.success:', response?.success)\r\n-      \r\n-      // Handle the double-wrapped response from apiService\r\n-      console.log('11. Processing response data...')\r\n-      const actualData = response.data // This contains the backend response\r\n-      console.log('    - actualData:', actualData)\r\n-      console.log('    - actualData type:', typeof actualData)\r\n-      console.log('    - actualData.success:', actualData?.success)\r\n-      console.log('    - actualData.message:', actualData?.message)\r\n-      \r\n-      if (actualData && actualData.success) {\r\n-        console.log('✅ Save successful!')\r\n-        setSuccess('Category section configuration saved successfully!')\r\n-        setTimeout(() => setSuccess(''), 3000)\r\n-        setShowCategoryConfig(false)\r\n-        \r\n-        // Trigger refresh notification (optional)\r\n-        try {\r\n-          console.log('12. Triggering homepage refresh...')\r\n-          await get('/pages/home/refresh/categorySection')\r\n-          console.log('    - Homepage refresh successful')\r\n-        } catch (refreshError) {\r\n-          console.log('⚠️ Refresh notification failed, but save was successful:', refreshError)\r\n-        }\r\n-        \r\n-        console.log('13. Reloading page config...')\r\n-        await loadPageConfig(selectedPage) // Reload to get updated config\r\n-        console.log('14. Page config reloaded')\r\n-      } else {\r\n-        console.log('❌ Save failed - API returned unsuccessful response')\r\n-        console.log('    - actualData:', actualData)\r\n-        const errorMessage = actualData?.message || 'Unknown error'\r\n-        console.log('    - Error message:', errorMessage)\r\n-        setError('Failed to save configuration: ' + errorMessage)\r\n-      }\r\n-      \r\n-    } catch (err) {\r\n-      console.error('❌ === SAVE CATEGORY CONFIG ERROR ===')\r\n-      console.error('Error caught in try-catch:')\r\n-      console.error('   - Error object:', err)\r\n-      console.error('   - Error message:', err.message)\r\n-      console.error('   - Error name:', err.name)\r\n-      console.error('   - Error stack:', err.stack)\r\n-      \r\n-      if (err.response) {\r\n-        console.error('   - HTTP Response Error Details:')\r\n-        console.error('     - Status:', err.response.status)\r\n-        console.error('     - Status text:', err.response.statusText)\r\n-        console.error('     - Response data:', err.response.data)\r\n-        console.error('     - Response headers:', err.response.headers)\r\n-      }\r\n-      \r\n-      if (err.request) {\r\n-        console.error('   - Request Error Details:')\r\n-        console.error('     - Request object:', err.request)\r\n-      }\r\n-      \r\n-      setError('Failed to save category configuration: ' + err.message)\r\n-    } finally {\r\n-      console.log('15. Setting loading state to false')\r\n-      setLoading(false)\r\n-      console.log('🔚 === SAVE CATEGORY CONFIG END ===')\r\n-    }\r\n-  }\r\n-\r\n-  // Toggle section visibility\r\n-  const handleToggleSection = async (page, section) => {\r\n-    if (section === 'giftCategories') {\r\n-      // For category section, update the actual config\r\n-      setCategoryConfig(prev => ({ ...prev, enabled: !prev.enabled }))\r\n-      return\r\n-    }\r\n-    \r\n-    const newVisibility = {\r\n-      ...visibleSections,\r\n-      [page]: {\r\n-        ...visibleSections[page],\r\n-        [section]: !visibleSections[page][section],\r\n-      }\r\n-    }\r\n-    \r\n-    setVisibleSections(newVisibility)\r\n-  }\r\n-\r\n-  // Open category configuration modal\r\n-  const openCategoryConfig = () => {\r\n-    setShowCategoryConfig(true)\r\n-    // Reset to first main category when opening modal\r\n-    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n-    if (mainCategories.length > 0) {\r\n-      setSelectedMainCategory(mainCategories[0].id)\r\n-    }\r\n-  }\r\n-\r\n-  // Handle category selection with validation - SIMPLIFIED for current structure\r\n-  const handleCategoryToggle = (categoryId, parentCategoryId = null) => {\r\n-    const isMainCategory = !parentCategoryId && availableCategories.some(cat => cat.id === categoryId && !cat.parent)\r\n-    \r\n-    console.log('🎯 Category toggle triggered:', { categoryId, parentCategoryId, isMainCategory })\r\n-    \r\n-    if (isMainCategory) {\r\n-      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n-      const currentMainCount = categoryConfig.categoryIds.filter(id => \r\n-        availableCategories.some(cat => cat.id === id && !cat.parent)\r\n-      ).length\r\n-      \r\n-      console.log('📊 Main category status:', { isCurrentlySelected, currentCount: currentMainCount })\r\n-      \r\n-      // Validation for main categories\r\n-      if (!isCurrentlySelected) {\r\n-        // Trying to select\r\n-        if (currentMainCount >= MAX_MAIN_CATEGORIES) {\r\n-          setError(`Cannot select more main categories. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n-          return\r\n-        }\r\n-      } else {\r\n-        // Trying to deselect\r\n-        if (currentMainCount <= MIN_MAIN_CATEGORIES) {\r\n-          setError(`Cannot deselect this category. At least ${MIN_MAIN_CATEGORIES} main category must be selected.`)\r\n-          return\r\n-        }\r\n-      }\r\n-      \r\n-      // Clear any existing errors\r\n-      setError('')\r\n-      \r\n-      // Update categoryIds array\r\n-      setCategoryConfig(prev => {\r\n-        if (!isCurrentlySelected) {\r\n-          // Add to selection\r\n-          return {\r\n-            ...prev,\r\n-            categoryIds: [...prev.categoryIds, categoryId]\r\n-          }\r\n-        } else {\r\n-          // Remove from selection (and remove all its subcategories too)\r\n-          const subcategoriesOfThisCategory = subcategories\r\n-            .filter(sub => (sub.parent?._id || sub.parent) === categoryId)\r\n-            .map(sub => sub.id)\r\n-          \r\n-          return {\r\n-            ...prev,\r\n-            categoryIds: prev.categoryIds.filter(id => \r\n-              id !== categoryId && !subcategoriesOfThisCategory.includes(id)\r\n-            )\r\n-          }\r\n-        }\r\n-      })\r\n-      \r\n-    } else {\r\n-      // Subcategory logic\r\n-      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n-      const parentId = parentCategoryId || findParentCategory(categoryId)\r\n-      \r\n-      console.log('📊 Subcategory status:', { isCurrentlySelected, parentId })\r\n-      \r\n-      if (!isCurrentlySelected && parentId) {\r\n-        // Check subcategory limit for this parent\r\n-        const currentSubCount = categoryConfig.categoryIds.filter(id => \r\n-          subcategories.some(sub => sub.id === id && (sub.parent?._id || sub.parent) === parentId)\r\n-        ).length\r\n-        \r\n-        if (currentSubCount >= MAX_SUBCATEGORIES_PER_CATEGORY) {\r\n-          const parentName = availableCategories.find(cat => cat.id === parentId)?.name || 'this category'\r\n-          setError(`Cannot select more subcategories for ${parentName}. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} per category allowed.`)\r\n-          return\r\n-        }\r\n-      }\r\n-      \r\n-      // Clear any existing errors\r\n-      setError('')\r\n-      \r\n-      // Update categoryIds array\r\n-      setCategoryConfig(prev => {\r\n-        if (!isCurrentlySelected) {\r\n-          // Add to selection\r\n-          let newIds = [...prev.categoryIds, categoryId]\r\n-          \r\n-          // Also ensure parent is selected\r\n-          if (parentId && !prev.categoryIds.includes(parentId)) {\r\n-            newIds.push(parentId)\r\n-          }\r\n-          \r\n-          return {\r\n-            ...prev,\r\n-            categoryIds: newIds\r\n-          }\r\n-        } else {\r\n-          // Remove from selection\r\n-          return {\r\n-            ...prev,\r\n-            categoryIds: prev.categoryIds.filter(id => id !== categoryId)\r\n-          }\r\n-        }\r\n-      })\r\n-    }\r\n-  }\r\n-\r\n-  // Handle max categories change\r\n-  const handleMaxCategoriesChange = (value) => {\r\n-    const numValue = parseInt(value) || 0\r\n-    setCategoryConfig(prev => ({ ...prev, maxCategories: numValue }))\r\n-  }\r\n-\r\n-  // Load data when page changes\r\n-  useEffect(() => {\r\n-    const loadData = async () => {\r\n-      await loadPageConfig(selectedPage)\r\n-      await loadCategories()\r\n-      await loadSubcategories()\r\n-    }\r\n-    loadData()\r\n-  }, [selectedPage])\r\n-\r\n-  // Get sections for current page\r\n-  const getCurrentSections = () => {\r\n-    return selectedPage === \"home\" ? homeSections : corporateSections\r\n-  }\r\n-\r\n-  // Render category configuration modal\r\n-  const renderCategoryConfigModal = () => {\r\n-    if (!showCategoryConfig) return null\r\n-\r\n-    console.log('🎨 === RENDERING CATEGORY MODAL DEBUG ===')\r\n-    console.log('1. Modal render triggered')\r\n-    console.log('2. availableCategories state:')\r\n-    console.log('   - Length:', availableCategories.length)\r\n-    console.log('   - Is array:', Array.isArray(availableCategories))\r\n-    console.log('   - Full data:', availableCategories)\r\n-    \r\n-    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n-    const subCategories = subcategories // Use the separate subcategories state\r\n-    \r\n-    console.log('3. Category breakdown:')\r\n-    console.log('   - Main categories:', mainCategories.length, mainCategories)\r\n-    console.log('   - Sub categories:', subCategories.length, subCategories)\r\n-    \r\n-    // Get subcategories for selected main category\r\n-    const getSubcategoriesForCategory = (categoryId) => {\r\n-      console.log('🔍 Getting subcategories for category ID:', categoryId)\r\n-      const filtered = subCategories.filter(subCat => {\r\n-        const parentId = subCat.parent?._id || subCat.parent\r\n-        console.log(`   - Checking subcategory \"${subCat.name}\": parent=${parentId}, matches=${parentId === categoryId}`)\r\n-        return parentId === categoryId\r\n-      })\r\n-      console.log(`   - Found ${filtered.length} subcategories for category ${categoryId}:`, filtered)\r\n-      return filtered\r\n-    }\r\n-\r\n-    // Auto-select first main category if none selected\r\n-    if (!selectedMainCategory && mainCategories.length > 0) {\r\n-      setSelectedMainCategory(mainCategories[0].id)\r\n-    }\r\n-\r\n-    const selectedCategorySubcategories = selectedMainCategory ? \r\n-      getSubcategoriesForCategory(selectedMainCategory) : []\r\n-\r\n-    return (\r\n-      <div className=\"modal show d-block\" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n-        <div className=\"modal-dialog modal-xl\">\r\n-          <div className=\"modal-content\">\r\n-            <div className=\"modal-header\">\r\n-              <h5 className=\"modal-title\">\r\n-                <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n-                Category Section Configuration\r\n-              </h5>\r\n-              <button \r\n-                type=\"button\" \r\n-                className=\"btn-close\" \r\n-                onClick={() => setShowCategoryConfig(false)}\r\n-              ></button>\r\n-            </div>\r\n-            <div className=\"modal-body\">\r\n-              {/* Enable/Disable Section */}\r\n-              <div className=\"row mb-4\">\r\n-                <div className=\"col-12\">\r\n-                  <div className=\"form-check form-switch\">\r\n-                    <input \r\n-                      className=\"form-check-input\" \r\n-                      type=\"checkbox\" \r\n-                      id=\"enableCategorySection\"\r\n-                      checked={categoryConfig.enabled}\r\n-                      onChange={(e) => setCategoryConfig(prev => ({ ...prev, enabled: e.target.checked }))}\r\n-                    />\r\n-                    <label className=\"form-check-label fw-semibold\" htmlFor=\"enableCategorySection\">\r\n-                      Enable Category Section\r\n-                    </label>\r\n-                  </div>\r\n-                  <small className=\"text-muted\">Turn on/off the category section on the homepage</small>\r\n-                </div>\r\n-              </div>\r\n-\r\n-              {categoryConfig.enabled && (\r\n-                <>\r\n-                  {/* Selection Summary and Validation */}\r\n-                  <div className=\"row mb-4\">\r\n-                    <div className=\"col-12\">\r\n-                      <div className=\"card border-info\">\r\n-                        <div className=\"card-header bg-info bg-opacity-10\">\r\n-                          <h6 className=\"mb-0 text-info\">\r\n-                            <i className=\"bi bi-info-circle me-2\"></i>\r\n-                            Selection Summary\r\n-                          </h6>\r\n-                        </div>\r\n-                        <div className=\"card-body\">\r\n-                          <div className=\"row\">\r\n-                            <div className=\"col-md-6\">\r\n-                              <div className={`d-flex justify-content-between align-items-center p-2 rounded ${getCurrentCounts().mainCategoriesCount >= MIN_MAIN_CATEGORIES && getCurrentCounts().mainCategoriesCount <= MAX_MAIN_CATEGORIES ? 'bg-success bg-opacity-10 text-success' : 'bg-warning bg-opacity-10 text-warning'}`}>\r\n-                                <span className=\"fw-semibold\">\r\n-                                  <i className=\"bi bi-grid me-1\"></i>\r\n-                                  Main Categories:\r\n-                                </span>\r\n-                                <span className=\"badge bg-primary\">\r\n-                                  {getCurrentCounts().mainCategoriesCount} / {MAX_MAIN_CATEGORIES}\r\n-                                </span>\r\n-                              </div>\r\n-                              {getCurrentCounts().mainCategoriesCount < MIN_MAIN_CATEGORIES && (\r\n-                                <small className=\"text-warning\">\r\n-                                  <i className=\"bi bi-exclamation-triangle me-1\"></i>\r\n-                                  Minimum {MIN_MAIN_CATEGORIES} main category required\r\n-                                </small>\r\n-                              )}\r\n-                            </div>\r\n-                            <div className=\"col-md-6\">\r\n-                              <div className=\"d-flex justify-content-between align-items-center p-2 rounded bg-info bg-opacity-10 text-info\">\r\n-                                <span className=\"fw-semibold\">\r\n-                                  <i className=\"bi bi-tags me-1\"></i>\r\n-                                  Total Subcategories:\r\n-                                </span>\r\n-                                <span className=\"badge bg-info\">\r\n-                                  {getCurrentCounts().totalSubcategoriesCount}\r\n-                                </span>\r\n-                              </div>\r\n-                              {selectedMainCategory && (\r\n-                                <small className=\"text-muted\">\r\n-                                  <i className=\"bi bi-arrow-right me-1\"></i>\r\n-                                  Selected category: {getCurrentCounts().selectedCategorySubCount} / {MAX_SUBCATEGORIES_PER_CATEGORY}\r\n-                                </small>\r\n-                              )}\r\n-                            </div>\r\n-                          </div>\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-                </>\r\n-              )}\r\n-\r\n-              {categoryConfig.enabled && (\r\n-                <>\r\n-                  {/* Configuration Options */}\r\n-                  <div className=\"row mb-4\">\r\n-                    <div className=\"col-md-4\">\r\n-                      <label className=\"form-label fw-semibold\">Maximum Categories to Show</label>\r\n-                      <input \r\n-                        type=\"number\" \r\n-                        className=\"form-control\"\r\n-                        min=\"1\"\r\n-                        max=\"20\"\r\n-                        value={categoryConfig.maxCategories}\r\n-                        onChange={(e) => handleMaxCategoriesChange(e.target.value)}\r\n-                      />\r\n-                      <small className=\"text-muted\">Limit how many categories appear (0 = no limit)</small>\r\n-                    </div>\r\n-                    <div className=\"col-md-4\">\r\n-                      <label className=\"form-label fw-semibold\">Layout Style</label>\r\n-                      <select \r\n-                        className=\"form-select\"\r\n-                        value={categoryConfig.layout}\r\n-                        onChange={(e) => setCategoryConfig(prev => ({ ...prev, layout: e.target.value }))}\r\n-                      >\r\n-                        <option value=\"grid\">Grid Layout</option>\r\n-                        <option value=\"carousel\">Carousel</option>\r\n-                        <option value=\"list\">List View</option>\r\n-                      </select>\r\n-                    </div>\r\n-                    <div className=\"col-md-4\">\r\n-                      <div className=\"form-check mt-4\">\r\n-                        <input \r\n-                          className=\"form-check-input\" \r\n-                          type=\"checkbox\" \r\n-                          id=\"showSubcategories\"\r\n-                          checked={categoryConfig.showSubcategories}\r\n-                          onChange={(e) => setCategoryConfig(prev => ({ ...prev, showSubcategories: e.target.checked }))}\r\n-                        />\r\n-                        <label className=\"form-check-label\" htmlFor=\"showSubcategories\">\r\n-                          Show subcategories on hover\r\n-                        </label>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-\r\n-                  {/* Selection Summary */}\r\n-                  <div className=\"row mb-4\">\r\n-                    <div className=\"col-12\">\r\n-                      <div className=\"alert alert-info d-flex align-items-center\">\r\n-                        <i className=\"bi bi-info-circle me-2\"></i>\r\n-                        <div>\r\n-                          <strong>Selection Summary:</strong> {categoryConfig.categoryIds.length} categories selected \r\n-                          ({categoryConfig.categoryIds.filter(id => mainCategories.some(cat => cat.id === id)).length} main categories, {categoryConfig.categoryIds.filter(id => subCategories.some(cat => cat.id === id)).length} subcategories)\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  </div>\r\n-\r\n-                  {/* Category Selection Interface */}\r\n-                  <div className=\"row mb-4\">\r\n-                    <div className=\"col-12\">\r\n-                      <label className=\"form-label fw-semibold mb-3\">Select Categories and Subcategories</label>\r\n-                      \r\n-                      {mainCategories.length > 0 ? (\r\n-                        <div className=\"row\">\r\n-                          {/* Left Side - Main Categories */}\r\n-                          <div className=\"col-md-6\">\r\n-                            <div className=\"card\">\r\n-                              <div className=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n-                                <h6 className=\"mb-0\">\r\n-                                  <i className=\"bi bi-grid text-primary me-2\"></i>\r\n-                                  Main Categories ({mainCategories.length})\r\n-                                </h6>\r\n-                                <span className=\"badge bg-primary\">\r\n-                                  {getCurrentCounts().mainCategoriesCount} selected\r\n-                                </span>\r\n-                              </div>\r\n-                              <div className=\"card-body p-0\">\r\n-                                <div className=\"list-group list-group-flush\" style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n-                                  {mainCategories.map((category, index) => {\r\n-                                    // Use the flat categoryIds array for now since categories is still an array\r\n-                                    const isSelected = categoryConfig.categoryIds.includes(category.id)\r\n-                                    const isActiveTab = selectedMainCategory === category.id\r\n-                                    const subcategoryCount = getSubcategoriesForCategory(category.id).length\r\n-                                    const selectedSubcategoryCount = getSubcategoriesForCategory(category.id)\r\n-                                      .filter(sub => categoryConfig.categoryIds.includes(sub.id)).length\r\n-                                    \r\n-                                    return (\r\n-                                      <div \r\n-                                        key={category.id} \r\n-                                        className={`list-group-item list-group-item-action border-0 ${isActiveTab ? 'active' : ''} ${isSelected ? 'bg-primary bg-opacity-10 border-start border-primary border-3' : ''}`}\r\n-                                        style={{ cursor: 'pointer' }}\r\n-                                        onClick={() => setSelectedMainCategory(category.id)}\r\n-                                      >\r\n-                                        <div className=\"d-flex align-items-center\">\r\n-                                          <div className=\"form-check me-3\" onClick={(e) => e.stopPropagation()}>\r\n-                                            <input \r\n-                                              className=\"form-check-input\" \r\n-                                              type=\"checkbox\" \r\n-                                              id={`main-category-${category.id}`}\r\n-                                              checked={isSelected}\r\n-                                              onChange={() => handleCategoryToggle(category.id)}\r\n-                                            />\r\n-                                          </div>\r\n-                                          \r\n-                                          {category.image && (\r\n-                                            <img \r\n-                                              src={category.image} \r\n-                                              alt={category.name}\r\n-                                              className=\"me-3 flex-shrink-0 border\"\r\n-                                              style={{ width: '42px', height: '42px', objectFit: 'cover', borderRadius: '8px' }}\r\n-                                            />\r\n-                                          )}\r\n-                                          \r\n-                                          <div className=\"flex-grow-1\">\r\n-                                            <div className=\"d-flex justify-content-between align-items-center\">\r\n-                                              <div>\r\n-                                                <h6 className={`mb-1 fw-semibold ${isActiveTab ? 'text-white' : 'text-dark'}`}>\r\n-                                                  <i className=\"bi bi-grid text-primary me-1\" style={{ fontSize: '14px' }}></i>\r\n-                                                  {category.name}\r\n-                                                </h6>\r\n-                                                {category.description && (\r\n-                                                  <p className={`mb-1 small ${isActiveTab ? 'text-white-50' : 'text-muted'}`}>\r\n-                                                    {category.description}\r\n-                                                  </p>\r\n-                                                )}\r\n-                                                <div className=\"d-flex gap-1 align-items-center\">\r\n-                                                  <span className={`badge ${isActiveTab ? 'bg-white text-primary' : 'bg-primary'}`} style={{ fontSize: '9px' }}>\r\n-                                                    Main Category\r\n-                                                  </span>\r\n-                                                  {isSelected && (\r\n-                                                    <span className={`badge ${isActiveTab ? 'bg-success text-white' : 'bg-success'}`} style={{ fontSize: '9px' }}>\r\n-                                                      <i className=\"bi bi-check-circle me-1\"></i>\r\n-                                                      Selected\r\n-                                                    </span>\r\n-                                                  )}\r\n-                                                </div>\r\n-                                              </div>\r\n-                                              <div className=\"text-end\">\r\n-                                                {subcategoryCount > 0 && (\r\n-                                                  <div className=\"mb-1\">\r\n-                                                    <span className={`badge ${isActiveTab ? 'bg-white text-primary' : 'bg-secondary'}`} style={{ fontSize: '10px' }}>\r\n-                                                      {subcategoryCount} subs\r\n-                                                    </span>\r\n-                                                  </div>\r\n-                                                )}\r\n-                                                {selectedSubcategoryCount > 0 && (\r\n-                                                  <div className=\"mb-1\">\r\n-                                                    <span className={`badge ${isActiveTab ? 'bg-success text-white' : 'bg-success'}`} style={{ fontSize: '10px' }}>\r\n-                                                      {selectedSubcategoryCount} selected\r\n-                                                    </span>\r\n-                                                  </div>\r\n-                                                )}\r\n-                                                <i className={`bi bi-chevron-right ${isActiveTab ? 'text-white' : 'text-muted'}`}></i>\r\n-                                              </div>\r\n-                                            </div>\r\n-                                          </div>\r\n-                                        </div>\r\n-                                      </div>\r\n-                                    )\r\n-                                  })}\r\n-                                </div>\r\n-                              </div>\r\n-                            </div>\r\n-                          </div>\r\n-\r\n-                          {/* Right Side - Subcategories */}\r\n-                          <div className=\"col-md-6\">\r\n-                            <div className=\"card\">\r\n-                              <div className=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n-                                <h6 className=\"mb-0\">\r\n-                                  <i className=\"bi bi-tag text-secondary me-2\"></i>\r\n-                                  Subcategories\r\n-                                  {selectedMainCategory && (\r\n-                                    <span className=\"text-muted ms-2\">\r\n-                                      for \"{mainCategories.find(cat => cat.id === selectedMainCategory)?.name}\"\r\n-                                    </span>\r\n-                                  )}\r\n-                                </h6>\r\n-                                {selectedCategorySubcategories.length > 0 && (\r\n-                                  <span className=\"badge bg-secondary\">\r\n-                                    {selectedCategorySubcategories.length} subcategories\r\n-                                  </span>\r\n-                                )}\r\n-                              </div>\r\n-                              <div className=\"card-body p-0\">\r\n-                                {selectedMainCategory ? (\r\n-                                  selectedCategorySubcategories.length > 0 ? (\r\n-                                    <>\r\n-                                      {/* Subcategories Stats */}\r\n-                                      <div className=\"p-3 bg-light border-bottom\">\r\n-                                        <div className=\"row text-center\">\r\n-                                          <div className=\"col-6\">\r\n-                                            <div className=\"small\">\r\n-                                              <strong>{selectedCategorySubcategories.filter(sub => categoryConfig.categoryIds.includes(sub.id)).length}</strong>\r\n-                                              <br />\r\n-                                              <span className=\"text-muted\">Selected</span>\r\n-                                            </div>\r\n-                                          </div>\r\n-                                          <div className=\"col-6\">\r\n-                                            <div className=\"small\">\r\n-                                              <strong>{selectedCategorySubcategories.filter(sub => sub.status).length}</strong>\r\n-                                              <br />\r\n-                                              <span className=\"text-muted\">Active</span>\r\n-                                            </div>\r\n-                                          </div>\r\n-                                        </div>\r\n-                                      </div>\r\n-\r\n-                                      {/* Quick Actions for Subcategories */}\r\n-                                      <div className=\"p-2 border-bottom\">\r\n-                                        <div className=\"d-flex gap-1\">\r\n-                                          <button \r\n-                                            type=\"button\" \r\n-                                            className=\"btn btn-outline-success btn-sm\"\r\n-                                            onClick={() => {\r\n-                                              const currentSubIds = selectedCategorySubcategories.map(cat => cat.id)\r\n-                                              setCategoryConfig(prev => ({\r\n-                                                ...prev,\r\n-                                                categoryIds: [...new Set([...prev.categoryIds, ...currentSubIds])]\r\n-                                              }))\r\n-                                            }}\r\n-                                          >\r\n-                                            <i className=\"bi bi-check-all me-1\"></i>\r\n-                                            Select All\r\n-                                          </button>\r\n-                                          \r\n-                                          <button \r\n-                                            type=\"button\" \r\n-                                            className=\"btn btn-outline-secondary btn-sm\"\r\n-                                            onClick={() => {\r\n-                                              const currentSubIds = selectedCategorySubcategories.map(cat => cat.id)\r\n-                                              setCategoryConfig(prev => ({\r\n-                                                ...prev,\r\n-                                                categoryIds: prev.categoryIds.filter(id => !currentSubIds.includes(id))\r\n-                                              }))\r\n-                                            }}\r\n-                                          >\r\n-                                            <i className=\"bi bi-x-circle me-1\"></i>\r\n-                                            Clear All\r\n-                                          </button>\r\n-                                        </div>\r\n-                                      </div>\r\n-\r\n-                                      {/* Subcategories List */}\r\n-                                      <div className=\"list-group list-group-flush\" style={{ maxHeight: '350px', overflowY: 'auto' }}>\r\n-                                        {selectedCategorySubcategories.map((subcategory, index) => {\r\n-                                          // Use the flat categoryIds array for now since categories is still an array\r\n-                                          const isSelected = categoryConfig.categoryIds.includes(subcategory.id)\r\n-                                          \r\n-                                          return (\r\n-                                            <div \r\n-                                              key={subcategory.id} \r\n-                                              className={`list-group-item list-group-item-action border-0 ${isSelected ? 'bg-success bg-opacity-10 border-start border-success border-3' : ''}`}\r\n-                                            >\r\n-                                              <div className=\"d-flex align-items-center\">\r\n-                                                <div className=\"form-check me-3\">\r\n-                                                  <input \r\n-                                                    className=\"form-check-input form-check-input-success\" \r\n-                                                    type=\"checkbox\" \r\n-                                                    id={`sub-category-${subcategory.id}`}\r\n-                                                    checked={isSelected}\r\n-                                                    onChange={() => handleCategoryToggle(subcategory.id, selectedMainCategory)}\r\n-                                                  />\r\n-                                                </div>\r\n-                                                \r\n-                                                {subcategory.image && (\r\n-                                                  <img \r\n-                                                    src={subcategory.image} \r\n-                                                    alt={subcategory.name}\r\n-                                                    className=\"me-3 flex-shrink-0 border\"\r\n-                                                    style={{ width: '36px', height: '36px', objectFit: 'cover', borderRadius: '6px' }}\r\n-                                                  />\r\n-                                                )}\r\n-                                                \r\n-                                                <div className=\"flex-grow-1\">\r\n-                                                  <div className=\"d-flex justify-content-between align-items-start\">\r\n-                                                    <div>\r\n-                                                      <h6 className=\"mb-1 text-dark fw-semibold\">\r\n-                                                        <i className=\"bi bi-tag text-success me-1\" style={{ fontSize: '12px' }}></i>\r\n-                                                        {subcategory.name}\r\n-                                                      </h6>\r\n-                                                      {subcategory.description && (\r\n-                                                        <p className=\"mb-1 text-muted small\">{subcategory.description}</p>\r\n-                                                      )}\r\n-                                                      <div className=\"d-flex gap-1 align-items-center\">\r\n-                                                        <span className=\"badge bg-secondary\" style={{ fontSize: '9px' }}>\r\n-                                                          Subcategory\r\n-                                                        </span>\r\n-                                                        <span className={`badge ${subcategory.status ? 'bg-success' : 'bg-danger'}`} style={{ fontSize: '9px' }}>\r\n-                                                          {subcategory.status ? 'Active' : 'Inactive'}\r\n-                                                        </span>\r\n-                                                        {isSelected && (\r\n-                                                          <span className=\"badge bg-primary\" style={{ fontSize: '9px' }}>\r\n-                                                            <i className=\"bi bi-check-circle me-1\"></i>\r\n-                                                            Selected\r\n-                                                          </span>\r\n-                                                        )}\r\n-                                                      </div>\r\n-                                                    </div>\r\n-                                                    <div className=\"text-end\">\r\n-                                                      <small className=\"text-muted\">#{index + 1}</small>\r\n-                                                    </div>\r\n-                                                  </div>\r\n-                                                </div>\r\n-                                              </div>\r\n-                                            </div>\r\n-                                          )\r\n-                                        })}\r\n-                                      </div>\r\n-\r\n-                                      {/* Footer Info */}\r\n-                                      <div className=\"p-2 bg-light border-top text-center\">\r\n-                                        <small className=\"text-muted\">\r\n-                                          <i className=\"bi bi-info-circle me-1\"></i>\r\n-                                          Click checkboxes to select subcategories for homepage display\r\n-                                        </small>\r\n-                                      </div>\r\n-                                    </>\r\n-                                  ) : (\r\n-                                    <div className=\"text-center py-5\">\r\n-                                      <i className=\"bi bi-folder2-open text-muted\" style={{ fontSize: '2.5rem' }}></i>\r\n-                                      <h6 className=\"mt-3 text-muted\">No subcategories found</h6>\r\n-                                      <p className=\"text-muted mb-3\">\r\n-                                        The category \"{mainCategories.find(cat => cat.id === selectedMainCategory)?.name}\" doesn't have any subcategories yet.\r\n-                                      </p>\r\n-                                      <button \r\n-                                        className=\"btn btn-outline-primary btn-sm\"\r\n-                                        onClick={() => {\r\n-                                          // You can add navigation to create subcategory here\r\n-                                          alert('Navigate to Categories > Subcategories to create subcategories for this category')\r\n-                                        }}\r\n-                                      >\r\n-                                        <i className=\"bi bi-plus-circle me-1\"></i>\r\n-                                        Create Subcategories\r\n-                                      </button>\r\n-                                    </div>\r\n-                                  )\r\n-                                ) : (\r\n-                                  <div className=\"text-center py-5\">\r\n-                                    <i className=\"bi bi-arrow-left text-primary\" style={{ fontSize: '2.5rem' }}></i>\r\n-                                    <h6 className=\"mt-3 text-muted\">Select a main category</h6>\r\n-                                    <p className=\"text-muted mb-0\">\r\n-                                      Click on a main category from the left panel to view and select its subcategories.\r\n-                                    </p>\r\n-                                  </div>\r\n-                                )}\r\n-                              </div>\r\n-                            </div>\r\n-                          </div>\r\n-                        </div>\r\n-                      ) : (\r\n-                        <div className=\"text-center py-5\">\r\n-                          <i className=\"bi bi-folder2-open text-muted\" style={{ fontSize: '3rem' }}></i>\r\n-                          <p className=\"mt-2 text-muted\">No categories available</p>\r\n-                          <small className=\"text-muted\">Create categories first to configure this section.</small>\r\n-                        </div>\r\n-                      )}\r\n-                    </div>\r\n-                  </div>\r\n-\r\n-                  {/* Quick Actions */}\r\n-                  {mainCategories.length > 0 && (\r\n-                    <div className=\"row\">\r\n-                      <div className=\"col-12\">\r\n-                        <div className=\"d-flex gap-2 flex-wrap\">\r\n-                          <button \r\n-                            type=\"button\" \r\n-                            className=\"btn btn-outline-primary btn-sm\"\r\n-                            onClick={() => {\r\n-                              const { mainCategoriesCount } = getCurrentCounts()\r\n-                              const availableSlots = MAX_MAIN_CATEGORIES - mainCategoriesCount\r\n-                              \r\n-                              if (availableSlots <= 0) {\r\n-                                setError(`Cannot select more categories. Maximum ${MAX_MAIN_CATEGORIES} main categories allowed.`)\r\n-                                return\r\n-                              }\r\n-                              \r\n-                              setCategoryConfig(prev => {\r\n-                                const newConfig = { ...prev, categories: { ...prev.categories } }\r\n-                                let added = 0\r\n-                                \r\n-                                mainCategories.forEach(cat => {\r\n-                                  if (added < availableSlots && !newConfig.categories[cat.id]?.selected) {\r\n-                                    newConfig.categories[cat.id] = {\r\n-                                      selected: true,\r\n-                                      order: Object.keys(newConfig.categories).filter(id => newConfig.categories[id]?.selected).length,\r\n-                                      subcategories: newConfig.categories[cat.id]?.subcategories || {}\r\n-                                    }\r\n-                                    added++\r\n-                                  }\r\n-                                })\r\n-                                \r\n-                                if (added < mainCategories.length - mainCategoriesCount) {\r\n-                                  setError(`Only selected ${added} more categories due to limit.`)\r\n-                                }\r\n-                                \r\n-                                return newConfig\r\n-                              })\r\n-                            }}\r\n-                          >\r\n-                            <i className=\"bi bi-check-all me-1\"></i>\r\n-                            Select All Main Categories\r\n-                          </button>\r\n-                          \r\n-                          <button \r\n-                            type=\"button\" \r\n-                            className=\"btn btn-outline-success btn-sm\"\r\n-                            onClick={() => {\r\n-                              if (!selectedMainCategory) {\r\n-                                setError('Please select a main category first to add subcategories.')\r\n-                                return\r\n-                              }\r\n-                              \r\n-                              const subcategoriesForMain = getSubcategoriesForCategory(selectedMainCategory)\r\n-                              const currentSubCount = subcategoriesForMain.filter(sub => \r\n-                                categoryConfig.categories[selectedMainCategory]?.subcategories?.[sub.id]?.selected\r\n-                              ).length\r\n-                              const availableSlots = MAX_SUBCATEGORIES_PER_CATEGORY - currentSubCount\r\n-                              \r\n-                              if (availableSlots <= 0) {\r\n-                                setError(`Cannot select more subcategories. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} subcategories per main category allowed.`)\r\n-                                return\r\n-                              }\r\n-                              \r\n-                              setCategoryConfig(prev => {\r\n-                                const newConfig = { ...prev, categories: { ...prev.categories } }\r\n-                                \r\n-                                // Ensure main category is selected and has structure\r\n-                                if (!newConfig.categories[selectedMainCategory]) {\r\n-                                  newConfig.categories[selectedMainCategory] = {\r\n-                                    selected: true,\r\n-                                    order: Object.keys(newConfig.categories).filter(id => newConfig.categories[id]?.selected).length,\r\n-                                    subcategories: {}\r\n-                                  }\r\n-                                }\r\n-                                \r\n-                                let added = 0\r\n-                                subcategoriesForMain.forEach(sub => {\r\n-                                  if (added < availableSlots && !newConfig.categories[selectedMainCategory].subcategories[sub.id]?.selected) {\r\n-                                    newConfig.categories[selectedMainCategory].subcategories[sub.id] = {\r\n-                                      selected: true,\r\n-                                      order: Object.keys(newConfig.categories[selectedMainCategory].subcategories).filter(id => \r\n-                                        newConfig.categories[selectedMainCategory].subcategories[id]?.selected\r\n-                                      ).length\r\n-                                    }\r\n-                                    added++\r\n-                                  }\r\n-                                })\r\n-                                \r\n-                                if (added < subcategoriesForMain.length - currentSubCount) {\r\n-                                  setError(`Only selected ${added} more subcategories due to limit.`)\r\n-                                }\r\n-                                \r\n-                                return newConfig\r\n-                              })\r\n-                            }}\r\n-                          >\r\n-                            <i className=\"bi bi-tags me-1\"></i>\r\n-                            Select All Subcategories\r\n-                          </button>\r\n-                          \r\n-                          <button \r\n-                            type=\"button\" \r\n-                            className=\"btn btn-outline-secondary btn-sm\"\r\n-                            onClick={() => {\r\n-                              setCategoryConfig(prev => ({\r\n-                                ...prev,\r\n-                                categories: {}\r\n-                              }))\r\n-                              setSelectedMainCategory(null)\r\n-                            }}\r\n-                          >\r\n-                            <i className=\"bi bi-x-circle me-1\"></i>\r\n-                            Clear All Selections\r\n-                          </button>\r\n-                        </div>\r\n-                      </div>\r\n-                    </div>\r\n-                  )}\r\n-                </>\r\n-              )}\r\n-            </div>\r\n-            <div className=\"modal-footer\">\r\n-              <button \r\n-                type=\"button\" \r\n-                className=\"btn btn-secondary\" \r\n-                onClick={() => setShowCategoryConfig(false)}\r\n-              >\r\n-                Cancel\r\n-              </button>\r\n-              <button \r\n-                type=\"button\" \r\n-                className=\"btn btn-primary\" \r\n-                onClick={saveCategoryConfig}\r\n-                disabled={loading}\r\n-              >\r\n-                {loading ? (\r\n-                  <>\r\n-                    <span className=\"spinner-border spinner-border-sm me-2\"></span>\r\n-                    Saving...\r\n-                  </>\r\n-                ) : (\r\n-                  'Save Configuration'\r\n-                )}\r\n-              </button>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    )\r\n-  }\r\n-\r\n-  // Move section up/down\r\n-  const handleMoveSection = async (page, sectionKey, direction) => {\r\n-    const sections = page === \"home\" ? homeSections : corporateSections\r\n-    const currentIndex = sections.findIndex(s => s.key === sectionKey)\r\n-    \r\n-    if (direction === 'up' && currentIndex > 0) {\r\n-      // Move up logic - would need to update order\r\n-      console.log(`Moving ${sectionKey} up`)\r\n-    } else if (direction === 'down' && currentIndex < sections.length - 1) {\r\n-      // Move down logic - would need to update order\r\n-      console.log(`Moving ${sectionKey} down`)\r\n-    }\r\n-    \r\n-    // TODO: Implement actual reordering\r\n-    setSuccess('Section order updated!')\r\n-    setTimeout(() => setSuccess(''), 2000)\r\n-  }\r\n-\r\n-  // Render section controls\r\n-  const renderSections = () => {\r\n-    const sections = getCurrentSections()\r\n-    const currentPage = PAGES.find(p => p.key === selectedPage)\r\n-    \r\n-    return (\r\n-      <div className=\"col-md-9\">\r\n-        <div className=\"card border-0 shadow-sm\">\r\n-          <div className=\"card-header bg-white border-bottom\">\r\n-            <div className=\"d-flex justify-content-between align-items-center\">\r\n-              <div>\r\n-                <h5 className=\"mb-1 fw-semibold\">{currentPage.label}</h5>\r\n-                <p className=\"text-muted mb-0 small\">{currentPage.description}</p>\r\n-              </div>\r\n-              <span className=\"badge bg-primary\">\r\n-                {sections.filter(s => visibleSections[selectedPage][s.key]).length} active\r\n-              </span>\r\n-            </div>\r\n-          </div>\r\n-          \r\n-          <div className=\"card-body p-0\">\r\n-            {sections.length === 0 ? (\r\n-              <div className=\"text-center py-5\">\r\n-                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\r\n-                <p className=\"mt-2 text-muted\">No sections configured for this page.</p>\r\n-              </div>\r\n-            ) : (\r\n-              <div className=\"table-responsive\">\r\n-                <table className=\"table table-hover mb-0\">\r\n-                  <thead className=\"table-light\">\r\n-                    <tr>\r\n-                      <th className=\"ps-4\">Section</th>\r\n-                      <th>Description</th>\r\n-                      <th>Order</th>\r\n-                      <th>Status</th>\r\n-                      <th className=\"text-center\">Actions</th>\r\n-                    </tr>\r\n-                  </thead>\r\n-                  <tbody>\r\n-                    {sections.map((section, index) => {\r\n-                      const isVisible = visibleSections[selectedPage][section.key]\r\n-                      const isCategorySection = section.key === 'giftCategories'\r\n-                      \r\n-                      return (\r\n-                        <tr key={section.key} className={isVisible ? '' : 'table-secondary'}>\r\n-                          <td className=\"ps-4\">\r\n-                            <div className=\"d-flex align-items-center\">\r\n-                              <div>\r\n-                                <div className=\"fw-semibold\">{section.label}</div>\r\n-                                {isCategorySection && categoryConfig.categoryIds.length > 0 && (\r\n-                                  <small className=\"text-muted\">\r\n-                                    {categoryConfig.categoryIds.length} categories selected\r\n-                                  </small>\r\n-                                )}\r\n-                              </div>\r\n-                            </div>\r\n-                          </td>\r\n-                          <td>\r\n-                            <span className=\"text-muted\">{section.description}</span>\r\n-                          </td>\r\n-                          <td>\r\n-                            <span className=\"badge bg-light text-dark\">{section.order}</span>\r\n-                          </td>\r\n-                          <td>\r\n-                            <div className=\"form-check form-switch\">\r\n-                              <input \r\n-                                className=\"form-check-input\" \r\n-                                type=\"checkbox\" \r\n-                                checked={isCategorySection ? categoryConfig.enabled : isVisible}\r\n-                                onChange={() => handleToggleSection(selectedPage, section.key)}\r\n-                                id={`toggle-${section.key}`}\r\n-                              />\r\n-                              <label className=\"form-check-label\" htmlFor={`toggle-${section.key}`}>\r\n-                                {isCategorySection ? (categoryConfig.enabled ? 'Enabled' : 'Disabled') : (isVisible ? 'Visible' : 'Hidden')}\r\n-                              </label>\r\n-                            </div>\r\n-                          </td>\r\n-                          <td className=\"text-center\">\r\n-                            <div className=\"btn-group btn-group-sm\">\r\n-                              {section.hasConfig && (\r\n-                                <button\r\n-                                  className=\"btn btn-outline-primary\"\r\n-                                  onClick={openCategoryConfig}\r\n-                                  title=\"Configure section\"\r\n-                                >\r\n-                                  <i className=\"bi bi-gear\"></i>\r\n-                                </button>\r\n-                              )}\r\n-                              <button\r\n-                                className=\"btn btn-outline-secondary\"\r\n-                                onClick={() => handleMoveSection(selectedPage, section.key, 'up')}\r\n-                                disabled={index === 0}\r\n-                                title=\"Move up\"\r\n-                              >\r\n-                                <i className=\"bi bi-arrow-up\"></i>\r\n-                              </button>\r\n-                              <button\r\n-                                className=\"btn btn-outline-secondary\"\r\n-                                onClick={() => handleMoveSection(selectedPage, section.key, 'down')}\r\n-                                disabled={index === sections.length - 1}\r\n-                                title=\"Move down\"\r\n-                              >\r\n-                                <i className=\"bi bi-arrow-down\"></i>\r\n-                              </button>\r\n-                            </div>\r\n-                          </td>\r\n-                        </tr>\r\n-                      )\r\n-                    })}\r\n-                  </tbody>\r\n-                </table>\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    )\r\n-  }\r\n-\r\n-  // Render page sidebar\r\n-  const renderPageSidebar = () => (\r\n-    <div className=\"col-md-3\">\r\n-      <div className=\"card border-0 shadow-sm\">\r\n-        <div className=\"card-header bg-white border-bottom\">\r\n-          <h6 className=\"mb-0 fw-semibold\">\r\n-            <i className=\"bi bi-file-earmark-text me-2\"></i>\r\n-            Pages\r\n-          </h6>\r\n-        </div>\r\n-        <div className=\"card-body p-0\">\r\n-          <div className=\"list-group list-group-flush\">\r\n-            {PAGES.map((page) => {\r\n-              const isActive = selectedPage === page.key\r\n-              const activeCount = visibleSections[page.key] ? \r\n-                Object.values(visibleSections[page.key]).filter(Boolean).length : 0\r\n-              \r\n-              return (\r\n-                <button\r\n-                  key={page.key}\r\n-                  className={`list-group-item list-group-item-action border-0 ${isActive ? 'active' : ''}`}\r\n-                  onClick={() => setSelectedPage(page.key)}\r\n-                  disabled={loading}\r\n-                >\r\n-                  <div className=\"d-flex justify-content-between align-items-center\">\r\n-                    <div>\r\n-                      <div className=\"fw-semibold\">{page.label}</div>\r\n-                      <small className={isActive ? 'text-white-50' : 'text-muted'}>\r\n-                        {page.description}\r\n-                      </small>\r\n-                    </div>\r\n-                    <span className={`badge ${isActive ? 'bg-white text-primary' : 'bg-primary'}`}>\r\n-                      {activeCount}\r\n-                    </span>\r\n-                  </div>\r\n-                </button>\r\n-              )\r\n-            })}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  )\r\n-\r\n-  return (\r\n-    <div className=\"container-fluid\">\r\n-      {/* Page Header */}\r\n-      <div className=\"row mb-4\">\r\n-        <div className=\"col-12\">\r\n-          <div className=\"d-flex justify-content-between align-items-center\">\r\n-            <div>\r\n-              <h2 className=\"fw-bold text-dark mb-1\">Pages Management</h2>\r\n-              <p className=\"text-muted mb-0\">Control which sections appear on each page</p>\r\n-            </div>\r\n-            <div className=\"d-flex gap-2\">\r\n-              <button\r\n-                className=\"btn btn-outline-primary\"\r\n-                onClick={() => loadPageConfig(selectedPage)}\r\n-                disabled={loading}\r\n-              >\r\n-                <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n-                Refresh\r\n-              </button>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Status Messages */}\r\n-      {error && (\r\n-        <div className=\"row mb-3\">\r\n-          <div className=\"col-12\">\r\n-            <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n-              <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\r\n-              <div>{error}</div>\r\n-              <button\r\n-                type=\"button\"\r\n-                className=\"btn-close ms-auto\"\r\n-                onClick={() => setError('')}\r\n-              ></button>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {success && (\r\n-        <div className=\"row mb-3\">\r\n-          <div className=\"col-12\">\r\n-            <div className=\"alert alert-success d-flex align-items-center\" role=\"alert\">\r\n-              <i className=\"bi bi-check-circle-fill me-2\"></i>\r\n-              <div>{success}</div>\r\n-              <button\r\n-                type=\"button\"\r\n-                className=\"btn-close ms-auto\"\r\n-                onClick={() => setSuccess('')}\r\n-              ></button>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Main Content */}\r\n-      <div className=\"row\">\r\n-        {renderPageSidebar()}\r\n-        {renderSections()}\r\n-      </div>\r\n-\r\n-      {/* Category Configuration Modal */}\r\n-      {renderCategoryConfigModal()}\r\n-\r\n-      {/* Loading Overlay */}\r\n-      {loading && (\r\n-        <div className=\"position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center\" \r\n-             style={{ backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 9999 }}>\r\n-          <div className=\"spinner-border text-primary\" role=\"status\">\r\n-            <span className=\"visually-hidden\">Loading...</span>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  )\r\n-}\r\n"
                }
            ],
            "date": 1753198882721,
            "name": "Commit-0",
            "content": "'use client'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { get, post, put } from '@/util/apiService'\r\nimport { CATEGORY, SUBCATEGORY } from '@/util/apiEndpoints'\r\n\r\nconst PAGES = [\r\n  { \r\n    key: \"home\", \r\n    label: \"Home Page\",\r\n    description: \"Manage sections displayed on the homepage\"\r\n  },\r\n  { \r\n    key: \"corporate\", \r\n    label: \"Corporate Page\",\r\n    description: \"Manage sections for corporate customers\"\r\n  }\r\n]\r\n\r\nexport default function PagesManagement({ onNavigate }) {\r\n  const [selectedPage, setSelectedPage] = useState(\"home\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const [success, setSuccess] = useState('')\r\n  const [showCategoryConfig, setShowCategoryConfig] = useState(false)\r\n  const [availableCategories, setAvailableCategories] = useState([])\r\n  const [subcategories, setSubcategories] = useState([])\r\n  const [pageConfig, setPageConfig] = useState(null)\r\n\r\n  // Category section configuration state - NEW HIERARCHICAL STRUCTURE\r\n  const [categoryConfig, setCategoryConfig] = useState({\r\n    enabled: true,\r\n    maxCategories: 10, // Keep for UI display\r\n    layout: 'grid',\r\n    showSubcategories: true,\r\n    // New hierarchical structure\r\n    categories: [\r\n      // Structure: { categoryId, enabled, order, type: 'main', subcategories: [...] }\r\n    ],\r\n    // Keep for backward compatibility and quick lookups\r\n    categoryIds: []\r\n  })\r\n\r\n  // Business rule constants\r\n  const MAX_MAIN_CATEGORIES = 10\r\n  const MIN_MAIN_CATEGORIES = 1\r\n  const MAX_SUBCATEGORIES_PER_CATEGORY = 10\r\n\r\n  // UI state for category selection\r\n  const [selectedMainCategory, setSelectedMainCategory] = useState(null)\r\n\r\n  // Define sections for each page\r\n  const homeSections = [\r\n    { \r\n      key: \"giftCategories\", \r\n      label: \"Gift Categories\", \r\n      description: \"Display category grid with gifts\",\r\n      order: 1,\r\n      hasConfig: true\r\n    },\r\n    { \r\n      key: \"slider\", \r\n      label: \"Main Slider\", \r\n      description: \"Hero banner with promotional slides\",\r\n      order: 2\r\n    },\r\n    { \r\n      key: \"services\", \r\n      label: \"Services Section\", \r\n      description: \"Highlight key services and benefits\",\r\n      order: 3\r\n    },\r\n    { \r\n      key: \"products\", \r\n      label: \"Featured Products\", \r\n      description: \"Showcase featured/trending products\",\r\n      order: 4\r\n    },\r\n    { \r\n      key: \"banner\", \r\n      label: \"Promotional Banner\", \r\n      description: \"Secondary promotional content\",\r\n      order: 5\r\n    },\r\n    { \r\n      key: \"dealProduct\", \r\n      label: \"Deal Products\", \r\n      description: \"Special offers and discounted items\",\r\n      order: 6\r\n    }\r\n  ]\r\n\r\n  const corporateSections = [\r\n    { \r\n      key: \"corporateBanner\", \r\n      label: \"Corporate Banner\", \r\n      description: \"Hero section for corporate clients\",\r\n      order: 1\r\n    },\r\n    { \r\n      key: \"corporateServices\", \r\n      label: \"Corporate Services\", \r\n      description: \"B2B services and solutions\",\r\n      order: 2\r\n    },\r\n    { \r\n      key: \"corporateTestimonials\", \r\n      label: \"Client Testimonials\", \r\n      description: \"Corporate client reviews and case studies\",\r\n      order: 3\r\n    },\r\n    { \r\n      key: \"corporatePartners\", \r\n      label: \"Partner Logos\", \r\n      description: \"Display trusted corporate partners\",\r\n      order: 4\r\n    }\r\n  ]\r\n\r\n  // Section visibility state\r\n  const [visibleSections, setVisibleSections] = useState({\r\n    home: {\r\n      giftCategories: true,\r\n      slider: true,\r\n      services: true,\r\n      products: true,\r\n      banner: true,\r\n      dealProduct: true,\r\n    },\r\n    corporate: {\r\n      corporateBanner: true,\r\n      corporateServices: true,\r\n      corporateTestimonials: false,\r\n      corporatePartners: false,\r\n    },\r\n  })\r\n\r\n  // Hardcoded admin token for testing\r\n  const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NzZhYTJmYzc3YWY4ODU3Njk1ZDA5MiIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1MjYwNzMyMCwiZXhwIjoxNzUzMjEyMTIwfQ.ugFuaDCq_ewqIE-dZaql3BB91kaXBIxE0TQmqdYnagI'\r\n\r\n  // ========== HIERARCHICAL DATA MANAGEMENT HELPERS ==========\r\n  \r\n  // Get current counts for validation\r\n  const getCurrentCounts = () => {\r\n    // Handle both old array structure and new object structure\r\n    let mainCategoriesCount = 0\r\n    let totalSubcategoriesCount = 0\r\n    let selectedCategorySubCount = 0\r\n    const subcategoryCounts = {}\r\n    \r\n    if (Array.isArray(categoryConfig.categories)) {\r\n      // Old structure: array of category objects\r\n      mainCategoriesCount = categoryConfig.categories.filter(cat => cat.enabled).length\r\n      \r\n      categoryConfig.categories.forEach(category => {\r\n        const subCount = category.subcategories ? category.subcategories.filter(sub => sub.enabled).length : 0\r\n        subcategoryCounts[category.categoryId] = subCount\r\n        totalSubcategoriesCount += subCount\r\n        \r\n        // Get subcategory count for currently selected main category\r\n        if (selectedMainCategory && category.categoryId === selectedMainCategory) {\r\n          selectedCategorySubCount = subCount\r\n        }\r\n      })\r\n    } else if (typeof categoryConfig.categories === 'object' && categoryConfig.categories !== null) {\r\n      // New structure: object with category IDs as keys\r\n      mainCategoriesCount = Object.keys(categoryConfig.categories).filter(\r\n        categoryId => categoryConfig.categories[categoryId]?.selected\r\n      ).length\r\n      \r\n      Object.keys(categoryConfig.categories).forEach(categoryId => {\r\n        const categoryData = categoryConfig.categories[categoryId]\r\n        let subCount = 0\r\n        \r\n        if (categoryData && categoryData.subcategories) {\r\n          subCount = Object.keys(categoryData.subcategories).filter(\r\n            subId => categoryData.subcategories[subId]?.selected\r\n          ).length\r\n        }\r\n        \r\n        subcategoryCounts[categoryId] = subCount\r\n        totalSubcategoriesCount += subCount\r\n        \r\n        // Get subcategory count for currently selected main category\r\n        if (selectedMainCategory && categoryId === selectedMainCategory) {\r\n          selectedCategorySubCount = subCount\r\n        }\r\n      })\r\n    } else {\r\n      // Fallback: use categoryIds for backward compatibility\r\n      if (availableCategories.length > 0) {\r\n        mainCategoriesCount = categoryConfig.categoryIds ? \r\n          categoryConfig.categoryIds.filter(id => \r\n            availableCategories.some(cat => cat.id === id && !cat.parent)\r\n          ).length : 0\r\n        \r\n        totalSubcategoriesCount = categoryConfig.categoryIds ? \r\n          categoryConfig.categoryIds.filter(id => \r\n            subcategories.some(sub => sub.id === id)\r\n          ).length : 0\r\n          \r\n        selectedCategorySubCount = selectedMainCategory && categoryConfig.categoryIds ? \r\n          categoryConfig.categoryIds.filter(id => \r\n            subcategories.some(sub => sub.id === id && \r\n              (sub.parent?._id === selectedMainCategory || sub.parent === selectedMainCategory)\r\n            )\r\n          ).length : 0\r\n      }\r\n    }\r\n    \r\n    return { \r\n      mainCategoriesCount, \r\n      subcategoryCounts, \r\n      totalSubcategoriesCount,\r\n      selectedCategorySubCount \r\n    }\r\n  }\r\n\r\n  // Check if we can select more main categories\r\n  const canSelectMoreMainCategories = () => {\r\n    const { mainCategoriesCount } = getCurrentCounts()\r\n    return mainCategoriesCount < MAX_MAIN_CATEGORIES\r\n  }\r\n\r\n  // Check if we can select more subcategories for a specific category\r\n  const canSelectMoreSubcategories = (categoryId) => {\r\n    const { subcategoryCounts } = getCurrentCounts()\r\n    const currentCount = subcategoryCounts[categoryId] || 0\r\n    return currentCount < MAX_SUBCATEGORIES_PER_CATEGORY\r\n  }\r\n\r\n  // Check if a main category is selected\r\n  const isMainCategorySelected = (categoryId) => {\r\n    if (Array.isArray(categoryConfig.categories)) {\r\n      // Old structure\r\n      const category = categoryConfig.categories.find(cat => cat.categoryId === categoryId)\r\n      return category ? category.enabled : false\r\n    } else if (typeof categoryConfig.categories === 'object') {\r\n      // New structure\r\n      return categoryConfig.categories[categoryId]?.selected || false\r\n    } else {\r\n      // Fallback\r\n      return categoryConfig.categoryIds ? categoryConfig.categoryIds.includes(categoryId) : false\r\n    }\r\n  }\r\n\r\n  // Check if a subcategory is selected\r\n  const isSubcategorySelected = (subcategoryId, parentCategoryId = null) => {\r\n    if (Array.isArray(categoryConfig.categories)) {\r\n      // Old structure\r\n      return categoryConfig.categories.some(category => \r\n        category.subcategories && category.subcategories.some(sub => sub.categoryId === subcategoryId && sub.enabled)\r\n      )\r\n    } else if (typeof categoryConfig.categories === 'object' && parentCategoryId) {\r\n      // New structure\r\n      return categoryConfig.categories[parentCategoryId]?.subcategories?.[subcategoryId]?.selected || false\r\n    } else {\r\n      // Fallback\r\n      return categoryConfig.categoryIds ? categoryConfig.categoryIds.includes(subcategoryId) : false\r\n    }\r\n  }\r\n\r\n  // Find which main category a subcategory belongs to\r\n  const findParentCategory = (subcategoryId) => {\r\n    const subcategory = subcategories.find(sub => sub.id === subcategoryId)\r\n    return subcategory?.parent?._id || subcategory?.parent\r\n  }\r\n\r\n  // Update hierarchical category selection\r\n  // Function removed - using simpler handleCategoryToggle approach\r\n\r\n  // Transform hierarchical data for backend save\r\n  const transformForSave = () => {\r\n    const saveData = {\r\n      enabled: categoryConfig.enabled,\r\n      maxCategories: categoryConfig.maxCategories,\r\n      layout: categoryConfig.layout,\r\n      showSubcategories: categoryConfig.showSubcategories,\r\n      categories: []\r\n    }\r\n    \r\n    // Flatten hierarchical structure for backend\r\n    categoryConfig.categories.forEach(category => {\r\n      if (category.enabled) {\r\n        saveData.categories.push({\r\n          categoryId: category.categoryId,\r\n          enabled: true,\r\n          order: category.order,\r\n          type: 'main'\r\n        })\r\n      }\r\n      \r\n      category.subcategories.forEach(subcategory => {\r\n        if (subcategory.enabled) {\r\n          saveData.categories.push({\r\n            categoryId: subcategory.categoryId,\r\n            enabled: true,\r\n            order: subcategory.order,\r\n            type: 'subcategory',\r\n            parentId: category.categoryId\r\n          })\r\n        }\r\n      })\r\n    })\r\n    \r\n    // Sort by order\r\n    saveData.categories.sort((a, b) => a.order - b.order)\r\n    \r\n    console.log('💾 Data prepared for save:', saveData)\r\n    return saveData\r\n  }\r\n\r\n  // Load page configuration\r\n  const loadPageConfig = async (pageKey) => {\r\n    try {\r\n      setLoading(true)\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      const response = await get(`/api/pages/${pageKey}`)\r\n      console.log('Page config response:', response)\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      const actualData = response.data // This contains the backend response\r\n      \r\n      if (actualData && actualData.success) {\r\n        setPageConfig(actualData.data)\r\n        \r\n        // Extract category section config\r\n        const categorySection = actualData.data.sections.find(s => s.sectionType === 'categorySection')\r\n        if (categorySection && categorySection.config) {\r\n          // Convert the saved flat structure back to hierarchical state\r\n          const hierarchicalConfig = {\r\n            enabled: categorySection.enabled || false,\r\n            maxCategories: categorySection.config.maxCategories || 10,\r\n            layout: categorySection.config.layout || 'grid',\r\n            showSubcategories: categorySection.config.showSubcategories || true,\r\n            categories: {}\r\n          }\r\n          \r\n          // Rebuild hierarchical structure from saved config\r\n          if (categorySection.config.categories && Array.isArray(categorySection.config.categories)) {\r\n            categorySection.config.categories.forEach(cat => {\r\n              if (cat.categoryId) {\r\n                hierarchicalConfig.categories[cat.categoryId] = {\r\n                  selected: cat.enabled || false,\r\n                  order: cat.order || 0,\r\n                  subcategories: {}\r\n                }\r\n                \r\n                // Add subcategories if they exist\r\n                if (cat.subcategories && Array.isArray(cat.subcategories)) {\r\n                  cat.subcategories.forEach(sub => {\r\n                    if (sub.subcategoryId) {\r\n                      hierarchicalConfig.categories[cat.categoryId].subcategories[sub.subcategoryId] = {\r\n                        selected: sub.enabled || false,\r\n                        order: sub.order || 0\r\n                      }\r\n                    }\r\n                  })\r\n                }\r\n              }\r\n            })\r\n          }\r\n          \r\n          setCategoryConfig(hierarchicalConfig)\r\n          console.log('📂 Loaded hierarchical config:', hierarchicalConfig)\r\n          \r\n          // Update visibility state\r\n          setVisibleSections(prev => ({\r\n            ...prev,\r\n            [pageKey]: {\r\n              ...prev[pageKey],\r\n              giftCategories: categorySection.enabled\r\n            }\r\n          }))\r\n        } else {\r\n          // Initialize with default hierarchical structure if no config exists\r\n          setCategoryConfig({\r\n            enabled: false,\r\n            maxCategories: 10,\r\n            layout: 'grid',\r\n            showSubcategories: true,\r\n            categories: {}\r\n          })\r\n        }\r\n      }\r\n      \r\n      setError('')\r\n    } catch (err) {\r\n      console.error('Load page config error:', err)\r\n      setError('Failed to load page configuration: ' + err.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // Load available categories (same approach as CategoriesPage.js)\r\n  const loadCategories = async () => {\r\n    try {\r\n      console.log('🔄 === LOADING CATEGORIES DEBUG ===')\r\n      console.log('1. Setting auth token...')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      console.log('2. Making API call to:', CATEGORY.GET_ALL)\r\n      const response = await get(CATEGORY.GET_ALL)\r\n      \r\n      console.log('3. Raw API response received:')\r\n      console.log('   - Response object:', response)\r\n      console.log('   - Response type:', typeof response)\r\n      console.log('   - Response keys:', Object.keys(response || {}))\r\n      console.log('   - Response.success:', response?.success)\r\n      console.log('   - Response.data:', response?.data)\r\n      console.log('   - Response.data type:', typeof response?.data)\r\n      console.log('   - Response.data is array:', Array.isArray(response?.data))\r\n      \r\n      if (!response.success) {\r\n        console.error('4. ❌ API response failed:', response.error)\r\n        throw new Error(response.error || 'Failed to fetch categories')\r\n      }\r\n      \r\n      console.log('4. ✅ API response successful')\r\n      console.log('5. Processing response.data...')\r\n      console.log('   - Raw response.data:', JSON.stringify(response.data, null, 2))\r\n      \r\n      // Ensure response.data is an array\r\n      let categoriesData = []\r\n      if (Array.isArray(response.data)) {\r\n        console.log('   - Response.data is direct array with', response.data.length, 'items')\r\n        categoriesData = response.data\r\n      } else if (response.data && typeof response.data === 'object') {\r\n        console.log('   - Response.data is object, checking for nested arrays...')\r\n        if (Array.isArray(response.data.categories)) {\r\n          console.log('   - Found response.data.categories array with', response.data.categories.length, 'items')\r\n          categoriesData = response.data.categories\r\n        } else if (Array.isArray(response.data.data)) {\r\n          console.log('   - Found response.data.data array with', response.data.data.length, 'items')\r\n          categoriesData = response.data.data\r\n        } else {\r\n          console.log('   - No recognizable array found in response.data')\r\n          categoriesData = []\r\n        }\r\n      }\r\n      \r\n      console.log('6. Categories data to process:')\r\n      console.log('   - Array length:', categoriesData.length)\r\n      console.log('   - Sample items (first 3):')\r\n      categoriesData.slice(0, 3).forEach((cat, index) => {\r\n        console.log(`     ${index + 1}.`, cat)\r\n      })\r\n      \r\n      // Transform categories for display in the admin panel\r\n      console.log('7. Transforming categories...')\r\n      const transformedCategories = categoriesData.map((cat, index) => {\r\n        console.log(`   - Transforming category ${index + 1}:`, {\r\n          originalId: cat._id,\r\n          originalName: cat.name,\r\n          hasParent: !!cat.parent,\r\n          parentInfo: cat.parent\r\n        })\r\n        \r\n        return {\r\n          id: cat.id || cat._id,\r\n          value: cat.id || cat._id,\r\n          label: cat.name,\r\n          name: cat.name,\r\n          image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n          description: cat.description || '',\r\n          parent: cat.parent\r\n        }\r\n      })\r\n      \r\n      console.log('8. Final transformed categories:')\r\n      console.log('   - Total transformed:', transformedCategories.length)\r\n      console.log('   - Main categories:', transformedCategories.filter(cat => !cat.parent).length)\r\n      console.log('   - Sub categories:', transformedCategories.filter(cat => cat.parent).length)\r\n      console.log('   - Full transformed data:', transformedCategories)\r\n      \r\n      console.log('9. Setting availableCategories state...')\r\n      setAvailableCategories(transformedCategories)\r\n      setError('')\r\n      \r\n      console.log('10. ✅ Categories loaded successfully!')\r\n      console.log('🔚 === END LOADING CATEGORIES DEBUG ===')\r\n      \r\n    } catch (err) {\r\n      console.error('❌ === LOAD CATEGORIES ERROR ===')\r\n      console.error('Error details:', {\r\n        message: err.message,\r\n        stack: err.stack,\r\n        name: err.name\r\n      })\r\n      console.error('Raw error object:', err)\r\n      setError('Failed to load categories: ' + err.message)\r\n      setAvailableCategories([])\r\n    }\r\n  }\r\n\r\n  // Load subcategories from separate subcategories collection\r\n  const loadSubcategories = async () => {\r\n    try {\r\n      console.log('🔄 === LOADING SUBCATEGORIES DEBUG ===')\r\n      console.log('1. Setting auth token...')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      \r\n      console.log('2. Making API call to:', SUBCATEGORY.GET_ALL)\r\n      const response = await get(SUBCATEGORY.GET_ALL)\r\n      \r\n      console.log('3. Raw subcategories response:')\r\n      console.log('   - Response object:', response)\r\n      console.log('   - Response.success:', response?.success)\r\n      console.log('   - Response.data:', response?.data)\r\n      console.log('   - Response.data is array:', Array.isArray(response?.data))\r\n      \r\n      if (!response.success) {\r\n        console.error('4. ❌ Subcategories API response failed:', response.error)\r\n        throw new Error(response.error || 'Failed to fetch subcategories')\r\n      }\r\n      \r\n      console.log('4. ✅ Subcategories API response successful')\r\n      console.log('5. Processing subcategories data...')\r\n      \r\n      let subcategoriesData = []\r\n      if (Array.isArray(response.data)) {\r\n        subcategoriesData = response.data\r\n      } else if (response.data && Array.isArray(response.data.data)) {\r\n        subcategoriesData = response.data.data\r\n      }\r\n      \r\n      console.log('6. Subcategories data to process:')\r\n      console.log('   - Array length:', subcategoriesData.length)\r\n      console.log('   - Sample items (first 3):')\r\n      subcategoriesData.slice(0, 3).forEach((subcat, index) => {\r\n        console.log(`     ${index + 1}.`, {\r\n          id: subcat._id,\r\n          name: subcat.name,\r\n          parent: subcat.parent,\r\n          status: subcat.status\r\n        })\r\n      })\r\n      \r\n      // Transform subcategories for display\r\n      const transformedSubcategories = subcategoriesData.map((subcat, index) => {\r\n        console.log(`   - Transforming subcategory ${index + 1}:`, {\r\n          originalId: subcat._id,\r\n          originalName: subcat.name,\r\n          parentId: subcat.parent?._id || subcat.parent,\r\n          parentName: subcat.parent?.name\r\n        })\r\n        \r\n        return {\r\n          id: subcat.id || subcat._id,\r\n          value: subcat.id || subcat._id,\r\n          label: subcat.name,\r\n          name: subcat.name,\r\n          image: subcat.image?.url || '/assets/img/product/category/default-subcategory.svg',\r\n          description: subcat.description || '',\r\n          parent: subcat.parent,\r\n          status: subcat.status\r\n        }\r\n      })\r\n      \r\n      console.log('7. Final transformed subcategories:')\r\n      console.log('   - Total transformed:', transformedSubcategories.length)\r\n      console.log('   - Full transformed data:', transformedSubcategories)\r\n      \r\n      console.log('8. Setting subcategories state...')\r\n      setSubcategories(transformedSubcategories)\r\n      \r\n      console.log('9. ✅ Subcategories loaded successfully!')\r\n      console.log('🔚 === END LOADING SUBCATEGORIES DEBUG ===')\r\n      \r\n    } catch (err) {\r\n      console.error('❌ === LOAD SUBCATEGORIES ERROR ===')\r\n      console.error('Error details:', {\r\n        message: err.message,\r\n        stack: err.stack,\r\n        name: err.name\r\n      })\r\n      setSubcategories([])\r\n    }\r\n  }\r\n\r\n  // Save category section configuration\r\n  const saveCategoryConfig = async () => {\r\n    console.log('🚀 === SAVE CATEGORY CONFIG START ===')\r\n    console.log('1. Save function triggered')\r\n    \r\n    try {\r\n      console.log('2. Setting loading state to true')\r\n      setLoading(true)\r\n      \r\n      console.log('3. Setting auth token in localStorage')\r\n      localStorage.setItem('authToken', ADMIN_TOKEN)\r\n      console.log('   - Auth token set:', ADMIN_TOKEN.substring(0, 20) + '...')\r\n      \r\n      console.log('4. Getting current counts for validation')\r\n      const { mainCategoriesCount } = getCurrentCounts()\r\n      console.log('   - Main categories count:', mainCategoriesCount)\r\n      console.log('   - MIN_MAIN_CATEGORIES:', MIN_MAIN_CATEGORIES)\r\n      console.log('   - MAX_MAIN_CATEGORIES:', MAX_MAIN_CATEGORIES)\r\n      \r\n      if (mainCategoriesCount < MIN_MAIN_CATEGORIES) {\r\n        console.log('❌ Validation failed: Too few main categories')\r\n        setError(`Please select at least ${MIN_MAIN_CATEGORIES} main category before saving.`)\r\n        return\r\n      }\r\n      \r\n      if (mainCategoriesCount > MAX_MAIN_CATEGORIES) {\r\n        console.log('❌ Validation failed: Too many main categories')\r\n        setError(`Too many main categories selected. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n        return\r\n      }\r\n      \r\n      console.log('✅ Validation passed')\r\n      \r\n      console.log('5. Current categoryConfig state before transform:')\r\n      console.log('   - categoryConfig.enabled:', categoryConfig.enabled)\r\n      console.log('   - categoryConfig.maxCategories:', categoryConfig.maxCategories)\r\n      console.log('   - categoryConfig.layout:', categoryConfig.layout)\r\n      console.log('   - categoryConfig.showSubcategories:', categoryConfig.showSubcategories)\r\n      console.log('   - categoryConfig.categories:', categoryConfig.categories)\r\n      console.log('   - categoryConfig.categoryIds:', categoryConfig.categoryIds)\r\n      \r\n      // Transform hierarchical data for save\r\n      console.log('6. Transforming data for save...')\r\n      const configData = transformForSave()\r\n      console.log('7. Transformed config data:')\r\n      console.log('   - Full configData object:', JSON.stringify(configData, null, 2))\r\n      console.log('   - configData.enabled:', configData.enabled)\r\n      console.log('   - configData.categories length:', configData.categories?.length || 0)\r\n      \r\n      console.log('8. Preparing API request')\r\n      const apiEndpoint = '/api/pages/home/sections/category'\r\n      console.log('   - API endpoint:', apiEndpoint)\r\n      console.log('   - Request method: PUT')\r\n      console.log('   - Request data:', configData)\r\n      console.log('   - Request headers will include auth token')\r\n      \r\n      console.log('9. Making API request...')\r\n      const response = await put(apiEndpoint, configData)\r\n      console.log('10. API response received:')\r\n      console.log('    - Raw response:', response)\r\n      console.log('    - Response type:', typeof response)\r\n      console.log('    - Response keys:', Object.keys(response || {}))\r\n      console.log('    - Response.data:', response?.data)\r\n      console.log('    - Response.status:', response?.status)\r\n      console.log('    - Response.success:', response?.success)\r\n      \r\n      // Handle the double-wrapped response from apiService\r\n      console.log('11. Processing response data...')\r\n      const actualData = response.data // This contains the backend response\r\n      console.log('    - actualData:', actualData)\r\n      console.log('    - actualData type:', typeof actualData)\r\n      console.log('    - actualData.success:', actualData?.success)\r\n      console.log('    - actualData.message:', actualData?.message)\r\n      \r\n      if (actualData && actualData.success) {\r\n        console.log('✅ Save successful!')\r\n        setSuccess('Category section configuration saved successfully!')\r\n        setTimeout(() => setSuccess(''), 3000)\r\n        setShowCategoryConfig(false)\r\n        \r\n        // Trigger refresh notification (optional)\r\n        try {\r\n          console.log('12. Triggering homepage refresh...')\r\n          await get('/pages/home/refresh/categorySection')\r\n          console.log('    - Homepage refresh successful')\r\n        } catch (refreshError) {\r\n          console.log('⚠️ Refresh notification failed, but save was successful:', refreshError)\r\n        }\r\n        \r\n        console.log('13. Reloading page config...')\r\n        await loadPageConfig(selectedPage) // Reload to get updated config\r\n        console.log('14. Page config reloaded')\r\n      } else {\r\n        console.log('❌ Save failed - API returned unsuccessful response')\r\n        console.log('    - actualData:', actualData)\r\n        const errorMessage = actualData?.message || 'Unknown error'\r\n        console.log('    - Error message:', errorMessage)\r\n        setError('Failed to save configuration: ' + errorMessage)\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('❌ === SAVE CATEGORY CONFIG ERROR ===')\r\n      console.error('Error caught in try-catch:')\r\n      console.error('   - Error object:', err)\r\n      console.error('   - Error message:', err.message)\r\n      console.error('   - Error name:', err.name)\r\n      console.error('   - Error stack:', err.stack)\r\n      \r\n      if (err.response) {\r\n        console.error('   - HTTP Response Error Details:')\r\n        console.error('     - Status:', err.response.status)\r\n        console.error('     - Status text:', err.response.statusText)\r\n        console.error('     - Response data:', err.response.data)\r\n        console.error('     - Response headers:', err.response.headers)\r\n      }\r\n      \r\n      if (err.request) {\r\n        console.error('   - Request Error Details:')\r\n        console.error('     - Request object:', err.request)\r\n      }\r\n      \r\n      setError('Failed to save category configuration: ' + err.message)\r\n    } finally {\r\n      console.log('15. Setting loading state to false')\r\n      setLoading(false)\r\n      console.log('🔚 === SAVE CATEGORY CONFIG END ===')\r\n    }\r\n  }\r\n\r\n  // Toggle section visibility\r\n  const handleToggleSection = async (page, section) => {\r\n    if (section === 'giftCategories') {\r\n      // For category section, update the actual config\r\n      setCategoryConfig(prev => ({ ...prev, enabled: !prev.enabled }))\r\n      return\r\n    }\r\n    \r\n    const newVisibility = {\r\n      ...visibleSections,\r\n      [page]: {\r\n        ...visibleSections[page],\r\n        [section]: !visibleSections[page][section],\r\n      }\r\n    }\r\n    \r\n    setVisibleSections(newVisibility)\r\n  }\r\n\r\n  // Open category configuration modal\r\n  const openCategoryConfig = () => {\r\n    setShowCategoryConfig(true)\r\n    // Reset to first main category when opening modal\r\n    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n    if (mainCategories.length > 0) {\r\n      setSelectedMainCategory(mainCategories[0].id)\r\n    }\r\n  }\r\n\r\n  // Handle category selection with validation - SIMPLIFIED for current structure\r\n  const handleCategoryToggle = (categoryId, parentCategoryId = null) => {\r\n    const isMainCategory = !parentCategoryId && availableCategories.some(cat => cat.id === categoryId && !cat.parent)\r\n    \r\n    console.log('🎯 Category toggle triggered:', { categoryId, parentCategoryId, isMainCategory })\r\n    \r\n    if (isMainCategory) {\r\n      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n      const currentMainCount = categoryConfig.categoryIds.filter(id => \r\n        availableCategories.some(cat => cat.id === id && !cat.parent)\r\n      ).length\r\n      \r\n      console.log('📊 Main category status:', { isCurrentlySelected, currentCount: currentMainCount })\r\n      \r\n      // Validation for main categories\r\n      if (!isCurrentlySelected) {\r\n        // Trying to select\r\n        if (currentMainCount >= MAX_MAIN_CATEGORIES) {\r\n          setError(`Cannot select more main categories. Maximum ${MAX_MAIN_CATEGORIES} allowed.`)\r\n          return\r\n        }\r\n      } else {\r\n        // Trying to deselect\r\n        if (currentMainCount <= MIN_MAIN_CATEGORIES) {\r\n          setError(`Cannot deselect this category. At least ${MIN_MAIN_CATEGORIES} main category must be selected.`)\r\n          return\r\n        }\r\n      }\r\n      \r\n      // Clear any existing errors\r\n      setError('')\r\n      \r\n      // Update categoryIds array\r\n      setCategoryConfig(prev => {\r\n        if (!isCurrentlySelected) {\r\n          // Add to selection\r\n          return {\r\n            ...prev,\r\n            categoryIds: [...prev.categoryIds, categoryId]\r\n          }\r\n        } else {\r\n          // Remove from selection (and remove all its subcategories too)\r\n          const subcategoriesOfThisCategory = subcategories\r\n            .filter(sub => (sub.parent?._id || sub.parent) === categoryId)\r\n            .map(sub => sub.id)\r\n          \r\n          return {\r\n            ...prev,\r\n            categoryIds: prev.categoryIds.filter(id => \r\n              id !== categoryId && !subcategoriesOfThisCategory.includes(id)\r\n            )\r\n          }\r\n        }\r\n      })\r\n      \r\n    } else {\r\n      // Subcategory logic\r\n      const isCurrentlySelected = categoryConfig.categoryIds.includes(categoryId)\r\n      const parentId = parentCategoryId || findParentCategory(categoryId)\r\n      \r\n      console.log('📊 Subcategory status:', { isCurrentlySelected, parentId })\r\n      \r\n      if (!isCurrentlySelected && parentId) {\r\n        // Check subcategory limit for this parent\r\n        const currentSubCount = categoryConfig.categoryIds.filter(id => \r\n          subcategories.some(sub => sub.id === id && (sub.parent?._id || sub.parent) === parentId)\r\n        ).length\r\n        \r\n        if (currentSubCount >= MAX_SUBCATEGORIES_PER_CATEGORY) {\r\n          const parentName = availableCategories.find(cat => cat.id === parentId)?.name || 'this category'\r\n          setError(`Cannot select more subcategories for ${parentName}. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} per category allowed.`)\r\n          return\r\n        }\r\n      }\r\n      \r\n      // Clear any existing errors\r\n      setError('')\r\n      \r\n      // Update categoryIds array\r\n      setCategoryConfig(prev => {\r\n        if (!isCurrentlySelected) {\r\n          // Add to selection\r\n          let newIds = [...prev.categoryIds, categoryId]\r\n          \r\n          // Also ensure parent is selected\r\n          if (parentId && !prev.categoryIds.includes(parentId)) {\r\n            newIds.push(parentId)\r\n          }\r\n          \r\n          return {\r\n            ...prev,\r\n            categoryIds: newIds\r\n          }\r\n        } else {\r\n          // Remove from selection\r\n          return {\r\n            ...prev,\r\n            categoryIds: prev.categoryIds.filter(id => id !== categoryId)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  // Handle max categories change\r\n  const handleMaxCategoriesChange = (value) => {\r\n    const numValue = parseInt(value) || 0\r\n    setCategoryConfig(prev => ({ ...prev, maxCategories: numValue }))\r\n  }\r\n\r\n  // Load data when page changes\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      await loadPageConfig(selectedPage)\r\n      await loadCategories()\r\n      await loadSubcategories()\r\n    }\r\n    loadData()\r\n  }, [selectedPage])\r\n\r\n  // Get sections for current page\r\n  const getCurrentSections = () => {\r\n    return selectedPage === \"home\" ? homeSections : corporateSections\r\n  }\r\n\r\n  // Render category configuration modal\r\n  const renderCategoryConfigModal = () => {\r\n    if (!showCategoryConfig) return null\r\n\r\n    console.log('🎨 === RENDERING CATEGORY MODAL DEBUG ===')\r\n    console.log('1. Modal render triggered')\r\n    console.log('2. availableCategories state:')\r\n    console.log('   - Length:', availableCategories.length)\r\n    console.log('   - Is array:', Array.isArray(availableCategories))\r\n    console.log('   - Full data:', availableCategories)\r\n    \r\n    const mainCategories = availableCategories.filter(cat => !cat.parent)\r\n    const subCategories = subcategories // Use the separate subcategories state\r\n    \r\n    console.log('3. Category breakdown:')\r\n    console.log('   - Main categories:', mainCategories.length, mainCategories)\r\n    console.log('   - Sub categories:', subCategories.length, subCategories)\r\n    \r\n    // Get subcategories for selected main category\r\n    const getSubcategoriesForCategory = (categoryId) => {\r\n      console.log('🔍 Getting subcategories for category ID:', categoryId)\r\n      const filtered = subCategories.filter(subCat => {\r\n        const parentId = subCat.parent?._id || subCat.parent\r\n        console.log(`   - Checking subcategory \"${subCat.name}\": parent=${parentId}, matches=${parentId === categoryId}`)\r\n        return parentId === categoryId\r\n      })\r\n      console.log(`   - Found ${filtered.length} subcategories for category ${categoryId}:`, filtered)\r\n      return filtered\r\n    }\r\n\r\n    // Auto-select first main category if none selected\r\n    if (!selectedMainCategory && mainCategories.length > 0) {\r\n      setSelectedMainCategory(mainCategories[0].id)\r\n    }\r\n\r\n    const selectedCategorySubcategories = selectedMainCategory ? \r\n      getSubcategoriesForCategory(selectedMainCategory) : []\r\n\r\n    return (\r\n      <div className=\"modal show d-block\" style={{ backgroundColor: 'rgba(0,0,0,0.5)' }}>\r\n        <div className=\"modal-dialog modal-xl\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\">\r\n                <i className=\"bi bi-grid-3x3-gap me-2\"></i>\r\n                Category Section Configuration\r\n              </h5>\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn-close\" \r\n                onClick={() => setShowCategoryConfig(false)}\r\n              ></button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {/* Enable/Disable Section */}\r\n              <div className=\"row mb-4\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"form-check form-switch\">\r\n                    <input \r\n                      className=\"form-check-input\" \r\n                      type=\"checkbox\" \r\n                      id=\"enableCategorySection\"\r\n                      checked={categoryConfig.enabled}\r\n                      onChange={(e) => setCategoryConfig(prev => ({ ...prev, enabled: e.target.checked }))}\r\n                    />\r\n                    <label className=\"form-check-label fw-semibold\" htmlFor=\"enableCategorySection\">\r\n                      Enable Category Section\r\n                    </label>\r\n                  </div>\r\n                  <small className=\"text-muted\">Turn on/off the category section on the homepage</small>\r\n                </div>\r\n              </div>\r\n\r\n              {categoryConfig.enabled && (\r\n                <>\r\n                  {/* Selection Summary and Validation */}\r\n                  <div className=\"row mb-4\">\r\n                    <div className=\"col-12\">\r\n                      <div className=\"card border-info\">\r\n                        <div className=\"card-header bg-info bg-opacity-10\">\r\n                          <h6 className=\"mb-0 text-info\">\r\n                            <i className=\"bi bi-info-circle me-2\"></i>\r\n                            Selection Summary\r\n                          </h6>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                              <div className={`d-flex justify-content-between align-items-center p-2 rounded ${getCurrentCounts().mainCategoriesCount >= MIN_MAIN_CATEGORIES && getCurrentCounts().mainCategoriesCount <= MAX_MAIN_CATEGORIES ? 'bg-success bg-opacity-10 text-success' : 'bg-warning bg-opacity-10 text-warning'}`}>\r\n                                <span className=\"fw-semibold\">\r\n                                  <i className=\"bi bi-grid me-1\"></i>\r\n                                  Main Categories:\r\n                                </span>\r\n                                <span className=\"badge bg-primary\">\r\n                                  {getCurrentCounts().mainCategoriesCount} / {MAX_MAIN_CATEGORIES}\r\n                                </span>\r\n                              </div>\r\n                              {getCurrentCounts().mainCategoriesCount < MIN_MAIN_CATEGORIES && (\r\n                                <small className=\"text-warning\">\r\n                                  <i className=\"bi bi-exclamation-triangle me-1\"></i>\r\n                                  Minimum {MIN_MAIN_CATEGORIES} main category required\r\n                                </small>\r\n                              )}\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                              <div className=\"d-flex justify-content-between align-items-center p-2 rounded bg-info bg-opacity-10 text-info\">\r\n                                <span className=\"fw-semibold\">\r\n                                  <i className=\"bi bi-tags me-1\"></i>\r\n                                  Total Subcategories:\r\n                                </span>\r\n                                <span className=\"badge bg-info\">\r\n                                  {getCurrentCounts().totalSubcategoriesCount}\r\n                                </span>\r\n                              </div>\r\n                              {selectedMainCategory && (\r\n                                <small className=\"text-muted\">\r\n                                  <i className=\"bi bi-arrow-right me-1\"></i>\r\n                                  Selected category: {getCurrentCounts().selectedCategorySubCount} / {MAX_SUBCATEGORIES_PER_CATEGORY}\r\n                                </small>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {categoryConfig.enabled && (\r\n                <>\r\n                  {/* Configuration Options */}\r\n                  <div className=\"row mb-4\">\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label fw-semibold\">Maximum Categories to Show</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        className=\"form-control\"\r\n                        min=\"1\"\r\n                        max=\"20\"\r\n                        value={categoryConfig.maxCategories}\r\n                        onChange={(e) => handleMaxCategoriesChange(e.target.value)}\r\n                      />\r\n                      <small className=\"text-muted\">Limit how many categories appear (0 = no limit)</small>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                      <label className=\"form-label fw-semibold\">Layout Style</label>\r\n                      <select \r\n                        className=\"form-select\"\r\n                        value={categoryConfig.layout}\r\n                        onChange={(e) => setCategoryConfig(prev => ({ ...prev, layout: e.target.value }))}\r\n                      >\r\n                        <option value=\"grid\">Grid Layout</option>\r\n                        <option value=\"carousel\">Carousel</option>\r\n                        <option value=\"list\">List View</option>\r\n                      </select>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                      <div className=\"form-check mt-4\">\r\n                        <input \r\n                          className=\"form-check-input\" \r\n                          type=\"checkbox\" \r\n                          id=\"showSubcategories\"\r\n                          checked={categoryConfig.showSubcategories}\r\n                          onChange={(e) => setCategoryConfig(prev => ({ ...prev, showSubcategories: e.target.checked }))}\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"showSubcategories\">\r\n                          Show subcategories on hover\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Selection Summary */}\r\n                  <div className=\"row mb-4\">\r\n                    <div className=\"col-12\">\r\n                      <div className=\"alert alert-info d-flex align-items-center\">\r\n                        <i className=\"bi bi-info-circle me-2\"></i>\r\n                        <div>\r\n                          <strong>Selection Summary:</strong> {categoryConfig.categoryIds.length} categories selected \r\n                          ({categoryConfig.categoryIds.filter(id => mainCategories.some(cat => cat.id === id)).length} main categories, {categoryConfig.categoryIds.filter(id => subCategories.some(cat => cat.id === id)).length} subcategories)\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Category Selection Interface */}\r\n                  <div className=\"row mb-4\">\r\n                    <div className=\"col-12\">\r\n                      <label className=\"form-label fw-semibold mb-3\">Select Categories and Subcategories</label>\r\n                      \r\n                      {mainCategories.length > 0 ? (\r\n                        <div className=\"row\">\r\n                          {/* Left Side - Main Categories */}\r\n                          <div className=\"col-md-6\">\r\n                            <div className=\"card\">\r\n                              <div className=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n                                <h6 className=\"mb-0\">\r\n                                  <i className=\"bi bi-grid text-primary me-2\"></i>\r\n                                  Main Categories ({mainCategories.length})\r\n                                </h6>\r\n                                <span className=\"badge bg-primary\">\r\n                                  {getCurrentCounts().mainCategoriesCount} selected\r\n                                </span>\r\n                              </div>\r\n                              <div className=\"card-body p-0\">\r\n                                <div className=\"list-group list-group-flush\" style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n                                  {mainCategories.map((category, index) => {\r\n                                    // Use the flat categoryIds array for now since categories is still an array\r\n                                    const isSelected = categoryConfig.categoryIds.includes(category.id)\r\n                                    const isActiveTab = selectedMainCategory === category.id\r\n                                    const subcategoryCount = getSubcategoriesForCategory(category.id).length\r\n                                    const selectedSubcategoryCount = getSubcategoriesForCategory(category.id)\r\n                                      .filter(sub => categoryConfig.categoryIds.includes(sub.id)).length\r\n                                    \r\n                                    return (\r\n                                      <div \r\n                                        key={category.id} \r\n                                        className={`list-group-item list-group-item-action border-0 ${isActiveTab ? 'active' : ''} ${isSelected ? 'bg-primary bg-opacity-10 border-start border-primary border-3' : ''}`}\r\n                                        style={{ cursor: 'pointer' }}\r\n                                        onClick={() => setSelectedMainCategory(category.id)}\r\n                                      >\r\n                                        <div className=\"d-flex align-items-center\">\r\n                                          <div className=\"form-check me-3\" onClick={(e) => e.stopPropagation()}>\r\n                                            <input \r\n                                              className=\"form-check-input\" \r\n                                              type=\"checkbox\" \r\n                                              id={`main-category-${category.id}`}\r\n                                              checked={isSelected}\r\n                                              onChange={() => handleCategoryToggle(category.id)}\r\n                                            />\r\n                                          </div>\r\n                                          \r\n                                          {category.image && (\r\n                                            <img \r\n                                              src={category.image} \r\n                                              alt={category.name}\r\n                                              className=\"me-3 flex-shrink-0 border\"\r\n                                              style={{ width: '42px', height: '42px', objectFit: 'cover', borderRadius: '8px' }}\r\n                                            />\r\n                                          )}\r\n                                          \r\n                                          <div className=\"flex-grow-1\">\r\n                                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                              <div>\r\n                                                <h6 className={`mb-1 fw-semibold ${isActiveTab ? 'text-white' : 'text-dark'}`}>\r\n                                                  <i className=\"bi bi-grid text-primary me-1\" style={{ fontSize: '14px' }}></i>\r\n                                                  {category.name}\r\n                                                </h6>\r\n                                                {category.description && (\r\n                                                  <p className={`mb-1 small ${isActiveTab ? 'text-white-50' : 'text-muted'}`}>\r\n                                                    {category.description}\r\n                                                  </p>\r\n                                                )}\r\n                                                <div className=\"d-flex gap-1 align-items-center\">\r\n                                                  <span className={`badge ${isActiveTab ? 'bg-white text-primary' : 'bg-primary'}`} style={{ fontSize: '9px' }}>\r\n                                                    Main Category\r\n                                                  </span>\r\n                                                  {isSelected && (\r\n                                                    <span className={`badge ${isActiveTab ? 'bg-success text-white' : 'bg-success'}`} style={{ fontSize: '9px' }}>\r\n                                                      <i className=\"bi bi-check-circle me-1\"></i>\r\n                                                      Selected\r\n                                                    </span>\r\n                                                  )}\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className=\"text-end\">\r\n                                                {subcategoryCount > 0 && (\r\n                                                  <div className=\"mb-1\">\r\n                                                    <span className={`badge ${isActiveTab ? 'bg-white text-primary' : 'bg-secondary'}`} style={{ fontSize: '10px' }}>\r\n                                                      {subcategoryCount} subs\r\n                                                    </span>\r\n                                                  </div>\r\n                                                )}\r\n                                                {selectedSubcategoryCount > 0 && (\r\n                                                  <div className=\"mb-1\">\r\n                                                    <span className={`badge ${isActiveTab ? 'bg-success text-white' : 'bg-success'}`} style={{ fontSize: '10px' }}>\r\n                                                      {selectedSubcategoryCount} selected\r\n                                                    </span>\r\n                                                  </div>\r\n                                                )}\r\n                                                <i className={`bi bi-chevron-right ${isActiveTab ? 'text-white' : 'text-muted'}`}></i>\r\n                                              </div>\r\n                                            </div>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    )\r\n                                  })}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          {/* Right Side - Subcategories */}\r\n                          <div className=\"col-md-6\">\r\n                            <div className=\"card\">\r\n                              <div className=\"card-header bg-light d-flex justify-content-between align-items-center\">\r\n                                <h6 className=\"mb-0\">\r\n                                  <i className=\"bi bi-tag text-secondary me-2\"></i>\r\n                                  Subcategories\r\n                                  {selectedMainCategory && (\r\n                                    <span className=\"text-muted ms-2\">\r\n                                      for \"{mainCategories.find(cat => cat.id === selectedMainCategory)?.name}\"\r\n                                    </span>\r\n                                  )}\r\n                                </h6>\r\n                                {selectedCategorySubcategories.length > 0 && (\r\n                                  <span className=\"badge bg-secondary\">\r\n                                    {selectedCategorySubcategories.length} subcategories\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                              <div className=\"card-body p-0\">\r\n                                {selectedMainCategory ? (\r\n                                  selectedCategorySubcategories.length > 0 ? (\r\n                                    <>\r\n                                      {/* Subcategories Stats */}\r\n                                      <div className=\"p-3 bg-light border-bottom\">\r\n                                        <div className=\"row text-center\">\r\n                                          <div className=\"col-6\">\r\n                                            <div className=\"small\">\r\n                                              <strong>{selectedCategorySubcategories.filter(sub => categoryConfig.categoryIds.includes(sub.id)).length}</strong>\r\n                                              <br />\r\n                                              <span className=\"text-muted\">Selected</span>\r\n                                            </div>\r\n                                          </div>\r\n                                          <div className=\"col-6\">\r\n                                            <div className=\"small\">\r\n                                              <strong>{selectedCategorySubcategories.filter(sub => sub.status).length}</strong>\r\n                                              <br />\r\n                                              <span className=\"text-muted\">Active</span>\r\n                                            </div>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n\r\n                                      {/* Quick Actions for Subcategories */}\r\n                                      <div className=\"p-2 border-bottom\">\r\n                                        <div className=\"d-flex gap-1\">\r\n                                          <button \r\n                                            type=\"button\" \r\n                                            className=\"btn btn-outline-success btn-sm\"\r\n                                            onClick={() => {\r\n                                              const currentSubIds = selectedCategorySubcategories.map(cat => cat.id)\r\n                                              setCategoryConfig(prev => ({\r\n                                                ...prev,\r\n                                                categoryIds: [...new Set([...prev.categoryIds, ...currentSubIds])]\r\n                                              }))\r\n                                            }}\r\n                                          >\r\n                                            <i className=\"bi bi-check-all me-1\"></i>\r\n                                            Select All\r\n                                          </button>\r\n                                          \r\n                                          <button \r\n                                            type=\"button\" \r\n                                            className=\"btn btn-outline-secondary btn-sm\"\r\n                                            onClick={() => {\r\n                                              const currentSubIds = selectedCategorySubcategories.map(cat => cat.id)\r\n                                              setCategoryConfig(prev => ({\r\n                                                ...prev,\r\n                                                categoryIds: prev.categoryIds.filter(id => !currentSubIds.includes(id))\r\n                                              }))\r\n                                            }}\r\n                                          >\r\n                                            <i className=\"bi bi-x-circle me-1\"></i>\r\n                                            Clear All\r\n                                          </button>\r\n                                        </div>\r\n                                      </div>\r\n\r\n                                      {/* Subcategories List */}\r\n                                      <div className=\"list-group list-group-flush\" style={{ maxHeight: '350px', overflowY: 'auto' }}>\r\n                                        {selectedCategorySubcategories.map((subcategory, index) => {\r\n                                          // Use the flat categoryIds array for now since categories is still an array\r\n                                          const isSelected = categoryConfig.categoryIds.includes(subcategory.id)\r\n                                          \r\n                                          return (\r\n                                            <div \r\n                                              key={subcategory.id} \r\n                                              className={`list-group-item list-group-item-action border-0 ${isSelected ? 'bg-success bg-opacity-10 border-start border-success border-3' : ''}`}\r\n                                            >\r\n                                              <div className=\"d-flex align-items-center\">\r\n                                                <div className=\"form-check me-3\">\r\n                                                  <input \r\n                                                    className=\"form-check-input form-check-input-success\" \r\n                                                    type=\"checkbox\" \r\n                                                    id={`sub-category-${subcategory.id}`}\r\n                                                    checked={isSelected}\r\n                                                    onChange={() => handleCategoryToggle(subcategory.id, selectedMainCategory)}\r\n                                                  />\r\n                                                </div>\r\n                                                \r\n                                                {subcategory.image && (\r\n                                                  <img \r\n                                                    src={subcategory.image} \r\n                                                    alt={subcategory.name}\r\n                                                    className=\"me-3 flex-shrink-0 border\"\r\n                                                    style={{ width: '36px', height: '36px', objectFit: 'cover', borderRadius: '6px' }}\r\n                                                  />\r\n                                                )}\r\n                                                \r\n                                                <div className=\"flex-grow-1\">\r\n                                                  <div className=\"d-flex justify-content-between align-items-start\">\r\n                                                    <div>\r\n                                                      <h6 className=\"mb-1 text-dark fw-semibold\">\r\n                                                        <i className=\"bi bi-tag text-success me-1\" style={{ fontSize: '12px' }}></i>\r\n                                                        {subcategory.name}\r\n                                                      </h6>\r\n                                                      {subcategory.description && (\r\n                                                        <p className=\"mb-1 text-muted small\">{subcategory.description}</p>\r\n                                                      )}\r\n                                                      <div className=\"d-flex gap-1 align-items-center\">\r\n                                                        <span className=\"badge bg-secondary\" style={{ fontSize: '9px' }}>\r\n                                                          Subcategory\r\n                                                        </span>\r\n                                                        <span className={`badge ${subcategory.status ? 'bg-success' : 'bg-danger'}`} style={{ fontSize: '9px' }}>\r\n                                                          {subcategory.status ? 'Active' : 'Inactive'}\r\n                                                        </span>\r\n                                                        {isSelected && (\r\n                                                          <span className=\"badge bg-primary\" style={{ fontSize: '9px' }}>\r\n                                                            <i className=\"bi bi-check-circle me-1\"></i>\r\n                                                            Selected\r\n                                                          </span>\r\n                                                        )}\r\n                                                      </div>\r\n                                                    </div>\r\n                                                    <div className=\"text-end\">\r\n                                                      <small className=\"text-muted\">#{index + 1}</small>\r\n                                                    </div>\r\n                                                  </div>\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n                                          )\r\n                                        })}\r\n                                      </div>\r\n\r\n                                      {/* Footer Info */}\r\n                                      <div className=\"p-2 bg-light border-top text-center\">\r\n                                        <small className=\"text-muted\">\r\n                                          <i className=\"bi bi-info-circle me-1\"></i>\r\n                                          Click checkboxes to select subcategories for homepage display\r\n                                        </small>\r\n                                      </div>\r\n                                    </>\r\n                                  ) : (\r\n                                    <div className=\"text-center py-5\">\r\n                                      <i className=\"bi bi-folder2-open text-muted\" style={{ fontSize: '2.5rem' }}></i>\r\n                                      <h6 className=\"mt-3 text-muted\">No subcategories found</h6>\r\n                                      <p className=\"text-muted mb-3\">\r\n                                        The category \"{mainCategories.find(cat => cat.id === selectedMainCategory)?.name}\" doesn't have any subcategories yet.\r\n                                      </p>\r\n                                      <button \r\n                                        className=\"btn btn-outline-primary btn-sm\"\r\n                                        onClick={() => {\r\n                                          // You can add navigation to create subcategory here\r\n                                          alert('Navigate to Categories > Subcategories to create subcategories for this category')\r\n                                        }}\r\n                                      >\r\n                                        <i className=\"bi bi-plus-circle me-1\"></i>\r\n                                        Create Subcategories\r\n                                      </button>\r\n                                    </div>\r\n                                  )\r\n                                ) : (\r\n                                  <div className=\"text-center py-5\">\r\n                                    <i className=\"bi bi-arrow-left text-primary\" style={{ fontSize: '2.5rem' }}></i>\r\n                                    <h6 className=\"mt-3 text-muted\">Select a main category</h6>\r\n                                    <p className=\"text-muted mb-0\">\r\n                                      Click on a main category from the left panel to view and select its subcategories.\r\n                                    </p>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"text-center py-5\">\r\n                          <i className=\"bi bi-folder2-open text-muted\" style={{ fontSize: '3rem' }}></i>\r\n                          <p className=\"mt-2 text-muted\">No categories available</p>\r\n                          <small className=\"text-muted\">Create categories first to configure this section.</small>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Quick Actions */}\r\n                  {mainCategories.length > 0 && (\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12\">\r\n                        <div className=\"d-flex gap-2 flex-wrap\">\r\n                          <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-outline-primary btn-sm\"\r\n                            onClick={() => {\r\n                              const { mainCategoriesCount } = getCurrentCounts()\r\n                              const availableSlots = MAX_MAIN_CATEGORIES - mainCategoriesCount\r\n                              \r\n                              if (availableSlots <= 0) {\r\n                                setError(`Cannot select more categories. Maximum ${MAX_MAIN_CATEGORIES} main categories allowed.`)\r\n                                return\r\n                              }\r\n                              \r\n                              setCategoryConfig(prev => {\r\n                                const newConfig = { ...prev, categories: { ...prev.categories } }\r\n                                let added = 0\r\n                                \r\n                                mainCategories.forEach(cat => {\r\n                                  if (added < availableSlots && !newConfig.categories[cat.id]?.selected) {\r\n                                    newConfig.categories[cat.id] = {\r\n                                      selected: true,\r\n                                      order: Object.keys(newConfig.categories).filter(id => newConfig.categories[id]?.selected).length,\r\n                                      subcategories: newConfig.categories[cat.id]?.subcategories || {}\r\n                                    }\r\n                                    added++\r\n                                  }\r\n                                })\r\n                                \r\n                                if (added < mainCategories.length - mainCategoriesCount) {\r\n                                  setError(`Only selected ${added} more categories due to limit.`)\r\n                                }\r\n                                \r\n                                return newConfig\r\n                              })\r\n                            }}\r\n                          >\r\n                            <i className=\"bi bi-check-all me-1\"></i>\r\n                            Select All Main Categories\r\n                          </button>\r\n                          \r\n                          <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-outline-success btn-sm\"\r\n                            onClick={() => {\r\n                              if (!selectedMainCategory) {\r\n                                setError('Please select a main category first to add subcategories.')\r\n                                return\r\n                              }\r\n                              \r\n                              const subcategoriesForMain = getSubcategoriesForCategory(selectedMainCategory)\r\n                              const currentSubCount = subcategoriesForMain.filter(sub => \r\n                                categoryConfig.categories[selectedMainCategory]?.subcategories?.[sub.id]?.selected\r\n                              ).length\r\n                              const availableSlots = MAX_SUBCATEGORIES_PER_CATEGORY - currentSubCount\r\n                              \r\n                              if (availableSlots <= 0) {\r\n                                setError(`Cannot select more subcategories. Maximum ${MAX_SUBCATEGORIES_PER_CATEGORY} subcategories per main category allowed.`)\r\n                                return\r\n                              }\r\n                              \r\n                              setCategoryConfig(prev => {\r\n                                const newConfig = { ...prev, categories: { ...prev.categories } }\r\n                                \r\n                                // Ensure main category is selected and has structure\r\n                                if (!newConfig.categories[selectedMainCategory]) {\r\n                                  newConfig.categories[selectedMainCategory] = {\r\n                                    selected: true,\r\n                                    order: Object.keys(newConfig.categories).filter(id => newConfig.categories[id]?.selected).length,\r\n                                    subcategories: {}\r\n                                  }\r\n                                }\r\n                                \r\n                                let added = 0\r\n                                subcategoriesForMain.forEach(sub => {\r\n                                  if (added < availableSlots && !newConfig.categories[selectedMainCategory].subcategories[sub.id]?.selected) {\r\n                                    newConfig.categories[selectedMainCategory].subcategories[sub.id] = {\r\n                                      selected: true,\r\n                                      order: Object.keys(newConfig.categories[selectedMainCategory].subcategories).filter(id => \r\n                                        newConfig.categories[selectedMainCategory].subcategories[id]?.selected\r\n                                      ).length\r\n                                    }\r\n                                    added++\r\n                                  }\r\n                                })\r\n                                \r\n                                if (added < subcategoriesForMain.length - currentSubCount) {\r\n                                  setError(`Only selected ${added} more subcategories due to limit.`)\r\n                                }\r\n                                \r\n                                return newConfig\r\n                              })\r\n                            }}\r\n                          >\r\n                            <i className=\"bi bi-tags me-1\"></i>\r\n                            Select All Subcategories\r\n                          </button>\r\n                          \r\n                          <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-outline-secondary btn-sm\"\r\n                            onClick={() => {\r\n                              setCategoryConfig(prev => ({\r\n                                ...prev,\r\n                                categories: {}\r\n                              }))\r\n                              setSelectedMainCategory(null)\r\n                            }}\r\n                          >\r\n                            <i className=\"bi bi-x-circle me-1\"></i>\r\n                            Clear All Selections\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-secondary\" \r\n                onClick={() => setShowCategoryConfig(false)}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"btn btn-primary\" \r\n                onClick={saveCategoryConfig}\r\n                disabled={loading}\r\n              >\r\n                {loading ? (\r\n                  <>\r\n                    <span className=\"spinner-border spinner-border-sm me-2\"></span>\r\n                    Saving...\r\n                  </>\r\n                ) : (\r\n                  'Save Configuration'\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Move section up/down\r\n  const handleMoveSection = async (page, sectionKey, direction) => {\r\n    const sections = page === \"home\" ? homeSections : corporateSections\r\n    const currentIndex = sections.findIndex(s => s.key === sectionKey)\r\n    \r\n    if (direction === 'up' && currentIndex > 0) {\r\n      // Move up logic - would need to update order\r\n      console.log(`Moving ${sectionKey} up`)\r\n    } else if (direction === 'down' && currentIndex < sections.length - 1) {\r\n      // Move down logic - would need to update order\r\n      console.log(`Moving ${sectionKey} down`)\r\n    }\r\n    \r\n    // TODO: Implement actual reordering\r\n    setSuccess('Section order updated!')\r\n    setTimeout(() => setSuccess(''), 2000)\r\n  }\r\n\r\n  // Render section controls\r\n  const renderSections = () => {\r\n    const sections = getCurrentSections()\r\n    const currentPage = PAGES.find(p => p.key === selectedPage)\r\n    \r\n    return (\r\n      <div className=\"col-md-9\">\r\n        <div className=\"card border-0 shadow-sm\">\r\n          <div className=\"card-header bg-white border-bottom\">\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n              <div>\r\n                <h5 className=\"mb-1 fw-semibold\">{currentPage.label}</h5>\r\n                <p className=\"text-muted mb-0 small\">{currentPage.description}</p>\r\n              </div>\r\n              <span className=\"badge bg-primary\">\r\n                {sections.filter(s => visibleSections[selectedPage][s.key]).length} active\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"card-body p-0\">\r\n            {sections.length === 0 ? (\r\n              <div className=\"text-center py-5\">\r\n                <i className=\"bi bi-grid\" style={{ fontSize: '3rem', color: '#6c757d' }}></i>\r\n                <p className=\"mt-2 text-muted\">No sections configured for this page.</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-hover mb-0\">\r\n                  <thead className=\"table-light\">\r\n                    <tr>\r\n                      <th className=\"ps-4\">Section</th>\r\n                      <th>Description</th>\r\n                      <th>Order</th>\r\n                      <th>Status</th>\r\n                      <th className=\"text-center\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {sections.map((section, index) => {\r\n                      const isVisible = visibleSections[selectedPage][section.key]\r\n                      const isCategorySection = section.key === 'giftCategories'\r\n                      \r\n                      return (\r\n                        <tr key={section.key} className={isVisible ? '' : 'table-secondary'}>\r\n                          <td className=\"ps-4\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                              <div>\r\n                                <div className=\"fw-semibold\">{section.label}</div>\r\n                                {isCategorySection && categoryConfig.categoryIds.length > 0 && (\r\n                                  <small className=\"text-muted\">\r\n                                    {categoryConfig.categoryIds.length} categories selected\r\n                                  </small>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"text-muted\">{section.description}</span>\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"badge bg-light text-dark\">{section.order}</span>\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"form-check form-switch\">\r\n                              <input \r\n                                className=\"form-check-input\" \r\n                                type=\"checkbox\" \r\n                                checked={isCategorySection ? categoryConfig.enabled : isVisible}\r\n                                onChange={() => handleToggleSection(selectedPage, section.key)}\r\n                                id={`toggle-${section.key}`}\r\n                              />\r\n                              <label className=\"form-check-label\" htmlFor={`toggle-${section.key}`}>\r\n                                {isCategorySection ? (categoryConfig.enabled ? 'Enabled' : 'Disabled') : (isVisible ? 'Visible' : 'Hidden')}\r\n                              </label>\r\n                            </div>\r\n                          </td>\r\n                          <td className=\"text-center\">\r\n                            <div className=\"btn-group btn-group-sm\">\r\n                              {section.hasConfig && (\r\n                                <button\r\n                                  className=\"btn btn-outline-primary\"\r\n                                  onClick={openCategoryConfig}\r\n                                  title=\"Configure section\"\r\n                                >\r\n                                  <i className=\"bi bi-gear\"></i>\r\n                                </button>\r\n                              )}\r\n                              <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                onClick={() => handleMoveSection(selectedPage, section.key, 'up')}\r\n                                disabled={index === 0}\r\n                                title=\"Move up\"\r\n                              >\r\n                                <i className=\"bi bi-arrow-up\"></i>\r\n                              </button>\r\n                              <button\r\n                                className=\"btn btn-outline-secondary\"\r\n                                onClick={() => handleMoveSection(selectedPage, section.key, 'down')}\r\n                                disabled={index === sections.length - 1}\r\n                                title=\"Move down\"\r\n                              >\r\n                                <i className=\"bi bi-arrow-down\"></i>\r\n                              </button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Render page sidebar\r\n  const renderPageSidebar = () => (\r\n    <div className=\"col-md-3\">\r\n      <div className=\"card border-0 shadow-sm\">\r\n        <div className=\"card-header bg-white border-bottom\">\r\n          <h6 className=\"mb-0 fw-semibold\">\r\n            <i className=\"bi bi-file-earmark-text me-2\"></i>\r\n            Pages\r\n          </h6>\r\n        </div>\r\n        <div className=\"card-body p-0\">\r\n          <div className=\"list-group list-group-flush\">\r\n            {PAGES.map((page) => {\r\n              const isActive = selectedPage === page.key\r\n              const activeCount = visibleSections[page.key] ? \r\n                Object.values(visibleSections[page.key]).filter(Boolean).length : 0\r\n              \r\n              return (\r\n                <button\r\n                  key={page.key}\r\n                  className={`list-group-item list-group-item-action border-0 ${isActive ? 'active' : ''}`}\r\n                  onClick={() => setSelectedPage(page.key)}\r\n                  disabled={loading}\r\n                >\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <div>\r\n                      <div className=\"fw-semibold\">{page.label}</div>\r\n                      <small className={isActive ? 'text-white-50' : 'text-muted'}>\r\n                        {page.description}\r\n                      </small>\r\n                    </div>\r\n                    <span className={`badge ${isActive ? 'bg-white text-primary' : 'bg-primary'}`}>\r\n                      {activeCount}\r\n                    </span>\r\n                  </div>\r\n                </button>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* Page Header */}\r\n      <div className=\"row mb-4\">\r\n        <div className=\"col-12\">\r\n          <div className=\"d-flex justify-content-between align-items-center\">\r\n            <div>\r\n              <h2 className=\"fw-bold text-dark mb-1\">Pages Management</h2>\r\n              <p className=\"text-muted mb-0\">Control which sections appear on each page</p>\r\n            </div>\r\n            <div className=\"d-flex gap-2\">\r\n              <button\r\n                className=\"btn btn-outline-primary\"\r\n                onClick={() => loadPageConfig(selectedPage)}\r\n                disabled={loading}\r\n              >\r\n                <i className=\"bi bi-arrow-clockwise me-2\"></i>\r\n                Refresh\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Status Messages */}\r\n      {error && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n              <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\r\n              <div>{error}</div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close ms-auto\"\r\n                onClick={() => setError('')}\r\n              ></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {success && (\r\n        <div className=\"row mb-3\">\r\n          <div className=\"col-12\">\r\n            <div className=\"alert alert-success d-flex align-items-center\" role=\"alert\">\r\n              <i className=\"bi bi-check-circle-fill me-2\"></i>\r\n              <div>{success}</div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close ms-auto\"\r\n                onClick={() => setSuccess('')}\r\n              ></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Main Content */}\r\n      <div className=\"row\">\r\n        {renderPageSidebar()}\r\n        {renderSections()}\r\n      </div>\r\n\r\n      {/* Category Configuration Modal */}\r\n      {renderCategoryConfigModal()}\r\n\r\n      {/* Loading Overlay */}\r\n      {loading && (\r\n        <div className=\"position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center\" \r\n             style={{ backgroundColor: 'rgba(0,0,0,0.5)', zIndex: 9999 }}>\r\n          <div className=\"spinner-border text-primary\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"
        }
    ]
}