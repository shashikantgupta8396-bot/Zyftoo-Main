{
    "sourceFile": "components/Modal/LoginModal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752850188399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752851197255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,27 +247,43 @@\n                         console.log('🔒 Encrypted data:', encryptedData);\r\n                         console.log('📦 Payload being sent:', { encryptedData });\r\n                         \r\n                         const response = await post(AUTH.LOGIN, { encryptedData }, false);\r\n-                        console.log('📨 Response received:', response);\r\n+                        console.log('📨 Raw response received:', response);\r\n \r\n                         if (!response.success) {\r\n                           const msg = response.message || 'Login failed';\r\n                           console.log('❌ Login failed:', msg);\r\n                           setToast(msg);\r\n                           return;\r\n                         }\r\n \r\n-                        if (!response.data.data.token) {\r\n-                          console.log('❌ Token missing in response:', response.data);\r\n+                        // Decrypt the response data\r\n+                        let decryptedResponse;\r\n+                        if (response.encryptedData) {\r\n+                          console.log('🔓 Decrypting response data...');\r\n+                          decryptedResponse = decryptData(response.encryptedData);\r\n+                          console.log('✅ Decrypted response:', decryptedResponse);\r\n+                        } else {\r\n+                          console.log('⚠️ No encrypted data in response, using as-is');\r\n+                          decryptedResponse = response;\r\n+                        }\r\n+\r\n+                        // Handle nested data structure\r\n+                        const responseData = decryptedResponse.data || decryptedResponse;\r\n+                        console.log('🔍 Response data structure:', responseData);\r\n+\r\n+                        if (!responseData.data?.token) {\r\n+                          console.log('❌ Token missing in response data:', responseData);\r\n                           setToast('Login succeeded but token missing.');\r\n                           return;\r\n                         }\r\n                         \r\n                         console.log('✅ Login successful, storing user data...');\r\n+                        console.log('🎫 Token found:', responseData.token);\r\n                         // Store user data encrypted in localStorage\r\n-                        encryptAndStore('user', response.data.data.user);\r\n-                        login(response.data.data.user);\r\n+                        encryptAndStore('user', responseData.user);\r\n+                        login(responseData.user);\r\n                         setStep('success');\r\n                       } catch (error) {\r\n                         console.error('❌ Login Error:', error);\r\n                         console.error('📋 Login Error details:', {\r\n"
                }
            ],
            "date": 1752850188399,
            "name": "Commit-0",
            "content": "'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useContext } from 'react';\r\nimport AuthContext from '@/components/context/AuthContext';\r\nimport { post, get } from '@/util/apiService';\r\nimport { AUTH, OTP } from '@/util/apiEndpoints';\r\nimport { encryptData, decryptData, encryptAndStore, decryptAndRetrieve } from '@/util/cryptoHelper';\r\n\r\n\r\n\r\n\r\n\r\nexport default function LoginModal({ show, onClose }) {\r\n  const { login } = useContext(AuthContext);\r\n  const [step, setStep] = useState('login'); // 'login' or 'otp' or 'signupOtp' or 'register' or 'register-success'\r\n  const [phone, setPhone] = useState('');\r\n  const [password, setpassword] = useState('');\r\n  const [otp, setOtp] = useState(new Array(6).fill(''));\r\n  const [toast, setToast] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [regPassword, setRegPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [gender, setGender] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [pincode, setPincode] = useState('');\r\n  const [userType, setUserType] = useState('individual'); // or 'corporate'\r\n  const [companyDetails, setCompanyDetails] = useState('');\r\n  const [role, setRole] = useState('user'); // default\r\n  const [isCorporate, setIsCorporate] = useState(false);\r\n  const [companyName, setCompanyName] = useState('');\r\n  const [gstNumber, setGstNumber] = useState('');\r\n  const [companyAddress, setCompanyAddress] = useState('');\r\n  const backgroundImage = '/assets/feature-icon-05.png';\r\n  const hasImage = !!backgroundImage;\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (toast) {\r\n      const timer = setTimeout(() => setToast(''), 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [toast]);\r\n\r\n  // Load user data from encrypted localStorage on component mount\r\n  useEffect(() => {\r\n    try {\r\n      const encryptedUser = decryptAndRetrieve('user');\r\n      if (encryptedUser && login) {\r\n        login(encryptedUser);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading encrypted user data:', error);\r\n      // Clear corrupted data\r\n      localStorage.removeItem('user');\r\n    }\r\n  }, [login]);\r\n\r\n  if (!show) return null;\r\n\r\n  const handleOtpChange = (value, index) => {\r\n    if (!/^\\d*$/.test(value)) return;\r\n    const updatedOtp = [...otp];\r\n    updatedOtp[index] = value;\r\n    setOtp(updatedOtp);\r\n    if (value && index < 5) {\r\n      const nextInput = document.getElementById(`otp-${index + 1}`);\r\n      nextInput?.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"modal-overlay\">\r\n        <div className={`modal-content login-modal ${step === 'register' ? 'step-register' : ''}`}>\r\n          <button className=\"modal-close\" onClick={onClose}>×</button>\r\n\r\n          <div className={`login-modal-left ${step === 'register' ? 'narrow-left' : ''}`}\r\n            style={{\r\n              backgroundImage: hasImage ? `url(${backgroundImage})` : 'none',\r\n              backgroundColor: hasImage ? 'transparent' : '#d3f14a',\r\n              backgroundSize: 'cover',\r\n              backgroundRepeat: 'no-repeat',\r\n              backgroundPosition: 'center',\r\n            }}>\r\n            <div className=\"login-logo-wrapper mobile-only\">\r\n              <div className=\"logo-circle\">\r\n                <img src=\"/assets/img/logo/logo.png\" alt=\"Company Logo\" className=\"login-logo\" />\r\n              </div>\r\n            </div>\r\n            <h2>START YOUR JOURNEY TO SAVE BIG!</h2>\r\n            <p>Up to 40% discount on 250+ brand vouchers</p>\r\n            <div className=\"offer-image desktop-only\">\r\n              <img src=\"/assets/login-illustration.png\" alt=\"Offer\" />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"login-modal-right\">\r\n            <div className=\"login-content-wrapper\">\r\n              <div className=\"login-logo-wrapper desktop-only\">\r\n                <div className=\"logo-circle\">\r\n                  <img src=\"/assets/img/logo/logo.png\" alt=\"Company Logo\" className=\"login-logo\" />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"login-form-wrapper\">\r\n                {step === 'login' ? (\r\n                  <>\r\n                    <h3>Log In/Sign Up</h3>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Phone Number\"\r\n                      className=\"login-input\"\r\n                      value={phone}\r\n                      onChange={(e) => setPhone(e.target.value)}\r\n                    />\r\n                    <label className=\"login-agree\">\r\n                      <input type=\"checkbox\" checked readOnly />\r\n                      By continuing, you agree to Zyftoo<br />\r\n                      <a href=\"#\">Terms of Use</a> and <a href=\"#\">Privacy Policy</a>\r\n                    </label>\r\n                    <button className=\"login-next\"\r\n                      onClick={() => {\r\n                        if (phone.length === 10) {\r\n                          setStep('login-password');\r\n                        } else {\r\n                          setToast('Kindly enter the number');\r\n                        }\r\n                      }}\r\n                    >Next</button>\r\n\r\n                    <button\r\n                      className=\"signup-btn\"\r\n                      onClick={async () => {\r\n                        if (phone.length !== 10) {\r\n                          setToast('Kindly enter the number');\r\n                          return;\r\n                        }\r\n\r\n                        try {\r\n                          // Step 1: Check if user exists\r\n                          const response = await get(`${AUTH.CHECK_USER}/${phone}`);\r\n\r\n                          if (response.data.exists) {\r\n                            setToast('User already exists');\r\n                            return;\r\n                          }\r\n\r\n                          // Step 2: Send OTP with encrypted data\r\n                          const encryptedData = encryptData({ phone, purpose: 'signup' });\r\n                          const otpResponse = await post(OTP.SEND, { encryptedData }, false);\r\n\r\n                          if (!otpResponse.success) {\r\n                            setToast(otpResponse.message || 'Failed to send OTP');\r\n                            return;\r\n                          }\r\n\r\n                          // Step 3: Proceed to next screen\r\n                          setStep('signupOtp');\r\n                        } catch (err) {\r\n                          console.error('Signup OTP flow failed:', err.message || err);\r\n                          setToast('Something went wrong');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Signup\r\n                    </button>\r\n                    <div\r\n                      className=\"forgot-password-section\"\r\n                      onClick={async () => {\r\n                        if (phone.length !== 10) {\r\n                          setToast('Kindly enter the number');\r\n                          return;\r\n                        }\r\n\r\n                        try {\r\n                          // Step 1: Check if user exists\r\n                          console.log('Checking user existence for phone:', phone);\r\n                          const response = await get(`${AUTH.CHECK_USER}/${phone}`);\r\n                          console.log('User existence check response:', response.data);\r\n\r\n                          if (!response.data.exists) {\r\n                            setToast('No User registered with this phone number');\r\n                            return;\r\n                          }\r\n\r\n                          // Step 2: Send OTP with encrypted data\r\n                          const encryptedData = encryptData({ phone, purpose: 'reset' });\r\n                          const otpResponse = await post(OTP.SEND, { encryptedData }, false);\r\n                          console.log('OTP send response:', otpResponse.data);\r\n\r\n                          if (!otpResponse.success) {\r\n                            setToast(otpResponse.message || 'Failed to send OTP');\r\n                            return;\r\n                          }\r\n\r\n                          // Step 3: Proceed to next screen\r\n                          setStep('forgotOtp');\r\n                        } catch (err) {\r\n                          console.error('Forgot password OTP flow failed:', err.message || err);\r\n                          setToast('Something went wrong');\r\n                        }\r\n                      }}\r\n                    >\r\n                      Forgot Password?\r\n                    </div>\r\n\r\n                  </>\r\n                ) : step === 'login-password' ? (\r\n                  <>\r\n                    <div className='password-text1'><h3>Password:</h3></div>\r\n                    <div style={{ marginBottom: '10px', fontSize: '14px', color: '#666' }}>\r\n                      <strong>Phone:</strong> {phone || 'Not set'}\r\n                    </div>\r\n                    <input\r\n                      type=\"password\"\r\n                      placeholder=\"Enter Your password\"\r\n                      className=\"password-input\"\r\n                      value={password}\r\n                      onChange={(e) => setpassword(e.target.value)}\r\n                    />\r\n                    <button\r\n                      className=\"login-btn\"\r\n                      onClick={async () => {\r\n                      if (password.trim() === '') {\r\n                        setToast('Enter the Password to Proceed');\r\n                        return;\r\n                      }\r\n\r\n                      try {\r\n                        if (!phone || phone.trim() === '') {\r\n                          setToast('Phone number is required');\r\n                          return;\r\n                        }\r\n                        \r\n                        console.log('🔍 DEBUG: Starting login process...');\r\n                        console.log('📱 Phone:', phone);\r\n                        console.log('🔑 Password length:', password.length);\r\n                        \r\n                        // Encrypt login credentials\r\n                        const loginData = { phone, password };\r\n                        console.log('📝 Original login data:', loginData);\r\n                        \r\n                        const encryptedData = encryptData(loginData);\r\n                        console.log('🔒 Encrypted data:', encryptedData);\r\n                        console.log('📦 Payload being sent:', { encryptedData });\r\n                        \r\n                        const response = await post(AUTH.LOGIN, { encryptedData }, false);\r\n                        console.log('📨 Response received:', response);\r\n\r\n                        if (!response.success) {\r\n                          const msg = response.message || 'Login failed';\r\n                          console.log('❌ Login failed:', msg);\r\n                          setToast(msg);\r\n                          return;\r\n                        }\r\n\r\n                        if (!response.data.data.token) {\r\n                          console.log('❌ Token missing in response:', response.data);\r\n                          setToast('Login succeeded but token missing.');\r\n                          return;\r\n                        }\r\n                        \r\n                        console.log('✅ Login successful, storing user data...');\r\n                        // Store user data encrypted in localStorage\r\n                        encryptAndStore('user', response.data.data.user);\r\n                        login(response.data.data.user);\r\n                        setStep('success');\r\n                      } catch (error) {\r\n                        console.error('❌ Login Error:', error);\r\n                        console.error('📋 Login Error details:', {\r\n                          message: error.message,\r\n                          status: error.status,\r\n                          data: error.data\r\n                        });\r\n                        setToast('Server Error: ' + (error.message || 'Unknown error'));\r\n                      }\r\n                    }}\r\n                    >\r\n                      Login\r\n                    </button>\r\n                  </>\r\n                ) : step === 'signupOtp' ? (\r\n                  <>\r\n                    <h3>Enter OTP To Proceed:</h3>\r\n                    <div style={{ marginBottom: '10px' }}></div>\r\n                     <strong>Phone:</strong> {phone || 'Not set'}\r\n                    <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>\r\n                      {otp.map((value, index) => (\r\n                        <input\r\n                          key={index}\r\n                          id={`otp-${index}`}\r\n                          type=\"text\"\r\n                          maxLength=\"1\"\r\n                          value={value}\r\n                          onChange={(e) => handleOtpChange(e.target.value, index)}\r\n                          className=\"otp-input-box\"\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                    <div style={{ fontSize: '12px', marginBottom: '10px' }}>\r\n                      Resend OTP in: <span style={{ color: '#007bff' }}>01:24</span>\r\n                    </div>\r\n                    <button\r\n                      className=\"login-next\"\r\n                      onClick={async () => {\r\n                        console.log('OTP step. Phone is:', phone);\r\n                        const enteredOtp = otp.join('').trim();\r\n\r\n                        if (!phone) {\r\n                          setToast('Phone number is missing. Please start over.');\r\n                          return;\r\n                        }\r\n\r\n                        if (enteredOtp.length !== 6) {\r\n                          setToast('Please enter all 6 digits of OTP');\r\n                          return;\r\n                        }\r\n\r\n                        try {\r\n                          console.log('Verifying OTP:', enteredOtp);\r\n                          \r\n                          // Encrypt OTP verification data\r\n                          const encryptedData = encryptData({\r\n                            phone,\r\n                            otp: enteredOtp,\r\n                            purpose: 'signup',\r\n                          });\r\n                          \r\n                          const response = await post(OTP.VERIFY, { encryptedData }, false);\r\n                          console.log('OTP verification response:', response);\r\n\r\n                          if (!response.success) {\r\n                            setToast(response.message || 'Wrong OTP');\r\n                            return;\r\n                          }\r\n\r\n                          setStep('register'); // ✅ Go to registration step\r\n                        } catch (err) {\r\n                          console.error('OTP verification failed:', err.message || err);\r\n                          setToast('Something went wrong');\r\n                        }\r\n                      }}\r\n                      >\r\n                        Next\r\n                    </button>\r\n                  </>\r\n                  ): step === 'forgotOtp' ? (\r\n                  <>\r\n                    <h3>Enter OTP To Proceed:</h3>\r\n                    <div style={{ marginBottom: '5px' }}></div>\r\n                     <strong>Phone:</strong> {phone || 'Not set'}\r\n                    <div style={{ display: 'flex', gap: '10px', marginBottom: '30px' }}>\r\n                      {otp.map((value, index) => (\r\n                        <input\r\n                          key={index}\r\n                          id={`otp-${index}`}\r\n                          type=\"text\"\r\n                          maxLength=\"1\"\r\n                          value={value}\r\n                          onChange={(e) => handleOtpChange(e.target.value, index)}\r\n                          className=\"otp-input-box\"\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                    <div style={{ fontSize: '12px', marginBottom: '10px' }}>\r\n                      Resend OTP in: <span style={{ color: '#007bff' }}>01:24</span>\r\n                    </div>\r\n                    <button\r\n                      className=\"login-next\"\r\n                      onClick={async () => {\r\n                        console.log('OTP step. Phone is:', phone);\r\n                        const enteredOtp = otp.join('').trim();\r\n\r\n                        if (!phone) {\r\n                          setToast('Phone number is missing. Please start over.');\r\n                          return;\r\n                        }\r\n\r\n                        if (enteredOtp.length !== 6) {\r\n                          setToast('Please enter all 6 digits of OTP');\r\n                          return;\r\n                        }\r\n\r\n                        try {\r\n                          console.log('Verifying OTP:', enteredOtp);\r\n                          \r\n                          // Encrypt OTP verification data\r\n                          const encryptedData = encryptData({\r\n                            phone,\r\n                            otp: enteredOtp,\r\n                            purpose: 'reset',\r\n                          });\r\n                          \r\n                          const response = await post(OTP.VERIFY, { encryptedData }, false);\r\n                          console.log('OTP verification response:', response);\r\n\r\n                          if (!response.success) {\r\n                            setToast(response.message || 'Wrong OTP');\r\n                            return;\r\n                          }\r\n\r\n                          setStep('password-reset'); // ✅ Go to reset password step\r\n                        } catch (err) {\r\n                          console.error('OTP verification failed:', err.message || err);\r\n                          setToast('Something went wrong');\r\n                        }\r\n                      }}\r\n                      >\r\n                        Next\r\n                    </button>\r\n                  </>\r\n                  ): step === 'password-reset' ? (\r\n                  <>\r\n                    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '30px' }}>\r\n                      <h3 style={{ fontSize: '22px' }}>Create Your Account</h3>\r\n                    </div>\r\n                    <div className=\"form-vertical\">\r\n                      <input className=\"login-input\" type=\"password\" placeholder=\"Password\" value={regPassword} onChange={(e) => setRegPassword(e.target.value)} />\r\n                      <input className=\"login-input\" type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n                      \r\n                      <button className=\"login-next\" onClick={async () => {\r\n                        if (!regPassword || !confirmPassword) {\r\n                          setToast('Please fill all required fields');\r\n                          return;\r\n                        }\r\n\r\n                        if (regPassword !== confirmPassword) {\r\n                          setToast('Passwords do not match');\r\n                          return;\r\n                        }\r\n\r\n                        try {\r\n                          // Encrypt password reset data\r\n                          const encryptedData = encryptData({\r\n                            phone,\r\n                            newPassword: regPassword\r\n                          });\r\n                          \r\n                          const response = await post(AUTH.RESET_PASSWORD, { encryptedData }, false);\r\n\r\n                          if (!response.success) {\r\n                            setToast(response.message || 'Password reset failed');\r\n                            return;\r\n                          }\r\n\r\n                          console.log('✅ Password Reset Success:', response.data);\r\n                          setStep('register-success');\r\n                        } catch (error) {\r\n                          console.error('❌ Password Reset Error:', error);\r\n                          setToast('Server error. Try again.');\r\n                        }\r\n                      }}>\r\n                      Update Password \r\n                    </button>\r\n\r\n                    </div>\r\n                  </>\r\n                  \r\n                ) : step === 'success' ? (\r\n                  <>\r\n                    <h3 style={{ fontSize: \"22px\", marginBottom: \"10px\" }}>Congratulations</h3>\r\n                    <p style={{ marginBottom: \"30px\" }}>You have successfully Logged In.</p>\r\n                    <button className=\"continue-btn\" onClick={onClose}>CONTINUE SHOPPING</button>\r\n                  </>\r\n                ) : step === 'register' ? (\r\n                  <>\r\n                    <div style={{ display: 'flex', justifyContent: 'center', marginTop: '30px' }}>\r\n                      <h3 style={{ fontSize: '22px' }}>Create Your Account</h3>\r\n                    </div>\r\n                    <div className=\"form-vertical\">\r\n                      <input className=\"login-input\" type=\"text\" placeholder=\"Full Name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                      <input className=\"login-input\" type=\"email\" placeholder=\"Email Address\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                      <input className=\"login-input\" type=\"password\" placeholder=\"Password\" value={regPassword} onChange={(e) => setRegPassword(e.target.value)} />\r\n                      <input className=\"login-input\" type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n                      <select className=\"login-input\" value={gender} onChange={(e) => setGender(e.target.value)}>\r\n                        <option value=\"\">Select Gender</option>\r\n                        <option value=\"male\">Male</option>\r\n                        <option value=\"female\">Female</option>\r\n                        <option value=\"other\">Other</option>\r\n                      </select>\r\n                      <input className=\"login-input\" type=\"date\" placeholder=\"Date of Birth\" value={dob} onChange={(e) => setDob(e.target.value)} />\r\n                      <input className=\"login-input\" type=\"text\" placeholder=\"Pincode\" value={pincode} onChange={(e) => setPincode(e.target.value)} />\r\n                      {/* Corporate User Toggle */}\r\n                      <div className=\"corporate-toggle-wrapper\">\r\n                        <label className=\"corporate-checkbox\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={isCorporate}\r\n                            onChange={(e) => {\r\n                              const checked = e.target.checked;\r\n                              setIsCorporate(checked);\r\n                              setUserType(checked ? 'corporate' : 'individual');\r\n\r\n                              // Optional: Clear corporate fields when unchecked\r\n                              if (!checked) {\r\n                                setCompanyName('');\r\n                                setGstNumber('');\r\n                                setCompanyAddress('');\r\n                              }\r\n                            }}\r\n                          />\r\n                          Are you a Corporate User?\r\n                        </label>\r\n                      </div>\r\n\r\n                      {/* Show corporate fields if selected */}\r\n                      {isCorporate && (\r\n                        <div className=\"corporate-fields\">\r\n                          <input\r\n                            className=\"login-input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Company Name\"\r\n                            value={companyName}\r\n                            onChange={(e) => setCompanyName(e.target.value)}\r\n                          />\r\n                          <input\r\n                            className=\"login-input\"\r\n                            type=\"text\"\r\n                            placeholder=\"GST Number\"\r\n                            value={gstNumber}\r\n                            onChange={(e) => setGstNumber(e.target.value)}\r\n                          />\r\n                          <input\r\n                            className=\"login-input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Company Address\"\r\n                            value={companyAddress}\r\n                            onChange={(e) => setCompanyAddress(e.target.value)}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      <button className=\"login-next\" onClick={async () => {\r\n                      if (!name || !email || !regPassword || !confirmPassword || !gender || !dob || !pincode) {\r\n                        setToast('Please fill all required fields');\r\n                        return;\r\n                      }\r\n\r\n                      if (regPassword !== confirmPassword) {\r\n                        setToast('Passwords do not match');\r\n                        return;\r\n                      }\r\n\r\n                      try {\r\n                        // Encrypt registration data\r\n                        const registrationData = {\r\n                          name,\r\n                          email,\r\n                          phone, // ✅ Already stored from earlier step\r\n                          password: regPassword,\r\n                          confirmPassword,\r\n                          otp: otp.join('').trim(), // ✅ We still have OTP\r\n                          userType,\r\n                          companyDetails,\r\n                          role,\r\n                          gender,\r\n                          dob,\r\n                          pincode,\r\n                          companyDetails: isCorporate ? {\r\n                            companyName,\r\n                            gstNumber,\r\n                            address: companyAddress\r\n                          } : {},\r\n                        };\r\n\r\n                        const encryptedData = encryptData(registrationData);\r\n                        const response = await post(AUTH.SIGNUP, { encryptedData }, false);\r\n                      \r\n                        if (!response.success) {\r\n                          setToast(response.message || 'Signup failed');\r\n                          return;\r\n                        }\r\n\r\n                        console.log('✅ Signup Success:', response.data);\r\n                        setStep('register-success');\r\n                      } catch (error) {\r\n                        console.error('❌ Signup Error:', error);\r\n                        setToast('Server error. Try again.');\r\n                      }\r\n                    }}>\r\n                      REGISTER\r\n                    </button>\r\n\r\n                    </div>\r\n                  </>\r\n                ) : step === 'register-success' ? (\r\n                  <>\r\n                    <div className=\"login-success-message\">\r\n                      <h3>Congratulations</h3>\r\n                      <p>Your account has been created successfully.</p>\r\n                    </div>\r\n                    <div className=\"button-row\">\r\n                      <button\r\n                        className=\"login-next\" id=\"continue-shopping-btn\" \r\n                        onClick={() => {\r\n                          setStep('login');\r\n                          onClose();\r\n                        }}\r\n                      >\r\n                        CONTINUE SHOPPING\r\n                      </button>\r\n                      <button\r\n                        className=\"secondary-button\" id=\"continue-shopping-btn\" \r\n                        onClick={() => setStep('login')}\r\n                      >\r\n                        BACK TO LOGIN\r\n                      </button>\r\n                    </div>\r\n                  </>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {toast && (\r\n        <div style={{\r\n          position: 'fixed',\r\n          bottom: '30px',\r\n          left: '50%',\r\n          transform: 'translateX(-50%)',\r\n          background: '#ff4d4f',\r\n          color: '#fff',\r\n          padding: '10px 20px',\r\n          borderRadius: '6px',\r\n          zIndex: 99999,\r\n          fontSize: '13px',\r\n          fontWeight: '500',\r\n        }}>{toast}</div>\r\n      )}\r\n\r\n      <style jsx>{`\r\n       .modal-overlay {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100vw;\r\n            height: 100vh;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            z-index: 99996;\r\n          }\r\n\r\n          .modal-content.login-modal {\r\n            display: flex;\r\n            flex-direction: row;\r\n            width: 800px; \r\n            max-height: 90vh;\r\n            overflow: hidden;         \r\n            background: white;\r\n            border-radius: 10px;\r\n            overflow: hidden; /* 🔴 REMOVE this */\r\n            position: relative;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            font-family: \"Segoe UI\", sans-serif;\r\n            max-height: 90vh; /* ✅ NEW */\r\n          }\r\n\r\n          .login-modal-left {\r\n            width: 50%;\r\n            background: #d3f14a;\r\n            padding: 30px 20px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            text-align: center;\r\n            transition: width 0.3s ease-in-out;\r\n          }\r\n\r\n          .narrow-left {\r\n            width:35% !important;\r\n          }\r\n\r\n          .login-modal-left h2 {\r\n            font-size: 20px;\r\n            font-weight: 700;\r\n            margin-bottom: 12px;\r\n            line-height: 1.3;\r\n          }\r\n\r\n          .login-modal-left p {\r\n            font-size: 13px;\r\n            font-weight: 500;\r\n          }\r\n\r\n          .login-modal-left img {\r\n            width: 90px;\r\n            margin: 15px auto 0;\r\n          }\r\n\r\n          .login-modal-right {\r\n            width: 50%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: flex-start;\r\n            background: white;\r\n            box-sizing: border-box;\r\n            position: relative;\r\n            padding: 0;\r\n            transition: width 0.3s ease-in-out;\r\n            overflow-y: auto; \r\n            height:400px;       /* ✅ Enable scroll */\r\n            max-height: 500px;       /* ✅ Lock scrollable height */\r\n          }\r\n\r\n          .login-content-wrapper {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            width: 100%;\r\n            max-width: 100%; /* let it fill the container */\r\n            padding: 5px 20px;  /* spacing from both sides */\r\n            box-sizing: border-box;\r\n            margin-top:25%;\r\n          }\r\n          .login-logo-wrapper {\r\n            position: absolute;\r\n            top: 20px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            z-index: 10;\r\n          }\r\n          .password-text1{\r\n            margin-left:36%;\r\n          }\r\n\r\n          .logo-circle {\r\n            background-color: black;\r\n            padding: 10px;\r\n            height: 60px;\r\n            width: 100px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n          }\r\n\r\n          .login-logo {\r\n            height: 80px; /* or adjust as needed */\r\n            width: auto;\r\n          }\r\n\r\n          .login-modal.step-register .login-modal-right {\r\n            width: 60%;\r\n          }\r\n          .login-form-wrapper {\r\n            width: 100%;\r\n            max-width: 300px;\r\n            max-height: 100%;\r\n            padding: 0;\r\n            overflow: unset;\r\n            margin-top:35%;\r\n          }\r\n\r\n          .form-grid {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px 14px;\r\n          }\r\n\r\n          .full-width {\r\n            grid-column: 1 / -1;\r\n          }\r\n\r\n          .login-modal-right h3 {\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            margin-bottom: 16px;\r\n          }\r\n\r\n          .login-input,\r\n          select.login-input{\r\n            padding: 6px 10px;\r\n            margin: 0;\r\n            font-size: 13px;\r\n            height: 32px;\r\n            width: 100%;\r\n            border: 1px solid #ccc;\r\n            border-radius: 4px;\r\n            box-sizing: border-box;\r\n          }\r\n          .password-input {\r\n            padding: 6px 10px;\r\n            margin: 0;\r\n            font-size: 13px;\r\n            height: 32px;\r\n            width: 100%;\r\n            border: 1px solid #ccc;\r\n            border-radius: 4px;\r\n            box-sizing: border-box;\r\n            text-align: center;\r\n\r\n          }\r\n\r\n          select.login-input {\r\n            background: #fff;\r\n          }\r\n\r\n          .otp-input-box {\r\n            width: 36px;\r\n            height: 40px;\r\n            font-size: 16px;\r\n            text-align: center;\r\n            border: 1px solid #ccc;\r\n            border-radius: 4px;\r\n          }\r\n\r\n          .login-agree {\r\n            font-size: 12px;\r\n            color: #333;\r\n            margin: 12px 0;\r\n          }\r\n\r\n          .login-agree a {\r\n            color: #007bff;\r\n            text-decoration: none;\r\n          }\r\n          .button-row {\r\n            display: flex;\r\n            justify-content: center;\r\n            gap: 16px; /* Adjust as needed */\r\n            margin-top: 20px; /* Optional: space from content above */\r\n          }\r\n\r\n\r\n          .login-next,\r\n          .secondary-button,.signup-btn {\r\n            background-color:rgb(76, 105, 149);\r\n            border: none;\r\n            padding: 8px 12px;\r\n            cursor: pointer;\r\n            font-weight: 600;\r\n            border-radius: 4px;\r\n            font-size: 11px;\r\n            height:35;\r\n            width: 40%;\r\n            margin: 12px 12px 0; \r\n          }\r\n            .login-next:hover {\r\n            background-color: #007bff;\r\n            color: white;\r\n          }\r\n            .signup-btn:hover {\r\n            background-color: #007bff;\r\n            color: white;\r\n          }\r\n\r\n          .secondary-button {\r\n            background: white;\r\n            border: 1px solid black;\r\n            gap:16px;\r\n          }\r\n            .secondary-button:hover {\r\n            background-color: #007bff;\r\n            color: white;\r\n          }\r\n          .login-btn{\r\n            background-color:rgb(76, 105, 149);\r\n            border: none;\r\n            padding: 8px 12px;\r\n            cursor: pointer;\r\n            font-weight: 600;\r\n            border-radius: 4px;\r\n            font-size: 11px;\r\n            height:35;\r\n            width: 40%;\r\n            margin: 12px 0px 0; \r\n          }\r\n            .login-btn:hover {\r\n            background-color: #007bff;\r\n            color: white;\r\n          }\r\n          .continue-btn{\r\n            background-color:rgb(76, 105, 149);\r\n            border: none;\r\n            padding: 8px 12px;\r\n            cursor: pointer;\r\n            font-weight: 600;\r\n            border-radius: 4px;\r\n            font-size: 11px;\r\n            height:35;\r\n            width: 60%;\r\n            margin: 0px 0px 0; \r\n          }\r\n          #continue-shopping-btn {\r\n            \r\n            font-size: 9px;\r\n            width: 60%;\r\n            margin: 0px 0px 0; \r\n          }\r\n\r\n          .modal-close {\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 15px;\r\n            font-size: 22px;\r\n            background: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            color: #333;\r\n          }\r\n\r\n          .zy-header-login-icon {\r\n            background: none;\r\n            border: none;\r\n            font-size: 18px;\r\n            cursor: pointer;\r\n            margin-left: 15px;\r\n            color: white;\r\n          }\r\n          .form-vertical {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 12px;\r\n          }\r\n\r\n          .form-row-2col {\r\n            display: flex;\r\n            gap: 12px;\r\n          }\r\n\r\n          .login-input,\r\n          select.login-input {\r\n            padding: 8px 10px;\r\n            font-size: 13px;\r\n            height: 34px;\r\n            width: 100%;\r\n            border: 1px solid #ccc;\r\n            border-radius: 4px;\r\n            box-sizing: border-box;\r\n          }\r\n          .login-success-message {\r\n          text-align: center;\r\n          margin-bottom: 30px;\r\n        }\r\n          .modal-close {\r\n            position: absolute;\r\n            top: 12px;\r\n            right: 12px;\r\n            font-size: 24px;\r\n            background: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            color: #111;\r\n            font-weight: bold;\r\n            z-index: 20; /* make sure it stays above everything */\r\n            transition: transform 0.2s ease;\r\n          }\r\n\r\n          .modal-close:hover {\r\n            transform: scale(1.2);\r\n            color: red;\r\n          }\r\n            .mobile-only {\r\n              display: none;\r\n            }\r\n          .forgot-password-section {\r\n            font-size: 13px;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            text-align: left;\r\n            font-weight: bold;\r\n            color: #333;\r\n          }\r\n          .corporate-toggle-wrapper {\r\n            margin-top: 10px;\r\n            margin-bottom: 10px;\r\n          }\r\n\r\n          .corporate-checkbox {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n            font-size: 13px;\r\n            font-weight: 500;\r\n            color: #333;\r\n            cursor: pointer;\r\n          }\r\n\r\n          .corporate-checkbox input[type=\"checkbox\"] {\r\n            accent-color: rgb(76, 105, 149);\r\n            width: 16px;\r\n            height: 16px;\r\n            cursor: pointer;\r\n          }\r\n\r\n          .corporate-fields {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 12px;\r\n            margin-top: 10px;\r\n          }\r\n             \r\n          @media (max-width: 768px) {\r\n          .desktop-only {\r\n            display: none;\r\n          }\r\n\r\n          .mobile-only {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            margin-top: -10px;\r\n          }\r\n\r\n          .modal-content.login-modal {\r\n            flex-direction: column;\r\n            width: 90vw;\r\n            height: auto;\r\n          }\r\n\r\n          .login-modal-left,\r\n          .login-modal-right {\r\n            width: 100%;\r\n            height: auto;\r\n          }\r\n\r\n          .login-modal-left {\r\n            padding: 20px 16px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            text-align: center;\r\n            \r\n          }\r\n\r\n          .login-logo-wrapper.mobile-only {\r\n            margin-bottom: 12px;\r\n          }\r\n\r\n          .login-modal-left h2 {\r\n            font-size: 18px;\r\n            font-weight: 600;\r\n            margin-top: 60px;\r\n          }\r\n\r\n          .login-modal-left p {\r\n            font-size: 14px;\r\n            margin-bottom: 10px;\r\n          }\r\n\r\n          .login-modal-left img {\r\n            width: 70px;\r\n            margin-top: 10px;\r\n          }\r\n\r\n          .login-logo {\r\n            height: 50px;\r\n          }\r\n\r\n          .login-form-wrapper {\r\n            padding: 20px;\r\n            max-width: 100%;\r\n            box-sizing: border-box;\r\n          }\r\n\r\n          .modal-close {\r\n            top: 10px;\r\n            right: 10px;\r\n          }\r\n          .login-next{\r\n            width: 80%;\r\n            margin-top: 20px;\r\n          }\r\n          .signup-btn{\r\n            width: 80%;\r\n            margin-top: 20px;}\r\n          }\r\n          .forgot-password-section {\r\n            text-align: center;\r\n          }\r\n         .login-btn{\r\n          width: 80%;\r\n          margin-left: 10%;\r\n          margin-top:25px;      \r\n        }\r\n        .narrow-left {\r\n\r\n          width: 100% !important;\r\n\r\n          }  \r\n\r\n        .login-modal.step-register .login-modal-right {\r\n          width: 100% !important;\r\n          margin-top: 0px;\r\n        }\r\n        .login-content-wrapper{\r\n          margin-top: 0px;\r\n          padding-top: 0px;\r\n        }\r\n         .button-row{\r\n           width: 105%;\r\n         }\r\n\r\n        .button-row #continue-shopping-btn{\r\n         font-size: 7px; !important;\r\n        }  \r\n      `}</style>\r\n    </>\r\n  );\r\n}\r\n"
        }
    ]
}