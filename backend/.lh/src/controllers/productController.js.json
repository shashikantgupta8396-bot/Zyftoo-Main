{
    "sourceFile": "src/controllers/productController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752673388959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752674136543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,31 +187,35 @@\n   if (!product) {\r\n     return res.status(404).json({ message: 'Product not found' });\r\n   }\r\n \r\n-  // List all updatable fields from schema\r\n+\r\n+  // List all updatable fields from the current schema\r\n   const fieldsToUpdate = [\r\n     'name',\r\n     'short_description',\r\n     'description',\r\n-    'store_id',\r\n     'type',\r\n     'unit',\r\n     'weight',\r\n     'stock_status',\r\n     'sku',\r\n     'quantity',\r\n     'price',\r\n+    'compare_price',\r\n+    'cost_price',\r\n+    'sale_price',\r\n     'discount',\r\n-    'sale_price',\r\n     'available_from',\r\n     'available_to',\r\n-    'variations',\r\n     'tags',\r\n     'categories',\r\n+    'selectedCategory',\r\n+    'selectedSubcategories',\r\n     'is_random_related_products',\r\n     'related_products',\r\n     'cross_sell_products',\r\n+    'images',\r\n     'product_thumbnail_id',\r\n     'product_galleries_id',\r\n     'size_chart_image_id',\r\n     'meta_title',\r\n@@ -221,16 +225,13 @@\n     'tax_id',\r\n     'estimated_delivery_text',\r\n     'return_policy_text',\r\n     'is_featured',\r\n-    'safe_checkout',\r\n-    'secure_checkout',\r\n-    'social_share',\r\n-    'encourage_order',\r\n-    'encourage_view',\r\n+    'is_popular',\r\n     'is_trending',\r\n     'is_return',\r\n-    'status'\r\n+    'status',\r\n+    'requires_shipping'\r\n   ];\r\n \r\n   fieldsToUpdate.forEach(field => {\r\n     if (req.body[field] !== undefined) {\r\n@@ -265,76 +266,25 @@\n     message: 'Product deleted successfully'\r\n   });\r\n });\r\n \r\n+\r\n+// Remove getProductMeta or update to match schema (no 'brand' or 'category' field, only 'categories')\r\n const getProductMeta = asyncHandler(async (req, res) => {\r\n-  const categories = await Product.distinct('category');\r\n-  const brands = await Product.distinct('brand');\r\n-\r\n+  const categories = await Product.distinct('categories');\r\n   res.status(200).json({\r\n     message: 'Meta data fetched successfully',\r\n-    categories,\r\n-    brands\r\n+    categories\r\n   });\r\n });\r\n \r\n-const addReview = asyncHandler(async (req, res) => {\r\n-  let rating = req.body.rating;\r\n-  const comment = req.body.comment;\r\n \r\n-  const productId = req.params.id;\r\n+// Remove addReview, updateReview, deleteReview if Product schema does not support reviews\r\n \r\n-  const product = await Product.findById(productId).populate('reviews.user', 'name');\r\n+// If you want to keep review endpoints, you must add a reviews field to the Product schema.\r\n \r\n+// For now, remove review-related endpoints from exports:\r\n \r\n-  if (!product) {\r\n-    return res.status(404).json({ message: 'Product not found' });\r\n-  }\r\n-\r\n-  // ✅ Convert rating to number or default to 0\r\n-  rating = Number(rating);\r\n-  if (isNaN(rating) || rating < 0 || rating > 5) {\r\n-    rating = 0; // auto-correct if invalid\r\n-  }\r\n-\r\n-  // Check if user already reviewed\r\n-  const alreadyReviewed = product.reviews.find(\r\n-    (r) => r.user.toString() === req.user._id.toString()\r\n-  );\r\n-\r\n-  if (alreadyReviewed) {\r\n-    return res.status(400).json({ message: 'You have already reviewed this product' });\r\n-  }\r\n-  \r\n-  const hasOrdered = await Order.findOne({\r\n-  user: req.user._id,\r\n-  'items.product': productId,\r\n-  orderStatus: { $ne: 'Cancelled' }\r\n-});\r\n-\r\n-if (!hasOrdered) {\r\n-  return res.status(403).json({ message: 'Only users who purchased this product can review' });\r\n-}\r\n-\r\n-  const review = {\r\n-    user: req.user._id,\r\n-    name: req.user.name,\r\n-    rating: Number(rating),\r\n-    comment\r\n-  };\r\n-\r\n-  product.reviews.push(review);\r\n-  product.numReviews = product.reviews.length;\r\n-\r\n-  // Recalculate average rating\r\n-  product.rating =\r\n-    product.reviews.reduce((acc, r) => acc + r.rating, 0) / product.reviews.length;\r\n-\r\n-  await product.save();\r\n-\r\n-  res.status(201).json({ message: 'Review added successfully' });\r\n-});\r\n-\r\n const updateReview = asyncHandler(async (req, res) => {\r\n   const { rating, comment } = req.body;\r\n   const productId = req.params.id;\r\n \r\n@@ -395,9 +345,6 @@\n                    getAllProducts, \r\n                    getProductById, \r\n                    updateProduct, \r\n                    deleteProduct, \r\n-                   getProductMeta, \r\n-                   addReview, \r\n-                   updateReview, \r\n-                   deleteReview \r\n-                  };\r\n+                   getProductMeta\r\n+                 };\r\n"
                }
            ],
            "date": 1752673388959,
            "name": "Commit-0",
            "content": "const Product = require('../models/Product');\r\nconst asyncHandler = require('express-async-handler'); // to avoid try-catch\r\nconst Order = require('../models/Order');\r\n\r\n\r\n\r\n\r\n// @desc    Create a new product\r\n// @route   POST /api/products\r\n// @access  Private (Admin only)\r\nconst createProduct = asyncHandler(async (req, res) => {\r\n  try {\r\n    const {\r\n      name,\r\n      short_description,\r\n      description,\r\n      type,\r\n      unit,\r\n      weight,\r\n      stock_status,\r\n      sku,\r\n      quantity,\r\n      price,\r\n      discount,\r\n      sale_price,\r\n      available_from,\r\n      available_to,\r\n      tags,\r\n      categories,\r\n      selectedCategory,\r\n      selectedSubcategories,\r\n      is_random_related_products,\r\n      related_products,\r\n      cross_sell_products,\r\n      images,\r\n      product_thumbnail_id,\r\n      product_galleries_id,\r\n      size_chart_image_id,\r\n      meta_title,\r\n      meta_description,\r\n      product_meta_image_id,\r\n      is_free_shipping,\r\n      tax_id,\r\n      estimated_delivery_text,\r\n      return_policy_text,\r\n      is_featured,\r\n      is_popular,\r\n      is_trending,\r\n      is_return,\r\n      status\r\n    } = req.body;\r\n\r\n    // ✅ Required fields check\r\n    if (!name || !description || !price || !selectedCategory) {\r\n      return res.status(400).json({\r\n        message: 'Missing required fields: name, description, price, or selected category'\r\n      });\r\n    }\r\n\r\n    // ✅ Clean/normalize values\r\n    const cleanTaxId = tax_id && tax_id !== 'tax1' && tax_id !== '' ? tax_id : null;\r\n\r\n    const product = new Product({\r\n      name,\r\n      short_description,\r\n      description,\r\n      type: type || 'simple',\r\n      unit,\r\n      weight: weight ? parseFloat(weight) : undefined,\r\n      stock_status: stock_status || 'in_stock',\r\n      sku,\r\n      quantity: quantity ? parseInt(quantity) : 0,\r\n      price: parseFloat(price),\r\n      discount,\r\n      sale_price,\r\n      available_from,\r\n      available_to,\r\n\r\n      tags,\r\n      categories: [\r\n        selectedCategory,\r\n        ...(selectedSubcategories || [])\r\n      ],\r\n      is_random_related_products,\r\n      related_products,\r\n      cross_sell_products,\r\n\r\n      images,\r\n      product_thumbnail_id,\r\n      product_galleries_id,\r\n      size_chart_image_id,\r\n\r\n      meta_title: meta_title || name,\r\n      meta_description,\r\n      product_meta_image_id,\r\n\r\n      is_free_shipping: !!is_free_shipping,\r\n      tax_id: cleanTaxId,\r\n      estimated_delivery_text,\r\n      return_policy_text,\r\n\r\n      is_featured: !!is_featured,\r\n      is_popular: !!is_popular,\r\n      is_trending: !!is_trending,\r\n      is_return: !!is_return,\r\n      status: status !== false, // default true\r\n      createdBy: req.user._id // for tracking who added it\r\n    });\r\n\r\n    const savedProduct = await product.save();\r\n\r\n    res.status(201).json({\r\n      message: 'Product created successfully',\r\n      product: savedProduct\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating product:', error);\r\n    res.status(500).json({\r\n      message: 'Internal server error while creating product',\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\n\r\n\r\nconst getProductById = asyncHandler(async (req, res) => {\r\n  const productId = req.params.id;\r\n  const sortOrder = req.query.sort === 'oldest' ? 1 : -1; // default to newest\r\n  const limit = parseInt(req.query.limit) || 0;\r\n  const ratingFilter = parseInt(req.query.rating) || 0;\r\n\r\n\r\n\r\n  const product = await Product.findById(productId).populate('reviews.user', 'name');\r\n  if (!product) {\r\n    return res.status(404).json({ message: 'Product not found' });\r\n  }\r\n\r\n  // Clone product data\r\n  const productData = product.toObject();\r\n\r\n  // Fetch orders by current user (if logged in) OR for all users who reviewed\r\n  const orders = await Order.find({\r\n    'items.product': productId,\r\n    orderStatus: { $ne: 'Cancelled' }\r\n  }).select('user');\r\n\r\n  const verifiedUserIds = orders.map((order) => order.user.toString());\r\n  let filteredReviews = product.reviews.filter(\r\n    (r) => r.rating >= ratingFilter\r\n  );\r\n\r\n  // ✅ Sort reviews by date\r\n  filteredReviews.sort((a, b) => {\r\n    if (sortOrder === 1) return new Date(a.createdAt) - new Date(b.createdAt);\r\n    return new Date(b.createdAt) - new Date(a.createdAt);\r\n  });\r\n\r\n  // ✅ Apply limit\r\n  if (limit > 0) {\r\n    filteredReviews = filteredReviews.slice(0, limit);\r\n  }\r\n\r\n  // Tag each review as verified or not\r\n  productData.reviews = product.reviews.map((review) => ({\r\n    _id: review._id,\r\n    name: review.name,\r\n    comment: review.comment,\r\n    rating: review.rating,\r\n    createdAt: review.createdAt,\r\n    isVerifiedBuyer: verifiedUserIds.includes(review.user._id?.toString())\r\n  }));\r\n\r\n  res.status(200).json({\r\n    message: 'Product found',\r\n    product: productData\r\n  });\r\n});\r\n\r\n// @desc    Update a product\r\n// @route   PUT /api/products/:id\r\n// @access  Private (Admin only)\r\nconst updateProduct = asyncHandler(async (req, res) => {\r\n  const productId = req.params.id;\r\n  const product = await Product.findById(productId);\r\n  if (!product) {\r\n    return res.status(404).json({ message: 'Product not found' });\r\n  }\r\n\r\n  // List all updatable fields from schema\r\n  const fieldsToUpdate = [\r\n    'name',\r\n    'short_description',\r\n    'description',\r\n    'store_id',\r\n    'type',\r\n    'unit',\r\n    'weight',\r\n    'stock_status',\r\n    'sku',\r\n    'quantity',\r\n    'price',\r\n    'discount',\r\n    'sale_price',\r\n    'available_from',\r\n    'available_to',\r\n    'variations',\r\n    'tags',\r\n    'categories',\r\n    'is_random_related_products',\r\n    'related_products',\r\n    'cross_sell_products',\r\n    'product_thumbnail_id',\r\n    'product_galleries_id',\r\n    'size_chart_image_id',\r\n    'meta_title',\r\n    'meta_description',\r\n    'product_meta_image_id',\r\n    'is_free_shipping',\r\n    'tax_id',\r\n    'estimated_delivery_text',\r\n    'return_policy_text',\r\n    'is_featured',\r\n    'safe_checkout',\r\n    'secure_checkout',\r\n    'social_share',\r\n    'encourage_order',\r\n    'encourage_view',\r\n    'is_trending',\r\n    'is_return',\r\n    'status'\r\n  ];\r\n\r\n  fieldsToUpdate.forEach(field => {\r\n    if (req.body[field] !== undefined) {\r\n      product[field] = req.body[field];\r\n    }\r\n  });\r\n\r\n  const updatedProduct = await product.save();\r\n\r\n  res.status(200).json({\r\n    message: 'Product updated successfully',\r\n    product: updatedProduct\r\n  });\r\n});\r\n\r\n\r\n// @desc    Delete a product\r\n// @route   DELETE /api/products/:id\r\n// @access  Private (Admin only)\r\nconst deleteProduct = asyncHandler(async (req, res) => {\r\n  const productId = req.params.id;\r\n\r\n  const product = await Product.findById(productId);\r\n\r\n  if (!product) {\r\n    return res.status(404).json({ message: 'Product not found' });\r\n  }\r\n\r\n  await product.deleteOne();\r\n\r\n  res.status(200).json({\r\n    message: 'Product deleted successfully'\r\n  });\r\n});\r\n\r\nconst getProductMeta = asyncHandler(async (req, res) => {\r\n  const categories = await Product.distinct('category');\r\n  const brands = await Product.distinct('brand');\r\n\r\n  res.status(200).json({\r\n    message: 'Meta data fetched successfully',\r\n    categories,\r\n    brands\r\n  });\r\n});\r\n\r\nconst addReview = asyncHandler(async (req, res) => {\r\n  let rating = req.body.rating;\r\n  const comment = req.body.comment;\r\n\r\n  const productId = req.params.id;\r\n\r\n  const product = await Product.findById(productId).populate('reviews.user', 'name');\r\n\r\n\r\n  if (!product) {\r\n    return res.status(404).json({ message: 'Product not found' });\r\n  }\r\n\r\n  // ✅ Convert rating to number or default to 0\r\n  rating = Number(rating);\r\n  if (isNaN(rating) || rating < 0 || rating > 5) {\r\n    rating = 0; // auto-correct if invalid\r\n  }\r\n\r\n  // Check if user already reviewed\r\n  const alreadyReviewed = product.reviews.find(\r\n    (r) => r.user.toString() === req.user._id.toString()\r\n  );\r\n\r\n  if (alreadyReviewed) {\r\n    return res.status(400).json({ message: 'You have already reviewed this product' });\r\n  }\r\n  \r\n  const hasOrdered = await Order.findOne({\r\n  user: req.user._id,\r\n  'items.product': productId,\r\n  orderStatus: { $ne: 'Cancelled' }\r\n});\r\n\r\nif (!hasOrdered) {\r\n  return res.status(403).json({ message: 'Only users who purchased this product can review' });\r\n}\r\n\r\n  const review = {\r\n    user: req.user._id,\r\n    name: req.user.name,\r\n    rating: Number(rating),\r\n    comment\r\n  };\r\n\r\n  product.reviews.push(review);\r\n  product.numReviews = product.reviews.length;\r\n\r\n  // Recalculate average rating\r\n  product.rating =\r\n    product.reviews.reduce((acc, r) => acc + r.rating, 0) / product.reviews.length;\r\n\r\n  await product.save();\r\n\r\n  res.status(201).json({ message: 'Review added successfully' });\r\n});\r\n\r\nconst updateReview = asyncHandler(async (req, res) => {\r\n  const { rating, comment } = req.body;\r\n  const productId = req.params.id;\r\n\r\n  const product = await Product.findById(productId);\r\n  if (!product) return res.status(404).json({ message: 'Product not found' });\r\n\r\n  const review = product.reviews.find(\r\n    (r) => r.user.toString() === req.user._id.toString()\r\n  );\r\n\r\n  if (!review) {\r\n    return res.status(404).json({ message: 'Review not found' });\r\n  }\r\n\r\n  // ✅ Update review fields\r\n  review.rating = Number(rating) || review.rating;\r\n  review.comment = comment || review.comment;\r\n\r\n  // Recalculate rating\r\n  product.rating =\r\n    product.reviews.reduce((acc, r) => acc + r.rating, 0) / product.reviews.length;\r\n\r\n  await product.save();\r\n\r\n  res.status(200).json({ message: 'Review updated successfully' });\r\n});\r\n\r\nconst deleteReview = asyncHandler(async (req, res) => {\r\n  const productId = req.params.id;\r\n\r\n  const product = await Product.findById(productId);\r\n  if (!product) return res.status(404).json({ message: 'Product not found' });\r\n\r\n  const reviewIndex = product.reviews.findIndex(\r\n    (r) => r.user.toString() === req.user._id.toString()\r\n  );\r\n\r\n  if (reviewIndex === -1) {\r\n    return res.status(404).json({ message: 'Review not found' });\r\n  }\r\n\r\n  // ✅ Remove review\r\n  product.reviews.splice(reviewIndex, 1);\r\n\r\n  product.numReviews = product.reviews.length;\r\n\r\n  product.rating =\r\n    product.numReviews > 0\r\n      ? product.reviews.reduce((acc, r) => acc + r.rating, 0) / product.numReviews\r\n      : 0;\r\n\r\n  await product.save();\r\n\r\n  res.status(200).json({ message: 'Review deleted successfully' });\r\n});\r\n\r\nmodule.exports = { createProduct, \r\n                   getAllProducts, \r\n                   getProductById, \r\n                   updateProduct, \r\n                   deleteProduct, \r\n                   getProductMeta, \r\n                   addReview, \r\n                   updateReview, \r\n                   deleteReview \r\n                  };\r\n"
        }
    ]
}